<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="STATISTICAL_DIMENSION_MD">

	<typeAlias alias="statisticalDimensionMd" type="com.ebiz.mmt.domain.StatisticalDimensionMd" />

	<cacheModel id="oneDayCache" type="OSCACHE">
		<flushInterval hours="24" />
		<flushOnExecute statement="insertStatisticalDimensionMd" />
		<flushOnExecute statement="updateStatisticalDimensionMd" />
		<flushOnExecute statement="deleteStatisticalDimensionMd" />
	</cacheModel>

	<resultMap id="statisticalDimensionMdResultForList" class="statisticalDimensionMd">
		<result column="ID" property="id" jdbcType="DECIMAL" />
		<result column="MD_ID" property="md_id" jdbcType="DECIMAL" />
		<result column="MD_NAME" property="md_name" jdbcType="VARCHAR" />
		<result column="MD_SERIES" property="md_series" jdbcType="VARCHAR" />
		<result column="PAR_BRAND_ID" property="par_brand_id" jdbcType="DECIMAL" />
		<result column="PAR_BRAND_NAME" property="par_brand_name" jdbcType="VARCHAR" />
		<result column="BRAND_ID" property="brand_id" jdbcType="DECIMAL" />
		<result column="BRAND_NAME" property="brand_name" jdbcType="VARCHAR" />
		<result column="MD_SIZE" property="md_size" jdbcType="DECIMAL" />
		<result column="SIZE_SEC" property="size_sec" jdbcType="DECIMAL" />
		<result column="IS_KONKA" property="is_konka" jdbcType="DECIMAL" />
		<result column="LABEL_INT" property="label_int" jdbcType="DECIMAL" />
		<result column="IS_4K" property="is_4k" jdbcType="DECIMAL" />
		<result column="IS_DB" property="is_db" jdbcType="DECIMAL" />
		<result column="IS_YTV" property="is_ytv" jdbcType="DECIMAL" />
		<result column="IS_DEL" property="is_del" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="statisticalDimensionMdResult" class="statisticalDimensionMd" extends="statisticalDimensionMdResultForList">
	</resultMap>

	<sql id="sf-statisticalDimensionMd">
		<isNotEmpty prepend=" and " property="id">ID = #id:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="md_id">MD_ID = #md_id:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="md_name">MD_NAME = #md_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="md_series">MD_SERIES = #md_series:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="par_brand_id">PAR_BRAND_ID = #par_brand_id:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="par_brand_name">PAR_BRAND_NAME = #par_brand_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="brand_id">BRAND_ID = #brand_id:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="brand_name">BRAND_NAME = #brand_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="md_size">MD_SIZE = #md_size:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="size_sec">SIZE_SEC = #size_sec:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_konka">IS_KONKA = #is_konka:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="label_int">LABEL_INT = #label_int:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_4k">IS_4K = #is_4k:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_db">IS_DB = #is_db:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_ytv">IS_YTV = #is_ytv:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_del">IS_DEL = #is_del:DECIMAL#</isNotEmpty>
	</sql>

	<select id="selectStatisticalDimensionMd" resultMap="statisticalDimensionMdResult" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
		select * from STATISTICAL_DIMENSION_MD where 1 = 1
		<include refid="sf-statisticalDimensionMd" />
	</select>

	<select id="selectStatisticalDimensionMdList" resultMap="statisticalDimensionMdResultForList" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select * from STATISTICAL_DIMENSION_MD where 1 = 1
		<include refid="sf-statisticalDimensionMd" />
		<!-- order by ID asc -->
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>

	<select id="selectStatisticalDimensionMdCount" resultClass="long" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
		select count(*) from STATISTICAL_DIMENSION_MD where 1 = 1
		<include refid="sf-statisticalDimensionMd" />
	</select>

	<select id="selectStatisticalDimensionMdPaginatedList" resultMap="statisticalDimensionMdResult" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select * from STATISTICAL_DIMENSION_MD where 1 = 1
		<include refid="sf-statisticalDimensionMd" />
		<!-- order by ID asc -->
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!-- 	执行插入数据的SQL语句 2014-12-19-->
	<update id="initStatisticalDimensionMd"  parameterClass="statisticalDimensionMd">
	<![CDATA[
		INSERT INTO STATISTICAL_DIMENSION_MD (ID,
                                      MD_ID,
                                      MD_NAME,
                                      MD_SERIES,
                                      PAR_BRAND_ID,
                                      PAR_BRAND_NAME,
                                      BRAND_ID,
                                      BRAND_NAME,
                                      MD_SIZE,
                                      SIZE_SEC,
                                      IS_KONKA,
                                      LABEL_INT,
                                      IS_4K,
                                      IS_DB,
                                      IS_YTV,
                                      IS_DEL)
   SELECT SEQ_STATISTICAL_DIMENSION_MD.NEXTVAL AS ID, aa.*
     FROM (SELECT a.PD_ID AS MD_ID,                                    
                  a.MD_NAME,                                            
                  a.MD_SERISE MD_SERIES,                                     
                  0 AS PAR_BRAND_ID,                                 
                  '康佳' AS PAR_BRAND_NAME,                      
                  nvl(a.sub_BRAND_ID,114),                                       
                  CASE a.sub_BRAND_ID
                     WHEN 114 THEN '康佳'
                     WHEN 115 THEN '现代'
                     WHEN 116 THEN 'KKTV'
                     else '康佳'
                  END
                     AS BRAND_NAME,                                
                  a.MD_SIZE,                                         
                  a.SIZE_SEC,                                          
                  1 AS IS_KONKA,                                     
                  a.LABEL_INT,                                         
                  a.IS_4K,                                           
                  CASE WHEN a.MD_SIZE >= 48 THEN 1 ELSE 0 END AS IS_DB, 
                  a.IS_YTV,                                           
                  a.IS_DEL                                            
             FROM KONKA_PE_PD_MODEL a
           UNION
           SELECT a.ID AS MD_ID,
                  a.MD_NAME,
                  NULL AS MD_SERISE,
                  a.BRAND_ID AS PAR_BRAND_ID,
                  a.BRAND_NAME AS PAR_BRAND_NAME,
                  NULL AS BRAND_ID,
                  NULL AS BRAND_NAME,
                  a.SCREEN_SIZE AS MD_SIZE,
                  CASE
                     WHEN a.SCREEN_SIZE <= 26 THEN 0
                     WHEN a.SCREEN_SIZE = 29 THEN 1
                     WHEN a.SCREEN_SIZE = 32 THEN 2
                     WHEN a.SCREEN_SIZE >= 37 AND a.SCREEN_SIZE <= 39 THEN 3
                     WHEN a.SCREEN_SIZE >= 40 AND a.SCREEN_SIZE <= 43 THEN 4
                     WHEN a.SCREEN_SIZE >= 46 AND a.SCREEN_SIZE <= 48 THEN 5
                     WHEN a.SCREEN_SIZE >= 50 AND a.SCREEN_SIZE <= 52 THEN 6
                     WHEN a.SCREEN_SIZE = 55 THEN 7
                     WHEN a.SCREEN_SIZE >= 58 AND a.SCREEN_SIZE <= 60 THEN 8
                     WHEN a.SCREEN_SIZE >= 65 THEN 9
                     ELSE -1
                  END
                     AS SIZE_SEC,
                  0 AS IS_KONKA,                                     
                  a.IS_SMART_TV LABEL_INT,                          
                  NULL AS IS_4K,                                       
                  CASE WHEN a.SCREEN_SIZE >= 48 THEN 1 ELSE 0 END AS IS_DB, 
                  NULL AS IS_YTV,                                      
                  a.IS_DEL                                              
             FROM KONKA_MOBILE_PD a) aa
	]]>
	</update>

    <!--品牌-->
	<select id="selectBrandList" resultClass="HashMap" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
      SELECT t1.year_brand_id AS typeId,
       t1.year_BRAND_NAME AS typeName,
       t1.year_MONEY,
       t1.year_NUM,
       t1.year_avg_price,
       t2.yesterday_MONEY,
       t2.yesterday_NUM,
       t2.yesterday_avg_price,
       t3.cur_month_MONEY,
       t3.cur_month_NUM,
       t3.cur_month_avg_price,
       t4.up_month_MONEY,
       t4.up_month_NUM,
       t4.up_month_avg_price
  FROM (                                                      
        SELECT d1.brand_id AS year_brand_id,
               d1.BRAND_NAME AS year_BRAND_NAME,
               (sum (nvl (d2.MONEY, 0))/10000) AS year_MONEY,
               sum (nvl (d2.NUM, 0)) AS year_NUM,
               decode (sum (nvl (d2.NUM, 0)),
                       0,
                       0,
                       (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                  AS year_avg_price
          FROM STATISTICAL_DIMENSION_MD d1
               LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                  ON d1.MD_ID = d2.MODEL_ID
               LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                  ON d2.TIME_ID = d3.ID
         	<![CDATA[WHERE 1 = 1 and d2.is_del=0 and d2.num<>0 and d2.money <>0]]>
         <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
         <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
        <isNotEmpty prepend=" and " property="map.year">d3.YEAR = #map.year:VARCHAR#</isNotEmpty>
        <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
        GROUP BY d1.brand_id, d1.BRAND_NAME) t1
       LEFT JOIN (                                              
                  SELECT d1.brand_id AS yesterday_brand_id,
                         d1.PAR_BRAND_NAME AS yesterday_PAR_BRAND_NAME,
                         (sum (nvl (d2.MONEY, 0))/10000) AS yesterday_MONEY,
                         sum (nvl (d2.NUM, 0)) AS yesterday_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS yesterday_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                  	<![CDATA[ WHERE 1 = 1  and d2.is_del=0  and d2.num<>0 and d2.money <>0 ]]>
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                   	<![CDATA[ AND d3.DAY >=trunc(sysdate)-1 ]]>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.brand_id, d1.PAR_BRAND_NAME) t2
          ON t1.year_brand_id = t2.yesterday_brand_id
       LEFT JOIN (                                              
                  SELECT d1.brand_id AS cur_month_brand_id,
                         d1.PAR_BRAND_NAME AS cur_month_PAR_BRAND_NAME,
                         (sum (nvl (d2.MONEY, 0))/10000) AS cur_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS cur_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS cur_month_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   	<![CDATA[WHERE 1 = 1  and d2.is_del=0  and d2.num<>0 and d2.money <>0]]>
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_year">d3.YEAR = #map.cur_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_month">d3.MONTH = #map.cur_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.brand_id, d1.PAR_BRAND_NAME) t3
          ON t1.year_brand_id = t3.cur_month_brand_id
       LEFT JOIN (                                               
                  SELECT d1.brand_id AS up_month_brand_id,
                         d1.PAR_BRAND_NAME AS up_month_PAR_BRAND_NAME,
                         (sum (nvl (d2.MONEY, 0))/10000) AS up_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS up_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS up_month_avg_price
                    FROM STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                            ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                            ON d2.TIME_ID = d3.ID
                  	<![CDATA[ WHERE 1 = 1  and d2.is_del=0  and d2.num<>0 and d2.money <>0]]>
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.up_year">d3.YEAR = #map.up_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.up_month">d3.MONTH = #map.up_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.brand_id, d1.PAR_BRAND_NAME) t4
          ON t1.year_brand_id = t4.up_month_brand_id
	</select>
	<!-- 品类-->
	<select id="selectBrandTypeList" resultClass="HashMap" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
	  SELECT t1.year_is_4k AS typeId,
       t1.md_type AS typeName,
       t1.year_MONEY,
       t1.year_NUM,
       t1.year_avg_price,
       t2.yesterday_MONEY,
       t2.yesterday_NUM,
       t2.yesterday_avg_price,
       t3.cur_month_MONEY,
       t3.cur_month_NUM,
       t3.cur_month_avg_price,
       t4.up_month_MONEY,
       t4.up_month_NUM,
       t4.up_month_avg_price
     FROM (                                                      
        SELECT d1.IS_4K AS year_is_4k,
               '4K' AS md_type,
               (sum (nvl (d2.MONEY, 0))/10000) AS year_MONEY,
               sum (nvl (d2.NUM, 0)) AS year_NUM,
               decode (sum (nvl (d2.NUM, 0)),
                       0,
                       0,
                       (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                  AS year_avg_price
          FROM STATISTICAL_DIMENSION_MD d1
               LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                  ON d1.MD_ID = d2.MODEL_ID
               LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                  ON d2.TIME_ID = d3.ID
         WHERE 1 = 1   AND d1.IS_4K = 1
         <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
         <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
         <isNotEmpty prepend=" and " property="map.year">d3.YEAR = #map.year:VARCHAR#</isNotEmpty>
         <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
              
        GROUP BY d1.IS_4K) t1
       LEFT JOIN (                                                
                  SELECT d1.IS_4K AS yesterday_IS_4K,
                         (sum (nvl (d2.MONEY, 0))/10000) AS yesterday_MONEY,
                         sum (nvl (d2.NUM, 0)) AS yesterday_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS yesterday_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 
                    <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                    <![CDATA[ AND d3.DAY >=trunc(sysdate)-1 ]]>
                    <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                         AND d1.IS_4K = 1
                  GROUP BY d1.IS_4K) t2
          ON t1.year_IS_4K = t2.yesterday_IS_4K
       LEFT JOIN (                                               
                  SELECT d1.IS_4K AS cur_month_IS_4K,
                         (sum (nvl (d2.MONEY, 0))/10000) AS cur_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS cur_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS cur_month_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                          LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1    AND d1.IS_4K = 1
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_year">d3.YEAR = #map.cur_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_month">d3.MONTH = #map.cur_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.IS_4K) t3
          ON t1.year_IS_4K = t3.cur_month_IS_4K
       LEFT JOIN (                                              
                  SELECT d1.IS_4K AS up_month_IS_4K,
                         (sum (nvl (d2.MONEY, 0))/10000) AS up_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS up_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS up_month_avg_price
                    FROM STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                            ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                            ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 AND d1.IS_4K = 1
                      <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                      <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>  
                       <isNotEmpty prepend=" and " property="map.up_year">d3.YEAR = #map.up_year:VARCHAR#</isNotEmpty>
                       <isNotEmpty prepend=" and " property="map.up_month">d3.MONTH = #map.up_month:VARCHAR#</isNotEmpty>
                      <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                         
                  GROUP BY d1.IS_4K) t4
          ON t1.year_IS_4K = t4.up_month_IS_4K
			UNION
			SELECT t1.year_IS_DB AS typeId,
			       t1.md_type AS typeName,
			       t1.year_MONEY,
			       t1.year_NUM,
			       t1.year_avg_price,
			       t2.yesterday_MONEY,
			       t2.yesterday_NUM,
			       t2.yesterday_avg_price,
			       t3.cur_month_MONEY,
			       t3.cur_month_NUM,
			       t3.cur_month_avg_price,
			       t4.up_month_MONEY,
			       t4.up_month_NUM,
			       t4.up_month_avg_price
			  FROM (                                                     
			        SELECT d1.IS_DB AS year_IS_DB,
			               '大板' AS md_type,
			               (sum (nvl (d2.MONEY, 0))/10000) AS year_MONEY,
			               sum (nvl (d2.NUM, 0)) AS year_NUM,
			               decode (sum (nvl (d2.NUM, 0)),
			                       0,
			                       0,
			                       (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
			                  AS year_avg_price
			          FROM STATISTICAL_DIMENSION_MD d1
			               LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
			                  ON d1.MD_ID = d2.MODEL_ID
			               LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
			                  ON d2.TIME_ID = d3.ID
			         WHERE 1 = 1 AND d1.IS_DB = 1
			              <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
			              <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
			              <isNotEmpty prepend=" and " property="map.year">d3.YEAR = #map.year:VARCHAR#</isNotEmpty>
			              <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
			        GROUP BY d1.IS_DB) t1
			       LEFT JOIN (                                               
                  SELECT d1.IS_DB AS yesterday_IS_DB,
                         (sum (nvl (d2.MONEY, 0))/10000) AS yesterday_MONEY,
                         sum (nvl (d2.NUM, 0)) AS yesterday_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS yesterday_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN 
                            STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1  AND d1.IS_DB = 1
                  <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                  	<![CDATA[ AND d3.DAY >=trunc(sysdate)-1 ]]>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                        
                  GROUP BY d1.IS_DB) t2
          ON t1.year_IS_DB = t2.yesterday_IS_DB
       LEFT JOIN (                                          
                  SELECT d1.IS_DB AS cur_month_IS_DB,
                         (sum (nvl (d2.MONEY, 0))/10000) AS cur_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS cur_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS cur_month_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                          LEFT JOIN 
                            STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1  AND d1.IS_DB = 1
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.cur_year">d3.YEAR = #map.cur_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_month">d3.MONTH = #map.cur_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.IS_DB) t3
          ON t1.year_IS_DB = t3.cur_month_IS_DB
       LEFT JOIN (                                             
                  SELECT d1.IS_DB AS up_month_IS_DB,
                         (sum (nvl (d2.MONEY, 0))/10000) AS up_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS up_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS up_month_avg_price
                    FROM STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                            ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                            ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1  AND d1.IS_DB = 1
                  <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.up_year">d3.YEAR = #map.up_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.up_month">d3.MONTH = #map.up_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>

                  GROUP BY d1.IS_DB) t4
          ON t1.year_IS_DB = t4.up_month_IS_DB
			UNION
			SELECT t1.year_IS_YTV AS typeId,
			       t1.md_type AS typeName,
			       t1.year_MONEY,
			       t1.year_NUM,
			       t1.year_avg_price,
			       t2.yesterday_MONEY,
			       t2.yesterday_NUM,
			       t2.yesterday_avg_price,
			       t3.cur_month_MONEY,
			       t3.cur_month_NUM,
			       t3.cur_month_avg_price,
			       t4.up_month_MONEY,
			       t4.up_month_NUM,
			       t4.up_month_avg_price
			  FROM (                                                        
			        SELECT d1.IS_YTV AS year_IS_YTV,
			               '易TV' AS md_type,
			               (sum (nvl (d2.MONEY, 0))/10000) AS year_MONEY,
			               sum (nvl (d2.NUM, 0)) AS year_NUM,
			               decode (sum (nvl (d2.NUM, 0)),
			                       0,
			                       0,
			                       (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
			                  AS year_avg_price
			          FROM STATISTICAL_DIMENSION_MD d1
			               LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
			                  ON d1.MD_ID = d2.MODEL_ID
			               LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
			                  ON d2.TIME_ID = d3.ID
			         WHERE 1 = 1   AND d1.IS_YTV = 1
			         <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty> 
			         <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
			         <isNotEmpty prepend=" and " property="map.year">d3.YEAR = #map.year:VARCHAR#</isNotEmpty>
			         <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
			        GROUP BY d1.IS_YTV) t1
			       LEFT JOIN (                                             
			                  SELECT d1.IS_YTV AS yesterday_IS_YTV,
			                         (sum (nvl (d2.MONEY, 0))/10000) AS yesterday_MONEY,
			                         sum (nvl (d2.NUM, 0)) AS yesterday_NUM,
			                         decode (sum (nvl (d2.NUM, 0)),
			                                 0,
			                                 0,
			                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
			                            AS yesterday_avg_price
			                    FROM    STATISTICAL_DIMENSION_MD d1
			                         LEFT JOIN
			                            STATISTICAL_DIMENSION_RETAIL_DATA d2
			                         ON d1.MD_ID = d2.MODEL_ID
			                         LEFT JOIN 
			                            STATISTICAL_DIMENSION_TIME_DAY d3
                                    ON d2.TIME_ID = d3.ID
			                   WHERE 1 = 1 AND d1.IS_YTV = 1
			                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
			                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
			                    	<![CDATA[ AND d3.DAY >=trunc(sysdate)-1 ]]>
			                               <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
			                       
			                  GROUP BY d1.IS_YTV) t2
			          ON t1.year_IS_YTV = t2.yesterday_IS_YTV
			       LEFT JOIN (                                              
                  SELECT d1.IS_YTV AS cur_month_IS_YTV,
                         (sum (nvl (d2.MONEY, 0))/10000) AS cur_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS cur_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS cur_month_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN 
			               STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1     AND d1.IS_YTV = 1
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.cur_year">d3.YEAR = #map.cur_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_month">d3.MONTH = #map.cur_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.IS_YTV) t3
            ON t1.year_IS_YTV = t3.cur_month_IS_YTV
           LEFT JOIN (                                              
                  SELECT d1.IS_YTV AS up_month_IS_YTV,
                         (sum (nvl (d2.MONEY, 0))/10000) AS up_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS up_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS up_month_avg_price
                    FROM STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                            ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                            ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 AND d1.IS_YTV = 1
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.up_year">d3.YEAR = #map.up_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.up_month">d3.MONTH = #map.up_month:VARCHAR#</isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.IS_YTV) t4
          ON t1.year_IS_YTV = t4.up_month_IS_YTV
				UNION
				SELECT t1.year_LABEL_INT AS typeId,
				       t1.md_type AS typeName,
				       t1.year_MONEY,
				       t1.year_NUM,
				       t1.year_avg_price,
				       t2.yesterday_MONEY,
				       t2.yesterday_NUM,
				       t2.yesterday_avg_price,
				       t3.cur_month_MONEY,
				       t3.cur_month_NUM,
				       t3.cur_month_avg_price,
				       t4.up_month_MONEY,
				       t4.up_month_NUM,
				       t4.up_month_avg_price
				  FROM (                                                       
				        SELECT d1.LABEL_INT AS year_LABEL_INT,
				               '安卓' AS md_type,
				               (sum (nvl (d2.MONEY, 0))/10000) AS year_MONEY,
				               sum (nvl (d2.NUM, 0)) AS year_NUM,
				               decode (sum (nvl (d2.NUM, 0)),
				                       0,
				                       0,
				                       (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
				                  AS year_avg_price
				          FROM STATISTICAL_DIMENSION_MD d1
				               LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
				                  ON d1.MD_ID = d2.MODEL_ID
				               LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
				                  ON d2.TIME_ID = d3.ID
				         WHERE 1 = 1    AND d1.LABEL_INT = 1         
				              <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
				                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
				                    <isNotEmpty prepend=" and " property="map.year">d3.YEAR = #map.year:VARCHAR#</isNotEmpty>
				                     <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
				        GROUP BY d1.LABEL_INT) t1
				       LEFT JOIN (                                               
				                  SELECT d1.LABEL_INT AS yesterday_LABEL_INT,
				                         (sum (nvl (d2.MONEY, 0))/10000) AS yesterday_MONEY,
				                         sum (nvl (d2.NUM, 0)) AS yesterday_NUM,
				                         decode (sum (nvl (d2.NUM, 0)),
				                                 0,
				                                 0,
				                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
				                            AS yesterday_avg_price
				                    FROM    STATISTICAL_DIMENSION_MD d1
				                         LEFT JOIN
				                            STATISTICAL_DIMENSION_RETAIL_DATA d2
				                         ON d1.MD_ID = d2.MODEL_ID
				                         LEFT JOIN
				                             STATISTICAL_DIMENSION_TIME_DAY d3
                              			 ON d2.TIME_ID = d3.ID
				                   WHERE 1 = 1       AND d1.LABEL_INT = 1
				                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
				                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
				                     	<![CDATA[ AND d3.DAY >=trunc(sysdate)-1 ]]>
				                               <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
				                  GROUP BY d1.LABEL_INT) t2
				          ON t1.year_LABEL_INT = t2.yesterday_LABEL_INT
				       LEFT JOIN (                                             
	                  SELECT d1.LABEL_INT AS cur_month_LABEL_INT,
	                         (sum (nvl (d2.MONEY, 0))/10000) AS cur_month_MONEY,
	                         sum (nvl (d2.NUM, 0)) AS cur_month_NUM,
	                         decode (sum (nvl (d2.NUM, 0)),
	                                 0,
	                                 0,
	                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
	                            AS cur_month_avg_price
	                    FROM    STATISTICAL_DIMENSION_MD d1
	                         LEFT JOIN
	                            STATISTICAL_DIMENSION_RETAIL_DATA d2
	                         ON d1.MD_ID = d2.MODEL_ID
	                           LEFT JOIN
	                             STATISTICAL_DIMENSION_TIME_DAY d3
                             ON d2.TIME_ID = d3.ID
	                   WHERE 1 = 1   AND d1.LABEL_INT = 1
	                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
	                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
	                   <isNotEmpty prepend=" and " property="map.cur_year">d3.YEAR = #map.cur_year:VARCHAR#</isNotEmpty>
                       <isNotEmpty prepend=" and " property="map.cur_month">d3.MONTH = #map.cur_month:VARCHAR#</isNotEmpty>
	                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
	                  GROUP BY d1.LABEL_INT) t3
	          ON t1.year_LABEL_INT = t3.cur_month_LABEL_INT
	       LEFT JOIN (                                             
	                  SELECT d1.LABEL_INT AS up_month_LABEL_INT,
	                         (sum (nvl (d2.MONEY, 0))/10000) AS up_month_MONEY,
	                         sum (nvl (d2.NUM, 0)) AS up_month_NUM,
	                         decode (sum (nvl (d2.NUM, 0)),
	                                 0,
	                                 0,
	                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
	                            AS up_month_avg_price
	                    FROM STATISTICAL_DIMENSION_MD d1
	                         LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
	                            ON d1.MD_ID = d2.MODEL_ID
	                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
	                            ON d2.TIME_ID = d3.ID
	                   WHERE 1 = 1     AND d1.LABEL_INT = 1
	                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
	                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
	                   <isNotEmpty prepend=" and " property="map.up_year">d3.YEAR = #map.up_year:VARCHAR#</isNotEmpty>
                       <isNotEmpty prepend=" and " property="map.up_month">d3.MONTH = #map.up_month:VARCHAR#</isNotEmpty>
	                   <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
	                     
                  GROUP BY d1.LABEL_INT) t4
          ON t1.year_LABEL_INT = t4.up_month_LABEL_INT
	</select>
	<!--尺寸段-->
	<select id="selectSizeSecList" resultClass="HashMap" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
	  SELECT t1.year_SIZE_SEC AS typeId,
       t1.SIZE_SEC AS typeName,
       t1.year_MONEY,
       t1.year_NUM,
       t1.year_avg_price,
       t2.yesterday_MONEY,
       t2.yesterday_NUM,
       t2.yesterday_avg_price,
       t3.cur_month_MONEY,
       t3.cur_month_NUM,
       t3.cur_month_avg_price,
       t4.up_month_MONEY,
       t4.up_month_NUM,
       t4.up_month_avg_price
  FROM (                                                        
        SELECT d1.SIZE_SEC AS year_SIZE_SEC,
               decode (d1.SIZE_SEC,
                       0,
                       '32-',
                       1,
                       '32-36',
                       2,
                       '37-39',
                       3,
                       '40-45',
                       4,
                       '46-50',
                       5,
                       '51-59',
                       6,
                       '60-69',
                       7,
                       '70+',
                       -1,
                       '其他')
                  AS SIZE_SEC,
               (sum (nvl (d2.MONEY, 0))/10000) AS year_MONEY,
               sum (nvl (d2.NUM, 0)) AS year_NUM,
               decode (sum (nvl (d2.NUM, 0)),
                       0,
                       0,
                       (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                  AS year_avg_price
          FROM STATISTICAL_DIMENSION_MD d1
               LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                  ON d1.MD_ID = d2.MODEL_ID
               LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                  ON d2.TIME_ID = d3.ID
         WHERE 1 = 1 AND d1.SIZE_SEC NOT IN (10)
         <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
         <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
        <isNotEmpty prepend=" and " property="map.year">d3.YEAR = #map.year:VARCHAR#</isNotEmpty>
        <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
        GROUP BY d1.SIZE_SEC) t1
       LEFT JOIN (                                              
                  SELECT d1.SIZE_SEC AS yesterday_SIZE_SEC,
                         (sum (nvl (d2.MONEY, 0))/10000) AS yesterday_MONEY,
                         sum (nvl (d2.NUM, 0)) AS yesterday_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS yesterday_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                          ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 AND d1.SIZE_SEC NOT IN (10)
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                 	<![CDATA[ AND d3.DAY >=trunc(sysdate)-1 ]]>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.SIZE_SEC) t2
          ON t1.year_SIZE_SEC = t2.yesterday_SIZE_SEC
       LEFT JOIN (                                             
                  SELECT d1.SIZE_SEC AS cur_month_SIZE_SEC,
                         (sum (nvl (d2.MONEY, 0))/10000) AS cur_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS cur_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS cur_month_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                            LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 AND d1.SIZE_SEC NOT IN (10)
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_year">d3.YEAR = #map.cur_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_month">d3.MONTH = #map.cur_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.SIZE_SEC) t3
          ON t1.year_SIZE_SEC = t3.cur_month_SIZE_SEC
       LEFT JOIN (                                              
                  SELECT d1.SIZE_SEC AS up_month_SIZE_SEC,
                         (sum (nvl (d2.MONEY, 0))/10000) AS up_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS up_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS up_month_avg_price
                    FROM STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                            ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                            ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 AND d1.SIZE_SEC NOT IN (10)
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.up_year">d3.YEAR = #map.up_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.up_month">d3.MONTH = #map.up_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.SIZE_SEC) t4
          ON t1.year_SIZE_SEC = t4.up_month_SIZE_SEC
	</select>
	<!--尺寸-->
	<select id="selectMdSizeList" resultClass="HashMap" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
	  SELECT t1.year_MD_SIZE AS typeId,
       t1.MD_SIZE_NAME AS typeName,
       t1.year_MONEY,
       t1.year_NUM,
       t1.year_avg_price,
       t2.yesterday_MONEY,
       t2.yesterday_NUM,
       t2.yesterday_avg_price,
       t3.cur_month_MONEY,
       t3.cur_month_NUM,
       t3.cur_month_avg_price,
       t4.up_month_MONEY,
       t4.up_month_NUM,
       t4.up_month_avg_price
  FROM (                                                       
        SELECT d1.MD_SIZE AS year_MD_SIZE,d1.MD_SIZE||'英寸' as MD_SIZE_NAME,
               (sum (nvl (d2.MONEY, 0))/10000) AS year_MONEY,
               sum (nvl (d2.NUM, 0)) AS year_NUM,
               decode (sum (nvl (d2.NUM, 0)),
                       0,
                       0,
                       (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                  AS year_avg_price
          FROM STATISTICAL_DIMENSION_MD d1
               LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                  ON d1.MD_ID = d2.MODEL_ID
               LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                  ON d2.TIME_ID = d3.ID
         WHERE 1 = 1 and d1.MD_SIZE not in(10,-3,0)
                <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
               <isNotEmpty prepend=" and " property="map.year">d3.YEAR = #map.year:VARCHAR#</isNotEmpty>
               <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
        GROUP BY d1.MD_SIZE) t1
       LEFT JOIN (                                              
                  SELECT d1.MD_SIZE AS yesterday_MD_SIZE,
                         (sum (nvl (d2.MONEY, 0))/10000) AS yesterday_MONEY,
                         sum (nvl (d2.NUM, 0)) AS yesterday_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS yesterday_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                          LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 and d1.MD_SIZE not in(10,-3,0)
                        <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                        <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                         <![CDATA[ AND d3.DAY >=trunc(sysdate)-1 ]]>
                         <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.MD_SIZE) t2
          ON t1.year_MD_SIZE = t2.yesterday_MD_SIZE
       LEFT JOIN (                                               
                  SELECT d1.MD_SIZE AS cur_month_MD_SIZE,
                         (sum (nvl (d2.MONEY, 0))/10000) AS cur_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS cur_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS cur_month_avg_price
                    FROM    STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN
                            STATISTICAL_DIMENSION_RETAIL_DATA d2
                         ON d1.MD_ID = d2.MODEL_ID
                          LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                         ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 and d1.MD_SIZE not in(10,-3,0)
                   <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.cur_year">d3.YEAR = #map.cur_year:VARCHAR#</isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.cur_month">d3.MONTH = #map.cur_month:VARCHAR#</isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.MD_SIZE) t3
          ON t1.year_MD_SIZE = t3.cur_month_MD_SIZE
       LEFT JOIN (                                              
                  SELECT d1.MD_SIZE AS up_month_MD_SIZE,
                         (sum (nvl (d2.MONEY, 0))/10000) AS up_month_MONEY,
                         sum (nvl (d2.NUM, 0)) AS up_month_NUM,
                         decode (sum (nvl (d2.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d2.MONEY)/10000) / sum (nvl (d2.NUM, 0)))
                            AS up_month_avg_price
                    FROM STATISTICAL_DIMENSION_MD d1
                         LEFT JOIN STATISTICAL_DIMENSION_RETAIL_DATA d2
                            ON d1.MD_ID = d2.MODEL_ID
                         LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d3
                            ON d2.TIME_ID = d3.ID
                   WHERE 1 = 1 and d1.MD_SIZE not in(10,-3,0)
                    <isNotEmpty prepend=" and " property="map.is_lingshou">d2.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.is_fenxiao">d2.DATA_SOURCE=6 </isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.up_year">d3.YEAR = #map.up_year:VARCHAR#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.up_month">d3.MONTH = #map.up_month:VARCHAR#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.dept_id">d2.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.MD_SIZE) t4
          ON t1.year_MD_SIZE = t4.up_month_MD_SIZE
	</select>
	
   
	<!--价格段-->
	<select id="selectPriceDuanList" resultClass="HashMap" parameterClass="statisticalDimensionMd" cacheModel="oneDayCache">
	  SELECT t1.year_PRICE_DUAN AS typeId,
       t1.PRICE_DUAN AS typeName,
       t1.year_MONEY,
       t1.year_NUM,
       t1.year_avg_price,
       t2.yesterday_MONEY,
       t2.yesterday_NUM,
       t2.yesterday_avg_price,
       t3.cur_month_MONEY,
       t3.cur_month_NUM,
       t3.cur_month_avg_price,
       t4.up_month_MONEY,
       t4.up_month_NUM,
       t4.up_month_avg_price
  FROM (
        SELECT d1.PRICE_DUAN AS year_PRICE_DUAN,
        decode (d1.PRICE_DUAN,
               0,'1000-',
               1,'1000-2000',
               2,'2000-3000',
               3,'3000-4000',
               4,'4000-5000',
               5,'5000-7000',
               6,'7000-10000',
               7,'10000-15000',
               8,'15000+'
               )as PRICE_DUAN,
               (sum (D1.MONEY)/10000) AS year_MONEY,
               sum (nvl (d1.NUM, 0)) AS year_NUM,
               decode (sum (nvl (d1.NUM, 0)),
                       0,
                       0,
                       (sum (d1.MONEY)/10000) / sum (nvl (d1.NUM, 0)))
                  AS year_avg_price
          FROM  STATISTICAL_DIMENSION_RETAIL_DATA d1
               LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d2
                  ON d1.TIME_ID = d2.ID
         WHERE 1 = 1 and d1.PRICE_DUAN is not null
         <isNotEmpty prepend=" and " property="map.is_lingshou">d1.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
         <isNotEmpty prepend=" and " property="map.is_fenxiao">d1.DATA_SOURCE=6 </isNotEmpty>
         <isNotEmpty prepend=" and " property="map.year">d2.YEAR = #map.year:VARCHAR#</isNotEmpty>
         <isNotEmpty prepend=" and " property="map.dept_id">d1.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
        GROUP BY d1.PRICE_DUAN) t1
       LEFT JOIN (
               SELECT d1.PRICE_DUAN AS yesterday_PRICE_DUAN,
               (sum (D1.MONEY)/10000) AS yesterday_MONEY,
               sum (nvl (d1.NUM, 0)) AS yesterday_NUM,
               decode (sum (nvl (d1.NUM, 0)),
                       0,
                       0,
                       (sum (d1.MONEY)/10000) / sum (nvl (d1.NUM, 0)))
                  AS yesterday_avg_price
          FROM  STATISTICAL_DIMENSION_RETAIL_DATA d1
          LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d2
                  ON d1.TIME_ID = d2.ID
         WHERE 1 = 1 and d1.PRICE_DUAN is not null
                <isNotEmpty prepend=" and " property="map.is_lingshou">d1.DATA_SOURCE in(1,2,3,4) </isNotEmpty>
                <isNotEmpty prepend=" and " property="map.is_fenxiao">d1.DATA_SOURCE=6 </isNotEmpty>
                <![CDATA[ AND d2.DAY >=trunc(sysdate)-1 ]]>
                <isNotEmpty prepend=" and " property="map.dept_id">d1.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
        GROUP BY d1.PRICE_DUAN) t2
          ON t1.year_PRICE_DUAN = t2.yesterday_PRICE_DUAN
       LEFT JOIN (                                               
                  SELECT d1.PRICE_DUAN AS cur_month_PRICE_DUAN,
                         (sum (D1.MONEY)/10000) AS cur_month_MONEY,
                         sum (nvl (d1.NUM, 0)) AS cur_month_NUM,
                         decode (sum (nvl (d1.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d1.MONEY)/10000) / sum (nvl (d1.NUM, 0)))
                            AS cur_month_avg_price
                    FROM
                            STATISTICAL_DIMENSION_RETAIL_DATA d1
                            LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d2
                            ON d1.TIME_ID = d2.ID
                   WHERE 1 = 1 and d1.PRICE_DUAN is not null
                   <isNotEmpty prepend=" and " property="map.cur_year">d2.YEAR = #map.cur_year:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.cur_month">d2.MONTH = #map.cur_month:VARCHAR#</isNotEmpty>
                  <isNotEmpty prepend=" and " property="map.dept_id">d1.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.PRICE_DUAN) t3
          ON t1.year_PRICE_DUAN = t3.cur_month_PRICE_DUAN
       LEFT JOIN (                                              
                  SELECT d1.PRICE_DUAN AS up_month_PRICE_DUAN,
                         (sum (D1.MONEY)/10000) AS up_month_MONEY,
                         sum (nvl (d1.NUM, 0)) AS up_month_NUM,
                         decode (sum (nvl (d1.NUM, 0)),
                                 0,
                                 0,
                                 (sum (d1.MONEY)/10000) / sum (nvl (d1.NUM, 0)))
                            AS up_month_avg_price
                    FROM  STATISTICAL_DIMENSION_RETAIL_DATA d1
                    LEFT JOIN STATISTICAL_DIMENSION_TIME_DAY d2
                            ON d1.TIME_ID = d2.ID
                   WHERE 1 = 1 and d1.PRICE_DUAN is not null
                   <isNotEmpty prepend=" and " property="map.up_year">d2.YEAR = #map.up_year:VARCHAR#</isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.up_month">d2.MONTH = #map.up_month:VARCHAR#</isNotEmpty>
                   <isNotEmpty prepend=" and " property="map.dept_id">d1.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                  GROUP BY d1.PRICE_DUAN) t4
          ON t1.year_PRICE_DUAN = t4.up_month_PRICE_DUAN
	</select>

	<insert id="insertStatisticalDimensionMd" parameterClass="statisticalDimensionMd">
		<selectKey resultClass="long" keyProperty="id">select SEQ_STATISTICAL_DIMENSION_MD.nextval as id from dual </selectKey>
		<![CDATA[insert into STATISTICAL_DIMENSION_MD (]]>
		<dynamic prepend=" ">
			<isNotNull prepend="," property="id">ID</isNotNull>	
			<isNotNull prepend="," property="md_id">MD_ID</isNotNull>	
			<isNotNull prepend="," property="md_name">MD_NAME</isNotNull>	
			<isNotNull prepend="," property="md_series">MD_SERIES</isNotNull>	
			<isNotNull prepend="," property="par_brand_id">PAR_BRAND_ID</isNotNull>	
			<isNotNull prepend="," property="par_brand_name">PAR_BRAND_NAME</isNotNull>	
			<isNotNull prepend="," property="brand_id">BRAND_ID</isNotNull>	
			<isNotNull prepend="," property="brand_name">BRAND_NAME</isNotNull>	
			<isNotNull prepend="," property="md_size">MD_SIZE</isNotNull>	
			<isNotNull prepend="," property="size_sec">SIZE_SEC</isNotNull>	
			<isNotNull prepend="," property="is_konka">IS_KONKA</isNotNull>	
			<isNotNull prepend="," property="label_int">LABEL_INT</isNotNull>	
			<isNotNull prepend="," property="is_4k">IS_4K</isNotNull>	
			<isNotNull prepend="," property="is_db">IS_DB</isNotNull>	
			<isNotNull prepend="," property="is_ytv">IS_YTV</isNotNull>	
			<isNotNull prepend="," property="is_del">IS_DEL</isNotNull>	
		</dynamic>
		<![CDATA[) values (]]>
		<dynamic prepend=" ">
			<isNotNull prepend="," property="id">#id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="md_id">#md_id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="md_name">#md_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="md_series">#md_series:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="par_brand_id">#par_brand_id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="par_brand_name">#par_brand_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="brand_id">#brand_id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="brand_name">#brand_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="md_size">#md_size:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="size_sec">#size_sec:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_konka">#is_konka:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="label_int">#label_int:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_4k">#is_4k:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_db">#is_db:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_ytv">#is_ytv:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_del">#is_del:DECIMAL#</isNotNull>
		</dynamic>
		<![CDATA[)]]>
	</insert>

	<update id="updateStatisticalDimensionMd" parameterClass="StatisticalDimensionMd">
		update STATISTICAL_DIMENSION_MD
		<dynamic prepend="set">
			<isNotNull prepend="," property="id">ID = #id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="md_id">MD_ID = #md_id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="md_name">MD_NAME = #md_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="md_series">MD_SERIES = #md_series:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="par_brand_id">PAR_BRAND_ID = #par_brand_id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="par_brand_name">PAR_BRAND_NAME = #par_brand_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="brand_id">BRAND_ID = #brand_id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="brand_name">BRAND_NAME = #brand_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="md_size">MD_SIZE = #md_size:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="size_sec">SIZE_SEC = #size_sec:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_konka">IS_KONKA = #is_konka:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="label_int">LABEL_INT = #label_int:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_4k">IS_4K = #is_4k:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_db">IS_DB = #is_db:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_ytv">IS_YTV = #is_ytv:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_del">IS_DEL = #is_del:DECIMAL#</isNotNull>
		</dynamic>
		where
		<isNotEmpty prepend=" " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</update>

	<delete id="deleteStatisticalDimensionMd" parameterClass="StatisticalDimensionMd">
		delete from STATISTICAL_DIMENSION_MD where
		<isNotEmpty prepend=" " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</delete>
	
	<delete id="deleteStatisticalDimensionMdAll" parameterClass="StatisticalDimensionMd">
		delete from STATISTICAL_DIMENSION_MD where 1=1
		<isNotEmpty prepend=" and " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" and " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</delete>

</sqlMap>