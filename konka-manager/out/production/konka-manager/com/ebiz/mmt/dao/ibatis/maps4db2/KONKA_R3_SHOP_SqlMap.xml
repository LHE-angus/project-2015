<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="KONKA_R3_SHOP">
	
	<typeAlias alias="konkaR3Shop" type="com.ebiz.mmt.domain.KonkaR3Shop" />

	<resultMap id="konkaR3ShopResult" class="konkaR3Shop">
		<result column="ID" property="id" jdbcType="DECIMAL" />
		<result column="AREA_CODE" property="area_code" jdbcType="DECIMAL" />
		<result column="AREA_NAME" property="area_name" jdbcType="VARCHAR" />
		<result column="BRANCH_AREA_CODE" property="branch_area_code" jdbcType="DECIMAL" />
		<result column="BRANCH_AREA_NAME" property="branch_area_name" jdbcType="VARCHAR" />
		<result column="CUSTOMER_TYPE" property="customer_type" jdbcType="VARCHAR" />
		<result column="STATUS" property="status" jdbcType="DECIMAL" />
		<result column="R3_CODE" property="r3_code" jdbcType="VARCHAR" />
		<result column="HANDLE_NAME" property="handle_name" jdbcType="VARCHAR" />
		<result column="BRANCH_AREA_CODE_2" property="branch_area_code_2" jdbcType="DECIMAL" />
		<result column="BRANCH_AREA_NAME_2" property="branch_area_name_2" jdbcType="VARCHAR" />
		<result column="CUSTOMER_CODE" property="customer_code" jdbcType="VARCHAR" />
		<result column="CUSTOMER_NAME" property="customer_name" jdbcType="VARCHAR" />
		<result column="R3_DESC" property="r3_desc" jdbcType="VARCHAR" />
		<result column="MERGE_CODE_2010" property="merge_code_2010" jdbcType="VARCHAR" />
		<result column="IMPORT_DATE" property="import_date" jdbcType="DATE" />
		<result column="IMPORT_USER_ID" property="import_user_id" jdbcType="DECIMAL" />
		<result column="IS_DEL" property="is_del" jdbcType="DECIMAL" />
		<result column="IS_MATCH" property="is_match" jdbcType="DECIMAL" />
		<result column="B_LNG" property="b_lng" jdbcType="VARCHAR" />
		<result column="B_LAT" property="b_lat" jdbcType="VARCHAR" />
		<result column="ADD_DATE" property="add_date" jdbcType="DATE" />
		<result column="R3_SALES_ORG_CODE" property="r3_sales_org_code" jdbcType="VARCHAR" />
		
		<result column="LINK_MAN_NAME" property="link_man_name" jdbcType="VARCHAR" />
		<result column="LINK_MAN_TEL" property="link_man_tel" jdbcType="VARCHAR" />
		<result column="LINK_MAN_MOBILE" property="link_man_mobile" jdbcType="VARCHAR" />
		<result column="LINK_MAN_ADDR" property="link_man_addr" jdbcType="VARCHAR" />
		<result column="LINK_MAN_POST" property="link_man_post" jdbcType="VARCHAR" />
		<result column="HOST_NAME" property="host_name" jdbcType="VARCHAR" />
		<result column="HOST_TEL" property="host_tel" jdbcType="VARCHAR" />

		<result column="ADD_DATE" property="add_date" jdbcType="TIMESTAMP" />
		<result column="R3_SALES_ORG_CODE" property="r3_sales_org_code" jdbcType="VARCHAR" />
		<result column="CREATE_DATE" property="create_date" jdbcType="TIMESTAMP" />
		<result column="LAST_YEAR_MONEY" property="last_year_money" jdbcType="DECIMAL" />
		<result column="LAST_YEAR_BACK_MONEY" property="last_year_back_money" jdbcType="DECIMAL" />
		<result column="ENTP_REG_MONEY" property="entp_reg_money" jdbcType="DECIMAL" />
		<result column="ENTP_SCALE" property="entp_scale" jdbcType="VARCHAR" />
		<result column="ENTP_MAN_COUNT" property="entp_man_count" jdbcType="VARCHAR" />
		<result column="ENTP_TEL" property="entp_tel" jdbcType="VARCHAR" />
		<result column="ENTP_BIRTHDAY" property="entp_birthday" jdbcType="TIMESTAMP" />
		<result column="ENTP_FAX" property="entp_fax" jdbcType="VARCHAR" />
		<result column="ENTP_POST" property="entp_post" jdbcType="VARCHAR" />
		<result column="ENTP_P_LEVEL" property="entp_p_level" jdbcType="VARCHAR" />
		<result column="ENTP_ADDR" property="entp_addr" jdbcType="VARCHAR" />
		<result column="ENTP_WWW" property="entp_www" jdbcType="VARCHAR" />
		<result column="ENTP_MAIN_PDS" property="entp_main_pds" jdbcType="VARCHAR" />
		<result column="ENTP_SALE_AREA" property="entp_sale_area" jdbcType="VARCHAR" />
		<result column="ENTP_INRO" property="entp_inro" jdbcType="VARCHAR" />
		<result column="ENTP_TYPE" property="entp_type" jdbcType="BIGINT" />
		<result column="ENTP_P_INDEX" property="entp_p_index" jdbcType="BIGINT" />
		<result column="IS_KONKA" property="is_konka" jdbcType="DECIMAL" />
		<result column="IS_SDF" property="is_sdf" jdbcType="DECIMAL" />
		<result column="IS_LOEVM" property="is_loevm" jdbcType="DECIMAL" />
		<result column="IS_CASSD" property="is_cassd" jdbcType="DECIMAL" />
		<result column="IS_MINUS_SALES" property="is_minus_sales" jdbcType="DECIMAL" />
		<result column="WEB_TYPE" property="web_type" jdbcType="DECIMAL" />
		<result column="IS_INVENTORY" property="is_inventory" jdbcType="DECIMAL" />
		<result column="SHOP_STATUS" property="shop_status" jdbcType="VARCHAR" />
		<result column="BRANCH_NAME" property="branch_name" jdbcType="VARCHAR" />
		<result column="STOP_DATE" property="stop_date" jdbcType="TIMESTAMP" />
		<result column="ADD_NAME" property="add_name" jdbcType="VARCHAR" />
		<result column="MODIFY_USER_ID" property="modify_user_id" jdbcType="DECIMAL" />
	</resultMap>
	
	<resultMap id="konkaR3ShopHandleNameResult" class="konkaR3Shop">
		<result column="ID" property="id" jdbcType="DECIMAL" />
		<result column="HANDLE_NAME" property="handle_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="konkaR3ShopHandleNameResult2" class="konkaR3Shop">
		<result column="HANDLE_NAME" property="handle_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="konkaR3ShopCustomerNameResult" class="konkaR3Shop">
		<result column="R3_CODE" property="r3_code" jdbcType="VARCHAR" />
		<result column="CUSTOMER_NAME" property="customer_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="konkaR3ShopBranchAreaNameResult" class="konkaR3Shop">
		<result column="BRANCH_AREA_NAME" property="branch_area_name" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap id="konkaR3ShopResultForUserR3Code" class="konkaR3Shop">
		<result column="R3_CODE" property="map.r3_code" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap id="konkaR3ShopResultForList" class="konkaR3Shop" extends="konkaR3ShopResult">
	    <result column="IMPORT_USER_NAME" property="map.import_user_name" jdbcType="VARCHAR" />
	    <result column="MMT_SHOP_ID" property="map.mmt_shop_id" jdbcType="VARCHAR" />
	    <result column="MMT_SHOP_NAME" property="map.mmt_shop_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="konkaR3ShopResultWithJzAndPdForList" class="konkaR3Shop" extends="konkaR3ShopResult">
	    <result column="IS_JZ" property="map.is_jz" jdbcType="DECIMAL" />
	    <result column="IS_PD" property="map.is_pd" jdbcType="DECIMAL" />
	    <result column="PAR_CUSTOMER_TYPE_NAME" property="map.par_cust_type_name" jdbcType="VARCHAR" />
		<result column="CUSTOMER_TYPE_NAME" property="map.cust_type_name" jdbcType="VARCHAR" />
		<result column="EXT_HANDLE_NAME" property="map.ext_handle_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="konkaR3ShopResultForMMTShopList" class="konkaR3Shop" extends="konkaR3ShopResult">
	    <result column="IMPORT_USER_NAME" property="map.import_user_name" jdbcType="VARCHAR" />
	    <result column="MMT_SHOP_ID" property="map.mmt_shop_id" jdbcType="VARCHAR" />
	    <result column="MMT_SHOP_NAME" property="map.mmt_shop_name" jdbcType="VARCHAR" />
	    
	    <result column="SHOP_ID" property="map.shop_id" jdbcType="DECIMAL" />
		<result column="SHOP_NAME" property="map.shop_name" jdbcType="VARCHAR" />
		<result column="P_INDEX" property="map.p_index" jdbcType="DECIMAL" />
		<result column="IS_RURAL" property="map.is_rural" jdbcType="DECIMAL" />
		<result column="IS_AUTH" property="map.is_auth" jdbcType="DECIMAL" />
		<result column="MAIN_PD" property="map.main_pd" jdbcType="VARCHAR" />
		<result column="LINK_USER" property="map.link_user" jdbcType="VARCHAR" />
		<result column="LINK_PHONE" property="map.link_phone" jdbcType="VARCHAR" />
		<result column="STREET_ADDR" property="map.street_addr" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="konkaR3ShopResultForStaticGroupByFGS" class="konkaR3Shop">
	    <result column="DEPT_ID" property="map.dept_id" jdbcType="DECIMAL" />
	    <result column="DEPT_SN" property="map.dept_sn" jdbcType="VARCHAR" />
	    <result column="DEPT_NAME" property="map.dept_name" jdbcType="VARCHAR" />
	    <result column="TOTAL_COUNT" property="map.total_count" jdbcType="DECIMAL" />
	    <result column="UNASSIGN_COUNT" property="map.unassign_count" jdbcType="DECIMAL" />
	</resultMap>
	
	<resultMap id="konkaR3ShopResultForMMTShopYwyList" class="konkaR3Shop" extends="konkaR3ShopResult">
	    <result column="IMPORT_USER_NAME" property="map.import_user_name" jdbcType="VARCHAR" />
	    <result column="MMT_SHOP_ID" property="map.mmt_shop_id" jdbcType="VARCHAR" />
	    <result column="MMT_SHOP_NAME" property="map.mmt_shop_name" jdbcType="VARCHAR" />
	    
	    <result column="SHOP_ID" property="map.shop_id" jdbcType="DECIMAL" />
		<result column="SHOP_NAME" property="map.shop_name" jdbcType="VARCHAR" />
		<result column="P_INDEX" property="map.p_index" jdbcType="DECIMAL" />
		<result column="IS_RURAL" property="map.is_rural" jdbcType="DECIMAL" />
		<result column="IS_AUTH" property="map.is_auth" jdbcType="DECIMAL" />
		<result column="MAIN_PD" property="map.main_pd" jdbcType="VARCHAR" />
		<result column="LINK_USER" property="map.link_user" jdbcType="VARCHAR" />
		<result column="LINK_PHONE" property="map.link_phone" jdbcType="VARCHAR" />
		<result column="STREET_ADDR" property="map.street_addr" jdbcType="VARCHAR" />
		
		 <result column="USER_NAME" property="map.user_name" jdbcType="VARCHAR" />
		 <result column="C_NAME" property="map.c_name" jdbcType="VARCHAR" />
		 <result column="C_COMM" property="map.c_comm" jdbcType="VARCHAR" />
		 <result column="ACCOUNT_LIST" property="map.account_list" jdbcType="VARCHAR" />
		 <result column="RS_STATUS" property="map.rs_status" jdbcType="VARCHAR" />
		 <result column="OPER_REASON" property="map.oper_reason" jdbcType="VARCHAR" />
		 <result column="AUDIT_ID" property="map.audit_id" jdbcType="DECIMAL" />
	</resultMap>
	
	<!-- @author Jiang,JiaYong @version 2013-08-29 -->
	<!-- @author lideyu @version 2014-03-20 -->
	<resultMap id="konkaR3ShopForStockResult" class="konkaR3Shop">
		<result column="PD_NAME" property="map.pd_name" jdbcType="VARCHAR" />
		<result column="GOODS_ID" property="map.goods_id" jdbcType="DECIMAL" />
		<result column="INITCOUNT" property="map.initcount" jdbcType="DECIMAL" />
		<result column="TS" property="map.ts" jdbcType="DATETIME" />
		<result column="INCOUNT" property="map.incount" jdbcType="DECIMAL" />
		<result column="INMONEY" property="map.inmoney" jdbcType="DECIMAL" />
		<result column="OUTCOUNT" property="map.outcount" jdbcType="DECIMAL" />
		<result column="OUTMONEY" property="map.outmoney" jdbcType="DECIMAL" />
	</resultMap>
	
	<resultMap id="konkaR3ShopSimpleStat" class="konkaR3Shop">
		<result column="ID" property="id" jdbcType="DECIMAL" />
		<result column="R3_CODE" property="r3_code" jdbcType="VARCHAR" />
		<result column="LASTYEAR_CLS_MONEY" property="map.lastyear_cls_money" jdbcType="DECIMAL" />
		<result column="CUR_CLS_MONEY" property="map.cur_cls_money" jdbcType="DECIMAL" />
		<result column="LASTYEAR_BACK_MONEY" property="map.lastyear_back_money" jdbcType="DECIMAL" />
		<result column="CUR_BACK_MONEY" property="map.cur_back_money" jdbcType="DECIMAL" />
		<result column="CREDIT_BALANCE" property="map.credit_balance" jdbcType="DECIMAL" />
		<result column="CREDIT_TIME" property="map.credit_time" jdbcType="DATETIME" />
	</resultMap>
	
	<resultMap id="konkaR3ShopResultCountByPIndex" class="konkaR3Shop">
	    <result column="P_INDEX" property="map.p_index" jdbcType="DECIMAL" />
	    <result column="P_NAME" property="map.p_name" jdbcType="VARCHAR" />
	    <result column="NUM" property="map.num" jdbcType="DECIMAL" />
	</resultMap>
	
	<resultMap id="konkaR3ShopResultListByPIndex" class="konkaR3Shop">
	    <result column="R3_CODE" property="map.r3_code" jdbcType="VARCHAR" />
	    <result column="CUSTOMER_NAME" property="map.customer_name" jdbcType="VARCHAR" />
	    <result column="SALE_MONEY" property="map.sale_money" jdbcType="DECIMAL" />
	    <result column="R3_MONEY" property="map.r3_money" jdbcType="DECIMAL" />
	</resultMap>
	
	<!-- @author Zhang,Chao @version 2014-01-25 订货会管理 参会客户自动提出 -->
	<resultMap id="konkaR3ShopResultListByViewCustomer" class="konkaR3Shop" extends="konkaR3ShopResult">
	    <result column="R3_CODE" property="map.r3_code" jdbcType="VARCHAR" />
	    <result column="JOB_ID" property="map.job_id" jdbcType="VARCHAR" />
	    <result column="L4_DEPT_ID" property="map.l4_dept_id" jdbcType="DECIMAL" />
	    <result column="L4_DEPT_NAME" property="map.l4_dept_name" jdbcType="VARCHAR" />
	    <result column="USER_ID" property="map.user_id" jdbcType="DECIMAL" />
	    <result column="YWY_USER_NAME" property="map.ywy_user_name" jdbcType="VARCHAR" />
	    <result column="CUSTOMER_NAME" property="map.customer_name" jdbcType="VARCHAR" />
	    <result column="CUSTOMER_TYPE" property="map.customer_type" jdbcType="DECIMAL" />
	    <result column="CUSTOMER_TYPE_NAME" property="map.customer_type_name" jdbcType="VARCHAR" />
	    <result column="PAR_CUSTOMER_TYPE" property="map.par_customer_type" jdbcType="DECIMAL" />
	    <result column="PAR_CUSTOMER_TYPE_NAME" property="map.par_customer_type_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- @author Pan,Gang @version 2014-02-24 根据R3_code取R3客户，业务员id，业务员所属经办 -->
	<resultMap id="konkaR3ShopResultListByYwyAndJb" class="konkaR3Shop" extends="konkaR3ShopResult">
	    <result column="IMPORT_USER_NAME" property="map.import_user_name" jdbcType="VARCHAR" />
	    <result column="YWY_DEPT_ID" property="map.ywy_dept_id" jdbcType="VARCHAR" />
	    <result column="YWY_USER_NAME" property="map.ywy_user_name" jdbcType="VARCHAR" />
	    <result column="YWY_ID" property="map.ywy_id" jdbcType="VARCHAR" />
	    <result column="YWY_DEPT_NAME" property="map.ywy_dept_name" jdbcType="VARCHAR" />
	    
	</resultMap>
	
	<sql id="sf-konkaR3Shop">
		<isNotEmpty prepend=" and " property="id">a.ID = #id:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="area_code">a.AREA_CODE = #area_code:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="area_name">a.AREA_NAME = #area_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="branch_area_code">a.BRANCH_AREA_CODE = #branch_area_code:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="branch_area_name">a.BRANCH_AREA_NAME = #branch_area_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="customer_type">a.CUSTOMER_TYPE = #customer_type:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="status">a.STATUS = #status:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="r3_code">a.R3_CODE = #r3_code:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code">a.R3_CODE = #map.r3_code:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code_like">a.R3_CODE like '%'|| #map.r3_code_like:VARCHAR# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="handle_name">a.HANDLE_NAME = #handle_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="branch_area_code_2">a.BRANCH_AREA_CODE_2 = #branch_area_code_2:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="branch_area_name_2">a.BRANCH_AREA_NAME_2 = #branch_area_name_2:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="customer_code">a.CUSTOMER_CODE = #customer_code:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="customer_name">a.CUSTOMER_NAME = #customer_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="r3_desc">a.R3_DESC = #r3_desc:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="merge_code_2010">a.MERGE_CODE_2010 = #merge_code_2010:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="import_date">a.IMPORT_DATE = #import_date:DATE#</isNotEmpty>
		<isNotEmpty prepend=" and " property="import_user_id">a.IMPORT_USER_ID = #import_user_id:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_del">a.IS_DEL = #is_del:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_match">a.IS_MATCH = #is_match:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="b_lng">a.B_LNG = #b_lng:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="b_lat">a.B_LAT = #b_lat:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="link_man_name">A.LINK_MAN_NAME = #link_man_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="link_man_tel">A.LINK_MAN_TEL = #link_man_tel:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="link_man_mobile">a.LINK_MAN_MOBIL = #link_man_mobile:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="link_man_addr">A.LINK_MAN_ADDR = #link_man_addr:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="link_man_post">A.LINK_MAN_POST = #link_man_post:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="host_name">A.HOST_NAME = #host_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="host_tel">A.HOST_TEL = #host_tel:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="add_date">A.ADD_DATE = #add_date:DATE#</isNotEmpty>
		<isNotEmpty prepend=" and " property="r3_sales_org_code">A.R3_SALES_ORG_CODE = #r3_sales_org_code:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="shop_status">A.SHOP_STATUS = #shop_status:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="branch_name">A.BRANCH_NAME = #branch_name:VARCHAR#</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="create_date">CREATE_DATE = #create_date:TIMESTAMP#</isNotEmpty>
		<isNotEmpty prepend=" and " property="last_year_money">LAST_YEAR_MONEY = #last_year_money:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="last_year_back_money">LAST_YEAR_BACK_MONEY = #last_year_back_money:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_reg_money">ENTP_REG_MONEY = #entp_reg_money:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_scale">ENTP_SCALE = #entp_scale:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_man_count">ENTP_MAN_COUNT = #entp_man_count:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_tel">ENTP_TEL = #entp_tel:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_birthday">ENTP_BIRTHDAY = #entp_birthday:TIMESTAMP#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_fax">ENTP_FAX = #entp_fax:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_post">ENTP_POST = #entp_post:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_p_level">ENTP_P_LEVEL = #entp_p_level:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_addr">ENTP_ADDR = #entp_addr:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_www">ENTP_WWW = #entp_www:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_main_pds">ENTP_MAIN_PDS = #entp_main_pds:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_sale_area">ENTP_SALE_AREA = #entp_sale_area:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_inro">ENTP_INRO = #entp_inro:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_type">ENTP_TYPE = #entp_type:BIGINT#</isNotEmpty>
		<isNotEmpty prepend=" and " property="entp_p_index">ENTP_P_INDEX = #entp_p_index:BIGINT#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_konka">IS_KONKA = #is_konka:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_sdf">IS_SDF = #is_sdf:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_cassd">IS_CASSD = #is_cassd:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_loevm">IS_LOEVM = #is_loevm:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_minus_sales">IS_MINUS_SALES = #is_minus_sales:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="is_inventory">IS_INVENTORY = #is_inventory:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="web_type">WEB_TYPE = #web_type:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="stop_date">STOP_DATE = #stop_date:TIMESTAMP#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.branch_name_like">#map.branch_name_like# like '%' || a.BRANCH_AREA_NAME || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.branch_area_name_like">a.BRANCH_AREA_NAME  like '%' || #map.branch_area_name_like# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.handle_name_like">a.HANDLE_NAME  like '%' || #map.handle_name_like:VARCHAR# || '%'</isNotEmpty>
	    <isNotEmpty prepend=" and " property="map.keyword">((a.CUSTOMER_NAME like '%' || #map.keyword:VARCHAR# || '%') or (a.AREA_NAME like '%' || #map.keyword:VARCHAR# || '%') or(a.BRANCH_AREA_NAME  like '%' || #map.keyword# || '%'))</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.code_like">((upper(a.CUSTOMER_CODE) like '%' || upper(#map.code_like:VARCHAR#) || '%') or (upper(a.R3_CODE) like '%' || upper(#map.code_like:VARCHAR#) || '%'))</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.keyword_like">((a.CUSTOMER_NAME like '%' || #map.keyword_like:VARCHAR# || '%') or (a.R3_CODE like '%' || #map.keyword_like:VARCHAR# || '%'))</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.customer_name_like">a.CUSTOMER_NAME like '%' || #map.customer_name_like:VARCHAR# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.selects">a.id in ($map.selects$)</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.r3_not_selects">a.id not in ($map.r3_not_selects$)</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.not_selects">b.mmt_shop_id not in ($map.not_selects$)</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.id_not_selects">a.id not in ($map.id_not_selects$)</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.branch_is_assign_ywy"><![CDATA[a.id in (select konka_r3_id from branch_assign where user_id is not null group by konka_r3_id) ]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.branch_is_not_assign_ywy"><![CDATA[a.id not in (select konka_r3_id from branch_assign where user_id is not null group by konka_r3_id) ]]></isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.add_date_start"><![CDATA[a.ADD_DATE >= to_date(#map.add_date_start#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.add_date_end"><![CDATA[a.ADD_DATE <= to_date(#map.add_date_end#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.viewd_by_user_id_eq">
			id in (
				select t1.konka_r3_id from branch_assign t1 where t1.user_id in (
			      select id from konka_pe_prod_user where dept_id in (
			        select t2.dept_id from konka_dept t2 
			        start with t2.dept_id = (select dept_id from konka_pe_prod_user where id = #map.viewd_by_user_id_eq#)
			        connect by prior t2.dept_id = t2.par_id
			        union 
			        select dept_id from konka_role_data_level where role_id in (
						 select role_id from konka_pe_role_user where user_id = #map.viewd_by_user_id_eq#
			        )
			      )
				)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.cxy_id_eq"><![CDATA[
			id in (select shop_id from KONKA_MOBILE_SP_RELATION where SELLER_ID = #map.cxy_id_eq:DECIMAL#)
		]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.sell_ids"> a.r3_code in ($map.sell_ids$) </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.sell_not_ids"> a.r3_code not in ($map.sell_not_ids$) </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.sell_type_0">a.s_id =0 </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.sell_type_1"><![CDATA[a.s_id <> 0 ]]></isNotEmpty>
		
		
		<isNotEmpty prepend=" and " property="map.stock_is_report"><![CDATA[a.r3_code in (select r3_code from konka_stock_details group by r3_code) ]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.stock_is_not_report"><![CDATA[a.r3_code not in (select r3_code from konka_stock_details group by r3_code) ]]></isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.konka_dept_id">a.id in (select konka_r3_id from BRANCH_ASSIGN t where syb_id=#map.konka_dept_id# or fgs_id=#map.konka_dept_id# or jyb_id=#map.konka_dept_id# or bsc_id=#map.konka_dept_id#)</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.ywy_user_id">a.id in (select konka_r3_id from BRANCH_ASSIGN t where user_id=#map.ywy_user_id#)</isNotEmpty>
		<!-- dept_id user_id 这两个参数要连起来一起用,单用一个会出错 -->
		<isNotEmpty prepend=" and " property="map.dept_id">a.id in (select konka_r3_id from BRANCH_ASSIGN t where syb_id=#map.dept_id# or fgs_id=#map.dept_id# or jyb_id=#map.dept_id# or bsc_id=#map.dept_id# or user_id=#map.user_id#)</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code_like">a.r3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'</isNotEmpty>
    	<isNotEmpty prepend=" and " property="map.customer_code_like">a.CUSTOMER_CODE like '%' ||  #map.customer_code_like:VARCHAR# || '%'</isNotEmpty>
    	
    	
    	<isNotEmpty prepend=" and " property="map.r3_code_and_customer_code_is_not_eq">
    		a.r3_code != a.customer_code
		</isNotEmpty>
		
		<!-- 下面的条件不维护了,如果有使用的还在下面放着,请大家在使用的时候如果发现了,就搬到上面来然后把下面的删除掉,谢谢 -->
		<isNotEmpty prepend=" and " property="map.area_name_like">a.AREA_NAME like '%' || #map.area_name_like:VARCHAR# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.area_like"> #map.area_like:VARCHAR# like '%' || a.AREA_NAME|| '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.merge_code_like">a.MERGE_CODE_2010 like '%' || #map.merge_code_like:VARCHAR# || '%'</isNotEmpty>
	    <isNotEmpty prepend=" and " property="map.not_null_mmt_shop_id">b.mmt_shop_id is not null</isNotEmpty>
	    <isNotEmpty prepend=" and " property="map.mmt_shop_name">b.mmt_shop_name like '%' || #map.mmt_shop_name:VARCHAR# || '%'</isNotEmpty>
	    <isNotEmpty prepend=" and " property="map.is_agents"> a.id in (select konka_r3_id from KONKA_BRANCH_CATEGORY where category_id = 10)</isNotEmpty>
        <isNotEmpty prepend=" and " property="map.mmt_shop_id"> b.mmt_shop_id = #map.mmt_shop_id#</isNotEmpty>

		
		<isNotEmpty prepend=" and " property="map.mmt_shop_id_selects">
			b.mmt_shop_id in ($map.mmt_shop_id_selects$)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.p_name_String">
		    a.branch_area_name in ($map.p_name_String$) 
         </isNotEmpty>
		
		
		<isNotEmpty prepend=" and " property="map.branch_is_assign"><![CDATA[a.id in (select konka_r3_id from konka_branch_assign  group by konka_r3_id) ]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.branch_is_not_assign"><![CDATA[a.id not in (select konka_r3_id from konka_branch_assign  group by konka_r3_id) ]]></isNotEmpty>
	
	    <!-- 业务员拜访记录.Chengbing 2011.12.14  START-->
	    <isNotEmpty prepend=" and " property="map.ywy_not_null">
		    a.id in (select ba.konka_r3_id from BRANCH_ASSIGN ba where ba.user_id is not null
		    <isNotEmpty prepend=" and " property="map.ywy_name_like">
		      ba.user_id in(select c.id from konka_pe_prod_user c
	          where c.real_name like '%' || #map.ywy_name_like# || '%')
		    </isNotEmpty>)
        </isNotEmpty>
        <isNotEmpty prepend=" and " property="map.ywy_id">
		      a.id in (select ba.konka_r3_id from BRANCH_ASSIGN ba where ba.user_id =#map.ywy_id#)
		</isNotEmpty>
	    <isNotEmpty prepend=" and " property="map.visit_status_0">
		   <![CDATA[ (select count(v.id) from KONKA_SHOP_VISIT v where v.SHOP_ID = a.id) = 0]]>
        </isNotEmpty>
        <isNotEmpty prepend=" and " property="map.visit_status_1">
		    <![CDATA[ (SELECT MAX(vi.VISIT_COUNT) FROM KONKA_SHOP_VISIT vi WHERE vi.SHOP_ID = a.id and vi.VISIT_STATUS=#map.visit_status_1# GROUP BY vi.shop_id) > 0]]> 
        </isNotEmpty>
        <isNotEmpty prepend=" and " property="map.visit_status_2">
		    <![CDATA[ (SELECT MAX(vi.VISIT_COUNT) FROM KONKA_SHOP_VISIT vi WHERE vi.SHOP_ID = a.id and vi.VISIT_STATUS=#map.visit_status_2# GROUP BY vi.shop_id) > 0]]>    
        </isNotEmpty>
        <!-- 业务员拜访记录.Chengbing 2011.12.14  END-->
        
        <isNotEmpty prepend=" and " property="map.now_id">a.id != #map.now_id#</isNotEmpty>
        <isNotEmpty prepend=" and " property="map.only_fgs_customer"> (a.R3_SALES_ORG_CODE !='K001' or a.R3_SALES_ORG_CODE is null) </isNotEmpty>
        <isNotEmpty prepend=" and " property="map.not_in_headerId">a.id not in (select distinct CUSTOMERID from CRM_CUSTOMER_GROUP_DETAILS where HEADID = #map.not_in_headerId# )</isNotEmpty>
        <isNotEmpty prepend=" and " property="map.unAssignYWY">t1.user_id is null</isNotEmpty>
        <isNotEmpty prepend=" and " property="map.konka_kh">BRANCH_AREA_NAME_2 not in ('KFDFD001','KF001','KFSF001')</isNotEmpty>
	</sql>
	
	<sql id="sf-konkaR3ShopByAddDate1">
		select a.*, b.s_id
          from KONKA_R3_SHOP a
			left join $map.tablename$ b on a.r3_code = b.cus_sn
         where 1 = 1
           and b.s_id in (select s_id
                            from (select cus_sn, max(s_id) as s_id
                                    from (select cus_sn,s_id 
                                    	from $map.tablename$ 
                                    	where 1=1 
                                    	and is_del = 0
                                    	   <isNotEmpty prepend=" and " property="map.add_date_start"><![CDATA[ADD_DATE >= to_date(#map.add_date_start#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
										   <isNotEmpty prepend=" and " property="map.add_date_end"><![CDATA[ADD_DATE <= to_date(#map.add_date_end#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
                                     <isNotEmpty prepend=" and " property="map.s_state">state = #map.s_state#</isNotEmpty>
                                    	) c
                                   where 1 = 1
                                   group by cus_sn))
		<isEmpty prepend=" " property="map.is_serach_sbsj">
          union
        select d.*, 0 as s_id
          from KONKA_R3_SHOP d
         where d.id not in
               (select a.id
                  from KONKA_R3_SHOP a
					left join $map.tablename$ b on a.r3_code = b.cus_sn
                 where 1 = 1
                   and b.s_id in (select s_id
                                    from (select cus_sn, max(s_id) as s_id
                                            from (select cus_sn,s_id 
		                                    	from $map.tablename$ 
		                                    	where 1=1 
		                                    	and is_del = 0
	                                    	   <isNotEmpty prepend=" and " property="map.add_date_start"><![CDATA[ADD_DATE >= to_date(#map.add_date_start#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
											   <isNotEmpty prepend=" and " property="map.add_date_end"><![CDATA[ADD_DATE <= to_date(#map.add_date_end#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
                                             <isNotEmpty prepend=" and " property="map.s_state">state = #map.s_state#</isNotEmpty>
                                    			) c
                                           where 1 = 1
                                           group by cus_sn))
                                           )
           and d.is_del = 0
         </isEmpty>
	</sql>
	
	
	<select id="selectKonkaR3ShopForResult" resultMap="konkaR3ShopResultForList" parameterClass="konkaR3Shop" >
	select a.*,
	       (select real_name
	          from konka_pe_prod_user c
	         where c.id = a.import_user_id) as import_user_name 
	  <isEmpty property="map.is_assign">,0 as mmt_shop_id, 0 as mmt_shop_name</isEmpty>
	  from KONKA_R3_SHOP a
	 where 1 = 1
		<include refid="sf-konkaR3Shop" />
	</select>
	<!-- @author Jiang,JiaYong @version 2013-08-29 -->
	<!-- @author lideyu @version 2014-03-20 增加goods_id-->
	<select id="selectKonkaR3ShopStockByR3CodeList" resultMap="konkaR3ShopForStockResult" parameterClass="konkaR3Shop" >
	select distinct * from (
		select nvl(tin.pd_name, tout.pd_name) pd_name,
		  tin.goods_id goods_id,
		  nvl(tin.initcount, 0) initcount,
		  tin.TS,
		  nvl(tin.incount, 0) incount,
		  nvl(tin.inmoney, 0) inmoney,
		  nvl(tout.outcount, 0) outcount,
		  nvl(tout.outmoney, 0) outmoney
		from (
		  select pd_name,goods_id, initcount, ts, sum(incount) incount, sum(inmoney) inmoney from (
		    select s1.GOODS_NAME pd_name,s1.GOODS_ID goods_id,s.VER_STOCKS initcount, s.OPR_DATE ts, s2.COLUMN_12 incount, s2.COLUMN_14 inmoney from (
		    select * from (
		      select rank() over(partition by t.GOODS_ID order by t.ID desc) rn, t.* from J_STOCKS_VERIFY t
		      where t.C_ID in ( select r3.id from konka_r3_shop r3 where r3.R3_CODE = #r3_code:VARCHAR#)
			    <isNotEmpty prepend=" and " property="map.j_base_store_id">
			    	 t.STORE_ID = #map.j_base_store_id#
			    </isNotEmpty>
		        <isEmpty prepend=" " property="map.j_base_store_id">
					<isNotEmpty prepend=" and " property="map.r3_code">
						t.STORE_ID in(select sr3.store_id from J_BASE_STORE_R3 sr3 where sr3.R3_CODE=#map.r3_code:VARCHAR# and sr3.IS_DEL=0 )
                	</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.sale_r3_code">
						t.STORE_ID in(select sr3.store_id from J_BASE_STORE_R3 sr3 where sr3.SALE_R3_CODE=#map.sale_r3_code:VARCHAR# and sr3.IS_DEL=0 )
                	</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.store_id">
						t.STORE_ID in(select sr3.store_id from J_BASE_STORE_R3 sr3 where sr3.STORE_ID=#map.store_id:DECIMAL# and sr3.IS_DEL=0 )
                	</isNotEmpty>
                </isEmpty>
		      )
		      where rn = 1
		    ) s
		    left join J_BASE_GOODS s1 on s1.GOODS_ID=s.GOODS_ID
		    <isNotEmpty prepend=" and " property="map.j_base_goods_name">s1.GOODS_NAME = #map.j_base_goods_name#</isNotEmpty>
		    <isNotEmpty prepend=" and " property="map.goods_id">s1.goods_id = #map.goods_id:DECIMAL#</isNotEmpty>
		    left join channel_data_import s2 on s2.COLUMN_7 > s.OPR_DATE and s2.COLUMN_11 = s1.GOODS_NAME and s2.COLUMN_1 = #r3_code:VARCHAR#
<!-- 		    where s1.IS_KONKA = 1 and s1.goods_stutes = 0 -->
		    where s1.goods_stutes = 0
		  )
		  group by pd_name,goods_id,initcount, ts
		) tin
		left join(
		  select pd_name,goods_id, initcount, ts, sum(outcount) outcount, sum(outmoney) outmoney from (
			  select s1.GOODS_NAME pd_name,s1.goods_id goods_id,s.VER_STOCKS initcount, s.OPR_DATE ts, s2.num outcount, s2.ALL_PRICE outmoney from (
			  select * from (
			    select rank() over(partition by t.GOODS_ID order by t.ID desc) rn, t.* from J_STOCKS_VERIFY t
			    where t.C_ID in ( select r3.id from konka_r3_shop r3 where r3.R3_CODE = #r3_code:VARCHAR#)
			    <isNotEmpty prepend=" and " property="map.j_base_store_id">
			    	 t.STORE_ID = #map.j_base_store_id#
			    </isNotEmpty>
		        <isEmpty prepend=" " property="map.j_base_store_id">
					<isNotEmpty prepend=" and " property="map.r3_code">
						t.STORE_ID in(select sr3.store_id from J_BASE_STORE_R3 sr3 where sr3.R3_CODE=#map.r3_code:VARCHAR# and sr3.IS_DEL=0 )
                	</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.sale_r3_code">
						t.STORE_ID in(select sr3.store_id from J_BASE_STORE_R3 sr3 where sr3.SALE_R3_CODE=#map.sale_r3_code:VARCHAR# and sr3.IS_DEL=0 )
                	</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.store_id">
						t.STORE_ID in(select sr3.store_id from J_BASE_STORE_R3 sr3 where sr3.STORE_ID=#map.store_id:DECIMAL# and sr3.IS_DEL=0 )
                	</isNotEmpty>
                </isEmpty>
			    )
			    where rn = 1
			  ) s
			  left join J_BASE_GOODS s1 on s1.GOODS_ID=s.GOODS_ID
			  <isNotEmpty prepend=" and " property="map.j_base_goods_name">s1.GOODS_NAME = #map.j_base_goods_name#</isNotEmpty>
		    <isNotEmpty prepend=" and " property="map.goods_id">s1.goods_id = #map.goods_id:DECIMAL#</isNotEmpty>
			  left join (
			  select t1.REPORT_DATE, t1.MODEL_NAME, t1.is_del, t1.CUSTOMER_R3_CODE, t1.num, t1.ALL_PRICE from konka_mobile_sail_data t1
			  union all
			  select t22.ADD_DATE report_date, t23.GOODS_NAME model_name, 0 is_del, t21.R3_CODE CUSTOMER_R3_CODE, t2.NUM, t2.MONEY ALL_PRICE from J_BILL_DETAILS t2
			  left join konka_r3_shop t21 on t21.R3_CODE = #r3_code:VARCHAR#
			  left join J_BILL t22        on t22.BILL_ID=t2.BILL_ID and t22.C_ID = t21.id
			  left join J_BASE_GOODS t23  on t23.GOODS_ID = t2.GOODS_ID and t23.C_ID = t21.ID
			  where t22.C_ID in (select id from konka_r3_shop where r3_code = #r3_code:VARCHAR#) and t22.BILL_TYPE = 20
			  union all
			  select t22.ADD_DATE report_date, t23.GOODS_NAME model_name, 0 is_del, t21.R3_CODE CUSTOMER_R3_CODE, -t2.NUM, t2.MONEY ALL_PRICE from J_BILL_DETAILS t2
			  left join konka_r3_shop t21 on t21.R3_CODE = #r3_code:VARCHAR#
			  left join J_BILL t22        on t22.BILL_ID=t2.BILL_ID and t22.C_ID = t21.id
			  left join J_BASE_GOODS t23  on t23.GOODS_ID = t2.GOODS_ID and t23.C_ID = t21.ID
			  where t22.C_ID in (select id from konka_r3_shop where r3_code = #r3_code:VARCHAR#) and t22.BILL_TYPE = 21			  
			  ) s2 on s2.REPORT_DATE > s.OPR_DATE and s2.MODEL_NAME = s1.GOODS_NAME and s2.is_del=0 and s2.model_name is not null and s2.CUSTOMER_R3_CODE = #r3_code:VARCHAR#
<!-- 			  where s1.IS_KONKA = 1 and s1.goods_stutes = 0 -->
			  where s1.goods_stutes = 0
			)
			group by pd_name, goods_id,initcount, ts
		) tout on tin.PD_NAME = tout.pd_name
		where tin.pd_name is not null
		order by tin.initcount desc
	)
	</select>

	<select id="selectKonkaR3Shop" resultMap="konkaR3ShopResultForMMTShopList" parameterClass="konkaR3Shop" >
	select a.*,
	       (select real_name
	          from konka_pe_prod_user c
	         where c.id = a.import_user_id) as import_user_name
	 <isNotEmpty property="map.key">,b.shop_id,b.shop_name,b.is_rural,b.is_auth,b.p_index,b.main_pd,b.link_user,b.link_phone,b.street_addr</isNotEmpty>
	 <isEmpty property="map.key">,0 as shop_id, 0 as shop_name, 0 as is_rural,0 as is_auth, 0 as p_index, 0 as main_pd, 0 as link_user, 0 as link_phone, 0 as street_addr</isEmpty>
	 <isNotEmpty property="map.is_assign">,b.mmt_shop_id, b.mmt_shop_name</isNotEmpty>
	 <isEmpty property="map.is_assign">,0 as mmt_shop_id, 0 as mmt_shop_name</isEmpty>
	  from KONKA_R3_SHOP a
	 <isNotEmpty property="map.is_assign"> left join konka_r3_mmt_match b on a.id = b.r3_shop_id</isNotEmpty>
	 where 1 = 1
	     <isNotEmpty prepend=" and " property="map.is_assign">b.id is not null</isNotEmpty>
		<include refid="sf-konkaR3Shop" />
	</select>
	
	<!--	通过r3编码查找 R3客户或网点客户-->
	<select id="selectKonkaR3ShopOrJbasePartner" resultClass="java.util.HashMap" parameterClass="konkaR3Shop" >
		SELECT a.R3_CODE,a.CUSTOMER_NAME
			  FROM KONKA_R3_SHOP a
		WHERE 1 = 1
		<isNotEmpty prepend=" and " property="r3_code">
		a.R3_CODE = #r3_code:VARCHAR#
		</isNotEmpty>
		UNION
		SELECT wd.partner_sn R3_CODE,wd.partner_name CUSTOMER_NAME
		FROM J_BASE_PARTNER wd
		WHERE     is_del = 0
		AND par_c_id IN (SELECT a.id
	                          FROM    KONKA_R3_SHOP a
	                               LEFT JOIN
	                                  MV_ORG_OF_CUSTOMER ee
	                               ON ee.konka_r3_id = a.id
	                         WHERE 1 = 1)
	    <isNotEmpty prepend=" and " property="r3_code">
		wd.PARTNER_SN = #r3_code:VARCHAR#
		</isNotEmpty>
	</select>
	
	<!--@Zhang,Xufeng 查询已分配(不一定匹配）的 R3 网点-->
	<select id="selectKonkaR3ShopMatchAndAssignList" resultMap="konkaR3ShopResult" parameterClass="konkaR3Shop" >
	<isNotEmpty property="row.count">
		<![CDATA[ select * from ( ]]>
	</isNotEmpty>
		 select a.*
	 	 from KONKA_R3_SHOP a
		 where 1 = 1
	 	 and a.is_del = 0
	 	<isNotEmpty prepend=" and " property="map.konka_jxc_dept_id">
			a.ID in (select t1.konka_r3_id
                  	 from BRANCH_ASSIGN t1
					 where (t1.syb_id = #map.konka_jxc_dept_id# or t1.fgs_id = #map.konka_jxc_dept_id# or
					       t1.jyb_id = #map.konka_jxc_dept_id# or t1.bsc_id = #map.konka_jxc_dept_id#)
					   and t1.konka_r3_id != -1)
		</isNotEmpty>
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!--@Zhang,Xufeng 2011-11-17 查询已分配(不一定匹配）的 R3 网点数量-->
	<select id="selectKonkaR3ShopMatchAndAssignCount" resultClass="long" parameterClass="konkaR3Shop" >
	 <isNotEmpty prepend=" " property="map.by_shop"><!-- 按网点统计  zhang，xufeng-->
	 	select count(*)
		 from KONKA_R3_SHOP a
		 where 1 = 1
		 <isNotEmpty prepend=" and " property="map.konka_jxc_dept_id"> 
			a.ID in (select t1.konka_r3_id
                  	 from BRANCH_ASSIGN t1
					 where (t1.syb_id = #map.konka_jxc_dept_id# or t1.fgs_id = #map.konka_jxc_dept_id# or
					       t1.jyb_id = #map.konka_jxc_dept_id# or t1.bsc_id = #map.konka_jxc_dept_id#)
					   and t1.konka_r3_id != -1)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_agent">
			<!--代理商		-->
			a.id in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isNotEmpty>
		<isEmpty prepend=" and " property="map.is_agent">
			<!--经销商		-->
			a.id not in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isEmpty>
	 </isNotEmpty>
	 <isNotEmpty prepend=" " property="map.by_area"><!-- 按区域统计  du，zhiming-->
	 	select count(*)
		 from KONKA_R3_SHOP a
		 where 1 = 1  and a.is_del = 0
		 <isNotEmpty prepend=" and " property="map.area_code_search">
		  a.ID in 
         (select b.r3_shop_id from konka_r3_mmt_match b where b.mmt_shop_id in(
                 select t.shop_id
                 from entp_shop t
                 where t.p_index in (select t.p_index
                       from KONKA_BASE_PROVINCE_LIST_FOUR t
                      start with t.P_INDEX = #map.area_code_search#
                     connect by prior t.p_index = t.par_index)
         ))
		 
		 </isNotEmpty>
		  <isNotEmpty prepend=" and " property="map.konka_jxc_dept_id">
			a.ID in (select t1.konka_r3_id
                  	 from BRANCH_ASSIGN t1
					 where (t1.syb_id = #map.konka_jxc_dept_id# or t1.fgs_id = #map.konka_jxc_dept_id# or
					       t1.jyb_id = #map.konka_jxc_dept_id# or t1.bsc_id = #map.konka_jxc_dept_id#)
					   and t1.konka_r3_id != -1)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_agent">
			<!--代理商		-->
			a.id in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isNotEmpty>
		<isEmpty prepend=" and " property="map.is_agent">
			<!--经销商		-->
			a.id not in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isEmpty>
		 <isNotEmpty prepend=" and " property="map.r3_code_like">
		  a.R3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'
        </isNotEmpty>
        </isNotEmpty>
        
        <isNotEmpty prepend=" " property="map.by_time"><!-- 按时间统计（目前与按区域逻辑一致添加此sql便于维护）  du，zhiming-->
	 	select count(*)
		 from KONKA_R3_SHOP a
		 where 1 = 1  and a.is_del = 0
		 <isNotEmpty prepend=" and " property="map.area_code_search">
		  a.ID in 
         (select b.r3_shop_id from konka_r3_mmt_match b where b.mmt_shop_id in(
                 select t.shop_id
                 from entp_shop t
                 where t.p_index in (select t.p_index
                       from KONKA_BASE_PROVINCE_LIST_FOUR t
                      start with t.P_INDEX = #map.area_code_search#
                     connect by prior t.p_index = t.par_index)
         ))
		 
		 </isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.konka_jxc_dept_id">
			a.ID in (select t1.konka_r3_id
                  	 from BRANCH_ASSIGN t1
					 where (t1.syb_id = #map.konka_jxc_dept_id# or t1.fgs_id = #map.konka_jxc_dept_id# or
					       t1.jyb_id = #map.konka_jxc_dept_id# or t1.bsc_id = #map.konka_jxc_dept_id#)
					   and t1.konka_r3_id != -1)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_agent">
			<!--代理商		-->
			a.id in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isNotEmpty>
		<isEmpty prepend=" and " property="map.is_agent">
			<!--经销商		-->
			a.id not in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isEmpty>
		 <isNotEmpty prepend=" and " property="map.r3_code_like">
		  a.R3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'
        </isNotEmpty>
        </isNotEmpty>
	 <include refid="sf-konkaR3Shop" />
	</select>
    <!--客户汇款结算零售统计Count-->
	<select id="selectKonkaR3ShopMoneryPaginatedListCount" resultClass="long" parameterClass="konkaR3Shop" >
	    SELECT count(*)
	      FROM (SELECT shop.*,cust.PAR_CUSTOMER_TYPE,cust.PAR_CUSTOMER_TYPE_NAME,cust.YWY_USER_NAME  FROM  KONKA_R3_SHOP shop
	                        left join MV_ORG_OF_CUSTOMER cust
	                       
	                        on shop.R3_CODE=cust.R3_CODE
	                        WHERE 1=1
	                             <isNotEmpty prepend=" and " property="map.r3_code_like">
	                             shop.R3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'    
	          	                              </isNotEmpty>
	                                  <isNotEmpty prepend=" and " property="map.customer_name_like">
	                             shop.CUSTOMER_NAME like '%' || #map.customer_name_like:VARCHAR# || '%'    
	          	                              </isNotEmpty>
	          	                       <isNotEmpty prepend=" and " property="map.ywy_user_name_like">
	                             cust.YWY_USER_NAME like '%' || #map.ywy_user_name_like:VARCHAR# || '%'    
	          	                       </isNotEmpty>
	          	                        <isNotEmpty prepend=" and " property="map.shop_status">
	                               shop.SHOP_STATUS = #map.shop_status:DECIMAL#    
	          	                        </isNotEmpty>
	          	                        <isNotEmpty prepend=" and " property="map.par_customer_type">
	                             cust.PAR_CUSTOMER_TYPE = #map.par_customer_type:DECIMAL#    
	          	                  </isNotEmpty>
                                  <isNotEmpty prepend=" and " property="map.branch_area_code">
	                              	 shop.id in (select konka_r3_id from BRANCH_ASSIGN t where fgs_id=#map.branch_area_code:DECIMAL#)  
	          	                  </isNotEmpty>
                                  	          	                  
	                                     <!--权限-->
	          	                        <isNotEmpty prepend=" and " property="map.user_id">
									cust.USER_ID=#map.user_id:DECIMAL#
								</isNotEmpty>
								<isNotEmpty prepend=" and " property="map.par_dept_id">
									cust.YWY_DEPT_ID in ( select
									dept_id from KONKA_DEPT start with dept_id =
									#map.par_dept_id:DECIMAL# connect by prior dept_id = par_id)
								</isNotEmpty>
								
								<isNotEmpty prepend=" and " property="map.par_or_children_dept_id">
									cust.YWY_DEPT_ID in ( select
									dept_id from KONKA_DEPT start with dept_id =
									#map.par_or_children_dept_id:DECIMAL# connect by prior dept_id =
									par_id)
							     </isNotEmpty>
								<isNotEmpty prepend=" and " property="map.role_ids">
									cust.USER_ID in (SELECT USER_ID FROM KONKA_PE_ROLE_USER WHERE ROLE_ID in
									<iterate close=")" open="(" conjunction="," property="map.role_ids">#map.role_ids[]#</iterate>
								   )
								</isNotEmpty>
								and cust.USER_ID not in (select USER_ID FROM KONKA_PE_ROLE_USER WHERE
								ROLE_ID=188)
	            ) t
	          LEFT JOIN (SELECT column_1 r3_code,
	                            sum (t.column_14) / 10000 last_one_cls_money
	                        FROM channel_data_import t
	                      WHERE to_char (t.column_7, 'yyyymm') =to_char(add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'), -1), 'yyyymm')
	                      GROUP BY t.column_1) t5
	              ON t.r3_code = t5.r3_code
	          LEFT JOIN (SELECT t.column_1 r3_code,
	                            sum (t.column_14) / 10000 cur_cls_money
	                        FROM channel_data_import t
	                      WHERE  to_char (t.column_7, 'yyyymm') =to_char(to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyymm')
	                      GROUP BY t.column_1) t1
	              ON t.r3_code = t1.r3_code
	          LEFT JOIN (SELECT column_1 r3_code,
	                            sum (t.column_14) / 10000 last_two_cls_money
	                        FROM channel_data_import t
	                      WHERE  to_char (t.column_7, 'yyyymm') =to_char(add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'), -2), 'yyyymm')
	                      GROUP BY t.column_1) t2
	              ON t.r3_code = t2.r3_code
	          LEFT JOIN (SELECT t.R3_CODE,
	                            CASE to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'mm')
	                                WHEN '01' THEN t.COLUMN_1
	                                WHEN '02' THEN t.COLUMN_2
	                                WHEN '03' THEN t.COLUMN_4
	                                WHEN '05' THEN t.COLUMN_5
	                                WHEN '06' THEN t.COLUMN_6
	                                WHEN '07' THEN t.COLUMN_7
	                                WHEN '08' THEN t.COLUMN_8
	                                WHEN '09' THEN t.COLUMN_9
	                                WHEN '10' THEN t.COLUMN_10
	                                WHEN '11' THEN t.COLUMN_11
	                                WHEN '12' THEN t.COLUMN_12
	                            END
	                                cur_back_money,
	                                CASE to_char (add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'),-1), 'mm')
	                                WHEN '01' THEN t.COLUMN_1
	                                WHEN '02' THEN t.COLUMN_2
	                                WHEN '03' THEN t.COLUMN_4
	                                WHEN '05' THEN t.COLUMN_5
	                                WHEN '06' THEN t.COLUMN_6
	                                WHEN '07' THEN t.COLUMN_7
	                                WHEN '08' THEN t.COLUMN_8
	                                WHEN '09' THEN t.COLUMN_9
	                                WHEN '10' THEN t.COLUMN_10
	                                WHEN '11' THEN t.COLUMN_11
	                                WHEN '12' THEN t.COLUMN_12
	                            END
	                                last_one_back_money,
	                              CASE to_char (add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'),-2), 'mm')
	                                WHEN '01' THEN t.COLUMN_1
	                                WHEN '02' THEN t.COLUMN_2
	                                WHEN '03' THEN t.COLUMN_4
	                                WHEN '05' THEN t.COLUMN_5
	                                WHEN '06' THEN t.COLUMN_6
	                                WHEN '07' THEN t.COLUMN_7
	                                WHEN '08' THEN t.COLUMN_8
	                                WHEN '09' THEN t.COLUMN_9
	                                WHEN '10' THEN t.COLUMN_10
	                                WHEN '11' THEN t.COLUMN_11
	                                WHEN '12' THEN t.COLUMN_12
	                            END
	                                last_two_back_money
	                        FROM konka_r3_backmoney t
	                      WHERE t.YEAR = to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyy')) t3
	              ON t.r3_code = t3.r3_code
	              LEFT JOIN (SELECT sail_data.CUSTOMER_R3_CODE, sum (sail_data.ALL_PRICE) / 10000 cur_sail_monery
	              FROM KONKA_MOBILE_SAIL_DATA sail_data
	                WHERE 1 = 1 
	              AND to_char (sail_data.SALE_DATE, 'yyyymm')=to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyymm') group by sail_data.CUSTOMER_R3_CODE) t4
	                  ON t.r3_code = t4.CUSTOMER_R3_CODE
	                  
	                  LEFT JOIN (SELECT sail_data.CUSTOMER_R3_CODE, sum (sail_data.ALL_PRICE) / 10000 last_one_sail_monery
	              FROM KONKA_MOBILE_SAIL_DATA sail_data
	                WHERE 1 = 1
	              AND to_char (sail_data.SALE_DATE, 'yyyymm')=to_char (add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'),-1), 'yyyymm') group by sail_data.CUSTOMER_R3_CODE) t5
	                  ON t.r3_code = t5.CUSTOMER_R3_CODE
	                  
	              LEFT JOIN (SELECT sail_data.CUSTOMER_R3_CODE, sum (sail_data.ALL_PRICE) / 10000 last_two_sail_monery
	              FROM KONKA_MOBILE_SAIL_DATA sail_data
	                WHERE 1 = 1 
	              AND to_char (sail_data.SALE_DATE, 'yyyymm')=to_char (add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'),-2), 'yyyymm') group by sail_data.CUSTOMER_R3_CODE) t6
	                  ON t.r3_code = t6.CUSTOMER_R3_CODE
	              
	              left join(
	                      select detail.R3_CODE, count(detail.R3_CODE) cur_cust_visit_count from KONKA_MOBILE_CUST_VISIT visit 
	                      left join KONKA_MOBILE_CUST_VISIT_DETAIL detail on visit.VISIT_ID=detail.VISIT_ID 
	                      where detail.R3_CODE is not null and to_char (visit.ADD_DATE, 'yyyymm')=to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyymm') group by detail.R3_CODE
	              ) t7 on t.R3_CODE=t7.R3_CODE
	              left join(
	                      select detail.R3_CODE, count(detail.R3_CODE) last_one_cust_visit_count from KONKA_MOBILE_CUST_VISIT visit 
	                      left join KONKA_MOBILE_CUST_VISIT_DETAIL detail on visit.VISIT_ID=detail.VISIT_ID 
	                      where detail.R3_CODE is not null and to_char (visit.ADD_DATE, 'yyyymm')=to_char(add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'), -1),'yyyymm') group by detail.R3_CODE
	              ) t8
	              on t.R3_CODE=t8.R3_CODE
	              left join(
	                      select detail.R3_CODE, count(detail.R3_CODE) last_two_cust_visit_count from KONKA_MOBILE_CUST_VISIT visit 
	                      left join KONKA_MOBILE_CUST_VISIT_DETAIL detail on visit.VISIT_ID=detail.VISIT_ID 
	                      where detail.R3_CODE is not null and to_char (visit.ADD_DATE, 'yyyymm')=to_char(add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'), -2),'yyyymm') group by detail.R3_CODE
	              ) t9
	              on t.R3_CODE=t9.R3_CODE
	              LEFT JOIN (
	                      SELECT visit_plan_detail.R3_CODE, COUNT(visit_plan_detail.R3_CODE) cur_cust_plan_visit_count FROM KONKA_MOBILE_VISIT_PLAN visit_plan
	                      LEFT JOIN KONKA_MOBILE_VISIT_PLAN_DETAIL visit_plan_detail ON visit_plan.PLAN_ID=visit_plan_detail.PLAN_ID
	                      WHERE visit_plan_detail.R3_CODE IS NOT NULL AND to_char (visit_plan.ADD_DATE, 'yyyymm')=to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyymm') GROUP BY visit_plan_detail.R3_CODE
	              ) t10
	              on t.R3_CODE=t10.R3_CODE
	</select>
	<!--	客户汇款结算零售统计list-->
	<select id="selectKonkaR3ShopMoneryPaginatedList" resultClass="java.util.HashMap" parameterClass="konkaR3Shop" >
	  <![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select * from (
			    SELECT t.id,
			          t.branch_area_name,
			          t.r3_code,
			          t.customer_name,
			          t.par_customer_type,
			          t.par_customer_type_name,
			          t.shop_status,
			          t.area_name,
			          t.customer_code,
			          t.ywy_user_name,
			          #map.search_time# add_date,
			          t2.last_two_cls_money,
			          t5.last_one_cls_money,
			          t1.cur_cls_money,
			          t3.last_two_back_money,
			          t3.last_one_back_money,
			          t3.cur_back_money,
			          t4.cur_sail_monery,
			          t5.last_one_sail_monery,
			          t6.last_two_sail_monery,
			          t7.cur_cust_visit_count,
			          t8.last_one_cust_visit_count,
			          t9.last_two_cust_visit_count,
			          t10.cur_cust_plan_visit_count,
			          (t7.cur_cust_visit_count/t10.cur_cust_plan_visit_count) month_cust_visit_bfb
			      FROM (SELECT shop.*,cust.PAR_CUSTOMER_TYPE,cust.PAR_CUSTOMER_TYPE_NAME,cust.YWY_USER_NAME  FROM  KONKA_R3_SHOP shop
			                        left join MV_ORG_OF_CUSTOMER cust
			                        on shop.R3_CODE=cust.R3_CODE
			                        WHERE 1=1
                                      <isNotEmpty prepend=" and " property="map.r3_code_like">
			                             shop.R3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'    
             	                              </isNotEmpty>
                                     <isNotEmpty prepend=" and " property="map.customer_name_like">
			                             shop.CUSTOMER_NAME like '%' || #map.customer_name_like:VARCHAR# || '%'    
             	                              </isNotEmpty>
             	                       <isNotEmpty prepend=" and " property="map.ywy_user_name_like">
			                             cust.YWY_USER_NAME like '%' || #map.ywy_user_name_like:VARCHAR# || '%'    
             	                       </isNotEmpty>
             	                        <isNotEmpty prepend=" and " property="map.shop_status">
			                               shop.SHOP_STATUS = #map.shop_status:DECIMAL#    
             	                        </isNotEmpty>
             	                        <isNotEmpty prepend=" and " property="map.par_customer_type">
			                             cust.PAR_CUSTOMER_TYPE = #map.par_customer_type:DECIMAL#    
             	                              </isNotEmpty>
            	                      <isNotEmpty prepend=" and " property="map.branch_area_code">
	                              	 shop.id in (select konka_r3_id from BRANCH_ASSIGN t where fgs_id=#map.branch_area_code:DECIMAL#)  
	          	                  </isNotEmpty>
                                        <!--权限-->
             	                        <isNotEmpty prepend=" and " property="map.user_id">
											cust.USER_ID=#map.user_id:DECIMAL#
										</isNotEmpty>
										<isNotEmpty prepend=" and " property="map.par_dept_id">
											cust.YWY_DEPT_ID in ( select
											dept_id from KONKA_DEPT start with dept_id =
											#map.par_dept_id:DECIMAL# connect by prior dept_id = par_id)
										</isNotEmpty>
										<isNotEmpty prepend=" and " property="map.par_or_children_dept_id">
											cust.YWY_DEPT_ID in ( select
											dept_id from KONKA_DEPT start with dept_id =
											#map.par_or_children_dept_id:DECIMAL# connect by prior dept_id =
											par_id)
									     </isNotEmpty>
										<isNotEmpty prepend=" and " property="map.role_ids">
											cust.USER_ID in (SELECT USER_ID FROM KONKA_PE_ROLE_USER WHERE ROLE_ID in
											<iterate close=")" open="(" conjunction="," property="map.role_ids">#map.role_ids[]#</iterate>
										   )
										</isNotEmpty>
										and cust.USER_ID not in (select USER_ID FROM KONKA_PE_ROLE_USER WHERE
										ROLE_ID=188)
			            ) t
			          LEFT JOIN (SELECT column_1 r3_code,
			                            sum (t.column_14) / 10000 last_one_cls_money
			                        FROM channel_data_import t
			                      WHERE to_char (t.column_7, 'yyyymm') =to_char(add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'), -1), 'yyyymm')
			                      GROUP BY t.column_1) t5
			              ON t.r3_code = t5.r3_code
			          LEFT JOIN (SELECT t.column_1 r3_code,
			                            sum (t.column_14) / 10000 cur_cls_money
			                        FROM channel_data_import t
			                      WHERE  to_char (t.column_7, 'yyyymm') =to_char(to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyymm')
			                      GROUP BY t.column_1) t1
			              ON t.r3_code = t1.r3_code
			          LEFT JOIN (SELECT column_1 r3_code,
			                            sum (t.column_14) / 10000 last_two_cls_money
			                        FROM channel_data_import t
			                      WHERE  to_char (t.column_7, 'yyyymm') =to_char(add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'), -2), 'yyyymm')
			                      GROUP BY t.column_1) t2
			              ON t.r3_code = t2.r3_code
			          LEFT JOIN (SELECT t.R3_CODE,
			                            CASE to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'mm')
			                                WHEN '01' THEN t.COLUMN_1
			                                WHEN '02' THEN t.COLUMN_2
			                                WHEN '03' THEN t.COLUMN_4
			                                WHEN '05' THEN t.COLUMN_5
			                                WHEN '06' THEN t.COLUMN_6
			                                WHEN '07' THEN t.COLUMN_7
			                                WHEN '08' THEN t.COLUMN_8
			                                WHEN '09' THEN t.COLUMN_9
			                                WHEN '10' THEN t.COLUMN_10
			                                WHEN '11' THEN t.COLUMN_11
			                                WHEN '12' THEN t.COLUMN_12
			                            END
			                                cur_back_money,
			                                CASE to_char (add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'),-1), 'mm')
			                                WHEN '01' THEN t.COLUMN_1
			                                WHEN '02' THEN t.COLUMN_2
			                                WHEN '03' THEN t.COLUMN_4
			                                WHEN '05' THEN t.COLUMN_5
			                                WHEN '06' THEN t.COLUMN_6
			                                WHEN '07' THEN t.COLUMN_7
			                                WHEN '08' THEN t.COLUMN_8
			                                WHEN '09' THEN t.COLUMN_9
			                                WHEN '10' THEN t.COLUMN_10
			                                WHEN '11' THEN t.COLUMN_11
			                                WHEN '12' THEN t.COLUMN_12
			                            END
			                                last_one_back_money,
			                              CASE to_char (add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'),-2), 'mm')
			                                WHEN '01' THEN t.COLUMN_1
			                                WHEN '02' THEN t.COLUMN_2
			                                WHEN '03' THEN t.COLUMN_4
			                                WHEN '05' THEN t.COLUMN_5
			                                WHEN '06' THEN t.COLUMN_6
			                                WHEN '07' THEN t.COLUMN_7
			                                WHEN '08' THEN t.COLUMN_8
			                                WHEN '09' THEN t.COLUMN_9
			                                WHEN '10' THEN t.COLUMN_10
			                                WHEN '11' THEN t.COLUMN_11
			                                WHEN '12' THEN t.COLUMN_12
			                            END
			                                last_two_back_money
			                        FROM konka_r3_backmoney t
			                      WHERE t.YEAR = to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyy')) t3
			              ON t.r3_code = t3.r3_code
			              LEFT JOIN (SELECT sail_data.CUSTOMER_R3_CODE, sum (sail_data.ALL_PRICE) / 10000 cur_sail_monery
			              FROM KONKA_MOBILE_SAIL_DATA sail_data
			                WHERE 1 = 1 
			              AND to_char (sail_data.SALE_DATE, 'yyyymm')=to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyymm') group by sail_data.CUSTOMER_R3_CODE) t4
			                  ON t.r3_code = t4.CUSTOMER_R3_CODE
			                  
			                  LEFT JOIN (SELECT sail_data.CUSTOMER_R3_CODE, sum (sail_data.ALL_PRICE) / 10000 last_one_sail_monery
			              FROM KONKA_MOBILE_SAIL_DATA sail_data
			                WHERE 1 = 1
			              AND to_char (sail_data.SALE_DATE, 'yyyymm')=to_char (add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'),-1), 'yyyymm') group by sail_data.CUSTOMER_R3_CODE) t5
			                  ON t.r3_code = t5.CUSTOMER_R3_CODE
			                  
			              LEFT JOIN (SELECT sail_data.CUSTOMER_R3_CODE, sum (sail_data.ALL_PRICE) / 10000 last_two_sail_monery
			              FROM KONKA_MOBILE_SAIL_DATA sail_data
			                WHERE 1 = 1 
			              AND to_char (sail_data.SALE_DATE, 'yyyymm')=to_char (add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'),-2), 'yyyymm') group by sail_data.CUSTOMER_R3_CODE) t6
			                  ON t.r3_code = t6.CUSTOMER_R3_CODE
			              
			              left join(
			                      select detail.R3_CODE, count(detail.R3_CODE) cur_cust_visit_count from KONKA_MOBILE_CUST_VISIT visit 
			                      left join KONKA_MOBILE_CUST_VISIT_DETAIL detail on visit.VISIT_ID=detail.VISIT_ID 
			                      where detail.R3_CODE is not null and to_char (visit.ADD_DATE, 'yyyymm')=to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyymm') group by detail.R3_CODE
			              ) t7 on t.R3_CODE=t7.R3_CODE
			              left join(
			                      select detail.R3_CODE, count(detail.R3_CODE) last_one_cust_visit_count from KONKA_MOBILE_CUST_VISIT visit 
			                      left join KONKA_MOBILE_CUST_VISIT_DETAIL detail on visit.VISIT_ID=detail.VISIT_ID 
			                      where detail.R3_CODE is not null and to_char (visit.ADD_DATE, 'yyyymm')=to_char(add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'), -1),'yyyymm') group by detail.R3_CODE
			              ) t8
			              on t.R3_CODE=t8.R3_CODE
			              left join(
			                      select detail.R3_CODE, count(detail.R3_CODE) last_two_cust_visit_count from KONKA_MOBILE_CUST_VISIT visit 
			                      left join KONKA_MOBILE_CUST_VISIT_DETAIL detail on visit.VISIT_ID=detail.VISIT_ID 
			                      where detail.R3_CODE is not null and to_char (visit.ADD_DATE, 'yyyymm')=to_char(add_months(to_date(#map.search_time:VARCHAR#,'yyyymm'), -2),'yyyymm') group by detail.R3_CODE
			              ) t9
			              on t.R3_CODE=t9.R3_CODE
			              LEFT JOIN (
			                      SELECT visit_plan_detail.R3_CODE, COUNT(visit_plan_detail.R3_CODE) cur_cust_plan_visit_count FROM KONKA_MOBILE_VISIT_PLAN visit_plan
			                      LEFT JOIN KONKA_MOBILE_VISIT_PLAN_DETAIL visit_plan_detail ON visit_plan.PLAN_ID=visit_plan_detail.PLAN_ID
			                      WHERE visit_plan_detail.R3_CODE IS NOT NULL AND to_char (visit_plan.ADD_DATE, 'yyyymm')=to_char (to_date(#map.search_time:VARCHAR#,'yyyymm'), 'yyyymm') GROUP BY visit_plan_detail.R3_CODE
			              ) t10
			              on t.R3_CODE=t10.R3_CODE
			    ) 
			 order by MONTH_CUST_VISIT_BFB desc
	  <![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	<!--@Zhang,Xufeng 2011-11-17 查询已分配(不一定匹配）的 R3 网点 带分页-->
	<select id="selectKonkaR3ShopMatchAndAssignPaginatedList" resultMap="konkaR3ShopResult" parameterClass="konkaR3Shop" >
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		 <isNotEmpty  prepend=" " property="map.by_shop"><!-- 按网点统计  zhang，xufeng-->
		  select a.*
	 	 from KONKA_R3_SHOP a
		 where 1 = 1
	 	 and a.is_del = 0
	 	<isNotEmpty prepend=" and " property="map.konka_jxc_dept_id">
			a.ID in (select t1.konka_r3_id
                  	 from BRANCH_ASSIGN t1
					 where (t1.syb_id = #map.konka_jxc_dept_id# or t1.fgs_id = #map.konka_jxc_dept_id# or
					       t1.jyb_id = #map.konka_jxc_dept_id# or t1.bsc_id = #map.konka_jxc_dept_id#)
					   and t1.konka_r3_id != -1)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_agent">
			<!--代理商		-->
			a.id in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isNotEmpty>
		<isEmpty prepend=" and " property="map.is_agent">
			<!--经销商		-->
			a.id not in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isEmpty>
	 <include refid="sf-konkaR3Shop" />
	  </isNotEmpty>
	  <isNotEmpty prepend=" "  property="map.by_area"><!-- 按区域统计  du，zhiming-->
      		select a.*
		 from KONKA_R3_SHOP a
		 where 1 = 1  and a.is_del = 0
		 <isNotEmpty prepend=" and " property="map.area_code_search">
		  a.id in 
         (select b.r3_shop_id from konka_r3_mmt_match b where b.mmt_shop_id in(
                 select t.shop_id
                 from entp_shop t
                 where t.p_index in (select t.p_index
                       from KONKA_BASE_PROVINCE_LIST_FOUR t
                      start with t.P_INDEX = #map.area_code_search#
                     connect by prior t.p_index = t.par_index)
         ))
		</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.konka_jxc_dept_id">
			a.ID in (select t1.konka_r3_id
                  	 from BRANCH_ASSIGN t1
					 where (t1.syb_id = #map.konka_jxc_dept_id# or t1.fgs_id = #map.konka_jxc_dept_id# or
					       t1.jyb_id = #map.konka_jxc_dept_id# or t1.bsc_id = #map.konka_jxc_dept_id#)
					   and t1.konka_r3_id != -1)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_agent">
			<!--代理商		-->
			a.id in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isNotEmpty>
		<isEmpty prepend=" and " property="map.is_agent">
			<!--经销商		-->
			a.id not in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code_like">
		  a.R3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'
        </isNotEmpty>
        <include refid="sf-konkaR3Shop" />
      </isNotEmpty>
      
       <isNotEmpty prepend=" "  property="map.by_time"><!-- 按时间统计（目前与按区域逻辑一致添加此sql便于维护）  du，zhiming-->
      		select a.*
		 from KONKA_R3_SHOP a
		 where 1 = 1  and a.is_del = 0
		 <isNotEmpty prepend=" and " property="map.area_code_search">
		  a.id in 
         (select b.r3_shop_id from konka_r3_mmt_match b where b.mmt_shop_id in(
                 select t.shop_id
                 from entp_shop t
                 where t.p_index in (select t.p_index
                       from KONKA_BASE_PROVINCE_LIST_FOUR t
                      start with t.P_INDEX = #map.area_code_search#
                     connect by prior t.p_index = t.par_index)
         ))
		</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.konka_jxc_dept_id">
			a.ID in (select t1.konka_r3_id
                  	 from BRANCH_ASSIGN t1
					 where (t1.syb_id = #map.konka_jxc_dept_id# or t1.fgs_id = #map.konka_jxc_dept_id# or
					       t1.jyb_id = #map.konka_jxc_dept_id# or t1.bsc_id = #map.konka_jxc_dept_id#)
					   and t1.konka_r3_id != -1)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_agent">
			<!--代理商		-->
			a.id in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isNotEmpty>
		<isEmpty prepend=" and " property="map.is_agent">
			<!--经销商		-->
			a.id not in (select kbc.konka_r3_id
                  from konka_branch_category kbc
                 where kbc.category_id = 10
                   and kbc.mmt_shop_id is null)
		</isEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code_like">
		  a.R3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'
        </isNotEmpty>
        <include refid="sf-konkaR3Shop" />
      </isNotEmpty>
	 <![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<select id="selectKonkaR3ShopList" resultMap="konkaR3ShopResultForList" parameterClass="konkaR3Shop" >
	<isNotEmpty property="row.count">
		<![CDATA[ select * from ( ]]>
	</isNotEmpty>
	select a.*,
	       (select real_name
	          from konka_pe_prod_user c
	         where c.id = a.import_user_id) as import_user_name
	 <isNotEmpty property="map.is_assign">,b.mmt_shop_id, b.mmt_shop_name</isNotEmpty>
	 <isEmpty property="map.is_assign">,0 as mmt_shop_id, 0 as mmt_shop_name</isEmpty>
	  from KONKA_R3_SHOP a
	 <isNotEmpty property="map.is_assign"> left join konka_r3_mmt_match b on a.id = b.r3_shop_id</isNotEmpty>
	 <isNotEmpty property="map.agents"> left join KONKA_BRANCH_CATEGORY kbc on kbc.KONKA_R3_ID = a.id</isNotEmpty>
	 where 1 = 1
		<include refid="sf-konkaR3Shop" />
		<!-- order by ID asc -->
		<isNotEmpty prepend=" and " property="map.Konka_r3_id">
			a.ID in ($map.Konka_r3_id$)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.pks">
				a.ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.konka_jxc_dept_id">
			a.ID in (select t1.konka_r3_id
                  	 from BRANCH_ASSIGN t1
					 where (t1.syb_id = #map.konka_jxc_dept_id# or t1.fgs_id = #map.konka_jxc_dept_id# or
					       t1.jyb_id = #map.konka_jxc_dept_id# or t1.bsc_id = #map.konka_jxc_dept_id#)
					   and t1.konka_r3_id != -1)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.category_r3">
			a.ID in (select t2.konka_r3_id
                  	 from konka_branch_category t2
					 where t2.category_id=10)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.agents">
			kbc.KONKA_R3_ID is not null and CATEGORY_ID=10
		</isNotEmpty>
        <!--过滤掉已知的客户-->
		<isNotEmpty prepend=" " property="map.cust_ids">
				a.ID not in
				<iterate close=")" open="(" conjunction="," property="map.cust_ids">#map.cust_ids[]#</iterate>
		</isNotEmpty>
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	
	<select id="selectKonkaR3ShopListForYwyAndJb" resultMap="konkaR3ShopResultListByYwyAndJb" parameterClass="konkaR3Shop" >
	<isNotEmpty property="row.count">
		<![CDATA[ select * from ( ]]>
	</isNotEmpty>
	SELECT a.*,
       (SELECT real_name
          FROM konka_pe_prod_user c
         WHERE c.id = a.import_user_id)
          AS import_user_name,
      v.YWY_DEPT_ID as ywy_dept_id,v.YWY_USER_NAME as ywy_user_name,v.USER_ID as ywy_id,(select t.dept_name from konka_dept t where t.DEPT_ID=v.YWY_DEPT_ID) as ywy_dept_name
  FROM KONKA_R3_SHOP a 
  left join konka_dept cc on a.branch_area_name_2 = cc.dept_sn
		left join MV_ORG_OF_CUSTOMER v on v.konka_r3_id= a.id
		left join KONKA_PE_PROD_USER pu on pu.ID = v.USER_ID
		 
 WHERE  v.YWY_USER_NAME is not null and 1 = 1 
 		<isNotEmpty prepend=" and " property="map.fgs_dept_value">cc.dept_id = #map.fgs_dept_value#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.fgs_user_id"> 
		 ( v.cur_dept_id in( SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.fgs_user_id#))
		  or v.cur_dept_id = #map.cur_dept_id#)             			
		  </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.dept_id_start">
			(v.user_id is not null and v.user_id in (
				select id from konka_pe_prod_user u
						where u.dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			v.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
 
		<include refid="sf-konkaR3Shop" />
		<!-- order by ID asc -->
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	

	<select id="selectKonkaR3ShopCount" resultClass="long" parameterClass="konkaR3Shop" >
		select count(*)
		 from KONKA_R3_SHOP a
		<isNotEmpty property="map.is_assign"> left join konka_r3_mmt_match b on a.id = b.r3_shop_id</isNotEmpty>
		<isNotEmpty property="map.unAssignYWY">
		 	 left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1
		</isNotEmpty>
		<isNotEmpty property="map.leftYWY">
		 	 left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1
		 	<isNotEmpty prepend=" " property="map.YWY">
			 left join konka_pe_prod_user e on e.id=t1.user_id
		 	</isNotEmpty>
		 </isNotEmpty>
		<isNotEmpty prepend="  " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 <isNotEmpty prepend="  " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 
		 where 1 = 1 and a.is_konka = 1
		 <isNotEmpty prepend=" and " property="map.user_name_like">
		 	e.user_name like '%' || #map.user_name_like:VARCHAR# || '%' 
		 </isNotEmpty>
		   <isNotEmpty prepend=" and" property="map.is_in">
		  		a.r3_code in (select distinct column_1 from CHANNEL_DATA_IMPORT)
		   </isNotEmpty>
		   
		<isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			 ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<include refid="sf-konkaR3Shop" />
	</select>

	<select id="selectKonkaR3ShopStaticsGroupByFGS" resultMap="konkaR3ShopResultForStaticGroupByFGS" parameterClass="konkaR3Shop" >
		select d1.dept_id,
		       d1.dept_sn,
		       dept_name,
		       value(d2.total, 0) total_count,
		       value(d2.unassign_count, 0) unassign_count
		  from (select * from konka_dept d where d.dept_type = 3) d1
		  left join (select s1.*, s2.unassign_count
		               from (select t.branch_area_name_2, count(1) total
		                       from konka_r3_shop t
		                      group by t.branch_area_name_2) s1
		               left join (select t.branch_area_name_2,
		                                count(1) unassign_count
		                           from konka_r3_shop t
		                           left join branch_assign t1
		                             on t1.konka_r3_id = t.id
		                            and t1.branch_type = 1
		                          where t1.user_id is null
		                          group by t.branch_area_name_2) s2
		                 on s2.branch_area_name_2 = s1.branch_area_name_2) d2
		    on d2.branch_area_name_2 = d1.dept_sn
		 where 1=1
		 <isNotEmpty prepend=" and " property="map.dept_id_eq">d1.dept_id = #map.dept_id_eq:DECIMAL#</isNotEmpty>
		 order by d1.dept_name
	</select>
	
	
	<select id="selectKonkaR3ShopCountForHandle" resultClass="long" parameterClass="konkaR3Shop" >
		select count(*)
		  from
		  <isNotEmpty  property="map.is_in">
		 (
         select  DISTINCT  customer_name
        FROM KONKA_R3_SHOP 
       WHERE 1   = 1
        AND r3_code IN
        (SELECT DISTINCT column_1 FROM CHANNEL_DATA_IMPORT)
         <isNotEmpty prepend=" and " property="map.r3_code">R3_CODE = #map.r3_code:VARCHAR#</isNotEmpty>
          )
          </isNotEmpty>
		  <isNotEmpty  property="map.is_jyb">
		  ( select distinct  handle_name  from konka_r3_shop  where 1=1 
		   <isNotEmpty prepend=" and " property="map.handle_name">
		    handle_name=#map.handle_name#
		  </isNotEmpty>) 
		  </isNotEmpty>
		  
	</select>

	<!-- R3客户管理列表查询 -->
	<select id="selectKonkaR3ShopForYwyPaginatedList" resultMap="konkaR3ShopResultForMMTShopYwyList" parameterClass="konkaR3Shop" >
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select a.*, e.user_name,f.c_name,f.c_comm,
			  a_info.STATUS rs_status,a_info.OPER_REASON,a_info.id audit_id,
		      (select real_name from konka_pe_prod_user c where c.id = a.import_user_id) as import_user_name,
		      <isNotEmpty property="map.account">
		      	(select to_char(listagg(t.USER_NAME, ',')) from KONKA_PE_PROD_USER t where t.IS_XX_USER = 0 and t.IS_DEL = 0  and t.CUST_ID = a.id) as account_list
		      </isNotEmpty>
		      <isEmpty property="map.account">
		      	0 as account_list
		      </isEmpty>
		 	  <isNotEmpty property="map.key">
		 	  	,b.shop_id,b.shop_name,b.is_rural,b.is_auth,b.p_index,b.main_pd,b.link_user,b.link_phone,b.street_addr
		 	  </isNotEmpty>
	     	  <isEmpty property="map.key">
	     	    ,0 as shop_id, 0 as shop_name, 0 as is_rural,0 as is_auth, 0 as p_index, 0 as main_pd, 0 as link_user, 0 as link_phone, 0 as street_addr
	     	  </isEmpty>
		 	  <isNotEmpty property="map.is_assign">,b.mmt_shop_id, b.mmt_shop_name</isNotEmpty>
		      <isEmpty property="map.is_assign">,0 as mmt_shop_id, 0 as mmt_shop_name</isEmpty>
		 from KONKA_R3_SHOP a
		 left join konka_dept cc on a.branch_area_name_2 = cc.dept_sn
		 left join (select C_INDEX,PAR_INDEX,C_NAME from Konka_Category where is_del=0 and c_type=10) kc on a.CUSTOMER_TYPE=kc.C_INDEX
		 <isNotEmpty property="map.is_assign">
		    <!-- @desc 当关联地区查询时处理 -->
			<isNotEmpty prepend=" " property="map.areas_ids">
				left join (select t1.*,t2.p_index from konka_r3_mmt_match t1 left join entp_shop t2 on t1.mmt_shop_id = t2.shop_id) d on a.id = d.r3_shop_id
				left join konka_base_province_list_four c on d.p_index = c.p_index 
			</isNotEmpty>
			<isEmpty prepend=" " property="map.key">
			    left join konka_r3_mmt_match b on a.id = b.r3_shop_id 
			</isEmpty>
			<!--@desc 取得匹配的网点信息时处理 -->
			<isNotEmpty prepend=" " property="map.key">
				left join (select t1.*,c.* from konka_r3_mmt_match t1 left join entp_shop c on t1.mmt_shop_id = c.shop_id) b on a.id = b.r3_shop_id
		    </isNotEmpty>
		    <isNotEmpty prepend=" " property="map.areas_ids">
		        where c.par_index in ($map.areas_ids$) and a.is_konka = 1
		    </isNotEmpty>
		 </isNotEmpty>
		 <isNotEmpty property="map.unAssignYWY">
		 	 left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1
		 </isNotEmpty>
		 <isNotEmpty property="map.leftYWY">
		 	 left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1
		 	<isNotEmpty prepend=" " property="map.YWY">
			 left join konka_pe_prod_user e on e.id=t1.user_id
			 left join konka_category f on f.c_index=a.customer_type
		 	</isNotEmpty>
		 </isNotEmpty>
		 <isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 <!-- 连接停/启用申请表 -->
		 left join (select * from KONKA_AUDIT_LIST_INFO where LINK_TYPE='r3_shop' AND BACK_ID='1') a_info on a_info.link_id=a.id
		 where 1 = 1
		 <isNotEmpty prepend=" and " property="map.is_sure1">a_info.STATUS = 0</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.is_sure2">(a_info.STATUS != 0 or a_info.status is null)</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.fgs_dept_value">cc.dept_id = #map.fgs_dept_value#</isNotEmpty>
		 <isEmpty prepend=" and " property="map.areas_ids"> a.is_konka = 1</isEmpty>
		 <isNotEmpty prepend=" and " property="map.user_name_like">
		 	e.user_name like '%' || #map.user_name_like:VARCHAR# || '%' 
		 </isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and  ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		 
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty> 
		 
		 <include refid="sf-konkaR3Shop" />
		 <isNotEmpty prepend=" and " property="map.is_kf">a.BRANCH_AREA_NAME_2  in ('KFDFD001','KF001','KFSF001') </isNotEmpty>
    	<isEmpty prepend=" and " property="map.is_kf">a.BRANCH_AREA_NAME_2  not  in ('KFDFD001','KF001','KFSF001') </isEmpty>
    	<isNotEmpty prepend=" and " property="map.cus_type1">kc.PAR_INDEX = #map.cus_type1#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.cus_type2">kc.C_INDEX = #map.cus_type2#</isNotEmpty>
		 <isNotEmpty prepend=" " property="map.OrderByHandle">order by handle_name</isNotEmpty>
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<resultMap id="KonkaR3ShopForCustVisitList" class="konkaR3Shop">
	<result column="CUSTOMER_CODE" property="map.customer_code" jdbcType="VARCHAR" />
	 <result column="CUSTOMER_NAME" property="map.customer_name" jdbcType="VARCHAR" />
	</resultMap>
	<select id="selectKonkaR3ShopForCustVisit" resultMap="KonkaR3ShopForCustVisitList" parameterClass="konkaR3Shop" >
		select a.customer_name,a.r3_code customer_code
		   from KONKA_R3_SHOP a
		 left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		 where 1=1
		 <isEmpty  prepend=" and " property="map.default">a.IS_DEL = 0</isEmpty>
		 <include refid="sf-konkaR3Shop" />
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and  ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id:DECIMAL#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty> 
		<isNotEmpty prepend=" and " property="map.cust_type">
			a.shop_status in
				<iterate close=")" open="(" conjunction="," property="map.cust_type">#map.cust_type[]#</iterate>
		</isNotEmpty> 
		
	order by customer_name
	</select>
	
	
	<!-- Hu,hao  2013-10-14-->
	<!-- R3客户管理统计记录数 -->
	<select id="selectKonkaR3ShopForYwyCount" resultClass="long" parameterClass="konkaR3Shop" >
		select count(1) from KONKA_R3_SHOP a 
			left join konka_dept cc on a.branch_area_name_2 = cc.dept_sn
			left join (select C_INDEX,PAR_INDEX,C_NAME from Konka_Category where is_del=0 and c_type=10) kc on a.CUSTOMER_TYPE=kc.C_INDEX
		<isNotEmpty property="map.is_assign">
		    <!-- @author Hui,Gang -->
		    <!-- @desc 当关联地区查询时处理 -->
			<isNotEmpty prepend=" " property="map.areas_ids">
				left join (select t1.*,t2.p_index from konka_r3_mmt_match t1 left join entp_shop t2 on t1.mmt_shop_id = t2.shop_id) d on a.id = d.r3_shop_id
				left join konka_base_province_list_four c on d.p_index = c.p_index 
			</isNotEmpty>
			<isEmpty prepend=" " property="map.key">left join konka_r3_mmt_match b on a.id = b.r3_shop_id </isEmpty>
			<!--@desc 取得匹配的网点信息时处理 -->
			<isNotEmpty prepend=" " property="map.key">
				left join (select t1.*,c.* from konka_r3_mmt_match t1 left join entp_shop c on t1.mmt_shop_id = c.shop_id) b on a.id = b.r3_shop_id
		    </isNotEmpty>
		    <isNotEmpty prepend=" " property="map.areas_ids">where c.par_index in ($map.areas_ids$) and a.is_konka = 1</isNotEmpty>
		 </isNotEmpty>
		 
		 <isNotEmpty property="map.unAssignYWY">
		 	 left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1
		 </isNotEmpty>
		 
		 <isNotEmpty property="map.leftYWY">
		 	 left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1
		 	<isNotEmpty prepend=" " property="map.YWY">
			 left join konka_pe_prod_user e on e.id=t1.user_id
			 left join konka_category f on f.c_index=a.customer_type
		 	</isNotEmpty>
		 </isNotEmpty>
		 
		 <isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 
		 <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 <isNotEmpty prepend=" " property="map.is_sure">
		    left join (select * from KONKA_AUDIT_LIST_INFO where LINK_TYPE='r3_shop' AND BACK_ID='1') a_info on a_info.link_id=a.id
		 </isNotEmpty>
		 where 1 = 1
		 <isNotEmpty prepend=" and " property="map.is_sure1">a_info.STATUS = 0</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.is_sure2">(a_info.STATUS != 0 or a_info.status is null)</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.fgs_dept_value">cc.dept_id = #map.fgs_dept_value#</isNotEmpty>
		 <isEmpty prepend=" and " property="map.areas_ids">a.is_konka = 1</isEmpty>
		 <isNotEmpty prepend=" and " property="map.user_name_like">
		 	e.user_name like '%' || #map.user_name_like:VARCHAR# || '%' 
		 </isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
					
		 <include refid="sf-konkaR3Shop" />
		 <isNotEmpty prepend=" and " property="map.is_kf">a.BRANCH_AREA_NAME_2  in ('KFDFD001','KF001','KFSF001') </isNotEmpty>
    	<isEmpty prepend=" and " property="map.is_kf">a.BRANCH_AREA_NAME_2  not  in ('KFDFD001','KF001','KFSF001') </isEmpty>
		 <isNotEmpty prepend=" " property="map.OrderByHandle">order by handle_name</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.cus_type1">kc.PAR_INDEX = #map.cus_type1#</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.cus_type2">kc.C_INDEX = #map.cus_type2#</isNotEmpty>
	</select>
	
	<!-- Xiao,GuoJian  2014-05-05-->
	<select id="selectKonkaR3ShopForR3CodePaginatedList" resultMap="konkaR3ShopResult" parameterClass="konkaR3Shop" >
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select a.*
		   from KONKA_R3_SHOP a	
		   left join konka_dept cc on a.branch_area_name_2 = cc.dept_sn	 
		 <isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 where 1 = 1
		 <isNotEmpty prepend=" and " property="map.fgs_dept_value">cc.dept_id = #map.fgs_dept_value#</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and  ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty> 
		 <include refid="sf-konkaR3Shop" />
<!-- 		 AND a.r3_code not in ((select distinct songdf_id from KONKA_PARTERSHIP) UNION (select distinct shoudf_id from KONKA_PARTERSHIP)) -->
<!-- 		 AND a.r3_code not in (select distinct songdf_id from KONKA_PARTERSHIP)  -->
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!-- Xiao,GuoJian  2014-05-05-->
	<select id="selectKonkaR3ShopForR3CodeCount" resultClass="long" parameterClass="konkaR3Shop" >
		select count(1) from KONKA_R3_SHOP a 
			left join konka_dept cc on a.branch_area_name_2 = cc.dept_sn
		<isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 where 1 = 1
		 <isNotEmpty prepend=" and " property="map.fgs_dept_value">cc.dept_id = #map.fgs_dept_value#</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and  ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty> 
		 <include refid="sf-konkaR3Shop" />
	</select>
	
	<select id="selectKonkaR3ShopPaginatedList" resultMap="konkaR3ShopResultForMMTShopList" parameterClass="konkaR3Shop" >
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select a.*,
		      (select real_name
		         from konka_pe_prod_user c
		        where c.id = a.import_user_id) as import_user_name
		 <isNotEmpty property="map.key">,b.shop_id,b.shop_name,b.is_rural,b.is_auth,b.p_index,b.main_pd,b.link_user,b.link_phone,b.street_addr</isNotEmpty>
	     <isEmpty property="map.key">,0 as shop_id, 0 as shop_name, 0 as is_rural,0 as is_auth, 0 as p_index, 0 as main_pd, 0 as link_user, 0 as link_phone, 0 as street_addr</isEmpty>
		 <isNotEmpty property="map.is_assign">,b.mmt_shop_id, b.mmt_shop_name</isNotEmpty>
		 <isEmpty property="map.is_assign">,0 as mmt_shop_id, 0 as mmt_shop_name</isEmpty>
		   from KONKA_R3_SHOP a
		  
		<isNotEmpty property="map.is_assign">
		    <!-- @author Hui,Gang -->
		    <!-- @desc 当关联地区查询时处理 -->
			<isNotEmpty prepend=" " property="map.areas_ids">
				left join (select t1.*,t2.p_index from konka_r3_mmt_match t1 left join entp_shop t2 on t1.mmt_shop_id = t2.shop_id) d on a.id = d.r3_shop_id
				left join konka_base_province_list_four c on d.p_index = c.p_index 
			</isNotEmpty>
			<isEmpty prepend=" " property="map.key">left join konka_r3_mmt_match b on a.id = b.r3_shop_id </isEmpty>
			<!--@desc 取得匹配的网点信息时处理 -->
			<isNotEmpty prepend=" " property="map.key">
				left join (select t1.*,c.* from konka_r3_mmt_match t1 left join entp_shop c on t1.mmt_shop_id = c.shop_id) b on a.id = b.r3_shop_id
		    </isNotEmpty>
		    <isNotEmpty prepend=" " property="map.areas_ids">where c.par_index in ($map.areas_ids$) and  a.is_konka = 1</isNotEmpty>
		 </isNotEmpty>
		 
		 <isNotEmpty property="map.unAssignYWY">
		 	 left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1
		 </isNotEmpty>
		 <isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 
		  <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 
		 where 1 = 1
		 <isEmpty prepend=" and " property="map.areas_ids">a.is_konka = 1</isEmpty>
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and ee.cur_dept_id in (
						select DISTINCT (dept_id) from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			 ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<include refid="sf-konkaR3Shop" />
		<isNotEmpty prepend=" " property="map.OrderByHandle">order by handle_name</isNotEmpty>
		<![CDATA[ ) t_  where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!-- 查询客户列表，是否已经结转和是否已经全部盘点 -->
	<select id="selectKonkaR3ShopWithJzAndPdCount" resultClass="long" parameterClass="konkaR3Shop" >
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select count(1) from
		(select a.*,
			case when (select count(*) from J_STOCKS_VERIFY jsv where jsv.C_ID=a.ID and jsv.TYPE=2 and to_char(jsv.OPR_DATE,'yyyy-MM')=to_char(sysdate,'yyyy-MM'))>0 then 1 else 0 end as is_jz,
	        case when (select count(*) from J_STOCKS_VERIFY jsv where jsv.C_ID=a.ID and jsv.TYPE=4 and to_char(jsv.OPR_DATE,'yyyy-MM')=to_char(sysdate-1 month,'yyyy-MM'))>0 then 1 else 0 end as is_pd
		  from KONKA_R3_SHOP a
		  left join
		   (SELECT shop.R3_CODE,
		       shop.CUSTOMER_NAME,
		       cust_type.C_COMM as PAR_CUSTOMER_TYPE_NAME,
		       cust_type.C_NAME as CUSTOMER_TYPE_NAME,
           cust_type.PAR_INDEX as PAR_CUSTOMER_TYPE,
           cust_type.C_INDEX as CUSTOMER_TYPE
		       FROM    KONKA_R3_SHOP shop
		       LEFT JOIN
		          KONKA_CATEGORY cust_type
		       ON shop.CUSTOMER_TYPE = cust_type.C_INDEX AND cust_type.C_TYPE = 10)
		   c_type on a.R3_CODE = c_type.R3_CODE
		 <isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 
		  <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		 </isNotEmpty>
		 
		 where 1 = 1
		 <isNotEmpty prepend=" and " property="map.cus_type1">c_type.PAR_CUSTOMER_TYPE = #map.cus_type1:DECIMAL#</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.cus_type2">c_type.CUSTOMER_TYPE = #map.cus_type2:DECIMAL#</isNotEmpty>
		 <isEmpty prepend=" and " property="map.areas_ids">a.is_konka = 1</isEmpty>
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and ee.cur_dept_id in (
						select DISTINCT (dept_id) from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			 ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<include refid="sf-konkaR3Shop" />
		<isNotEmpty prepend=" " property="map.OrderByHandle">order by handle_name</isNotEmpty>
		) where 1=1 
		<isNotEmpty prepend=" and " property="map.is_jz">is_jz = #map.is_jz:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_pd">is_pd = #map.is_pd:DECIMAL#</isNotEmpty>
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!-- 查询客户列表，是否已经结转和是否已经全部盘点 -->
	<select id="selectKonkaR3ShopWithJzAndPdList" resultMap="konkaR3ShopResultWithJzAndPdForList" parameterClass="konkaR3Shop" >
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select * from
		(select a.*,
			case when (select count(*) from J_STOCKS_VERIFY jsv where jsv.C_ID=a.ID and jsv.TYPE=2 and to_char(jsv.OPR_DATE,'yyyy-MM')=to_char(sysdate,'yyyy-MM'))>0 then 1 else 0 end as is_jz,
	        case when (select count(*) from J_STOCKS_VERIFY jsv where jsv.C_ID=a.ID and jsv.TYPE=4 and to_char(jsv.OPR_DATE,'yyyy-MM')=to_char(sysdate-1 month,'yyyy-MM'))>0 then 1 else 0 end as is_pd
		   ,c_type.PAR_CUSTOMER_TYPE_NAME,c_type.CUSTOMER_TYPE_NAME,ee.cur_dept_name EXT_HANDLE_NAME
		  from KONKA_R3_SHOP a
		  left join 
         (SELECT shop.R3_CODE,
		       shop.CUSTOMER_NAME,
		       cust_type.C_COMM as PAR_CUSTOMER_TYPE_NAME,
		       cust_type.C_NAME as CUSTOMER_TYPE_NAME,
           cust_type.PAR_INDEX as PAR_CUSTOMER_TYPE,
           cust_type.C_INDEX as CUSTOMER_TYPE
		       FROM    KONKA_R3_SHOP shop
		       LEFT JOIN
		          KONKA_CATEGORY cust_type
		       ON shop.CUSTOMER_TYPE = cust_type.C_INDEX AND cust_type.C_TYPE = 10)
         c_type on a.R3_CODE = c_type.R3_CODE
		
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		
		 
		  
		 
		 where 1 = 1
		 <isEmpty prepend=" and " property="map.areas_ids">a.is_konka = 1</isEmpty>
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and ee.cur_dept_id in (
						select DISTINCT (dept_id) from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			 ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<include refid="sf-konkaR3Shop" />
		<isNotEmpty prepend=" " property="map.OrderByHandle">order by handle_name</isNotEmpty>
		) where 1=1 
		<isNotEmpty prepend=" and " property="map.is_jz">is_jz = #map.is_jz:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_pd">is_pd = #map.is_pd:DECIMAL#</isNotEmpty>
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!-- 查询客户列表，是否已经结转和是否已经全部盘点 -->
	<select id="selectKonkaR3ShopWithJzAndPdPaginatedList" resultMap="konkaR3ShopResultWithJzAndPdForList" parameterClass="konkaR3Shop" >
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select * from
		(select a.*,
			case when (select count(*) from J_STOCKS_VERIFY jsv where jsv.C_ID=a.ID and jsv.TYPE=2 and to_char(jsv.OPR_DATE,'yyyy-MM')=to_char(sysdate,'yyyy-MM'))>0 then 1 else 0 end as is_jz,
	        case when (select count(*) from J_STOCKS_VERIFY jsv where jsv.C_ID=a.ID and jsv.TYPE=4 and to_char(jsv.OPR_DATE,'yyyy-MM')=to_char(sysdate-1 month,'yyyy-MM'))>0 then 1 else 0 end as is_pd
		  ,c_type.PAR_CUSTOMER_TYPE_NAME,c_type.CUSTOMER_TYPE_NAME,ee.cur_dept_name EXT_HANDLE_NAME
		  from KONKA_R3_SHOP a
		  left join 
           (SELECT shop.R3_CODE,
		       shop.CUSTOMER_NAME,
		       cust_type.C_COMM as PAR_CUSTOMER_TYPE_NAME,
		       cust_type.C_NAME as CUSTOMER_TYPE_NAME,
           cust_type.PAR_INDEX as PAR_CUSTOMER_TYPE,
           cust_type.C_INDEX as CUSTOMER_TYPE
		       FROM    KONKA_R3_SHOP shop
		       LEFT JOIN
		          KONKA_CATEGORY cust_type
		       ON shop.CUSTOMER_TYPE = cust_type.C_INDEX AND cust_type.C_TYPE = 10)
          c_type on a.R3_CODE = c_type.R3_CODE
		
		 	left join MV_ORG_OF_CUSTOMER ee on ee.konka_r3_id= a.id
		
		 
		 where 1 = 1
		 <isNotEmpty prepend=" and " property="map.cus_type1">c_type.PAR_CUSTOMER_TYPE = #map.cus_type1:DECIMAL#</isNotEmpty>
		 <isNotEmpty prepend=" and " property="map.cus_type2">c_type.CUSTOMER_TYPE = #map.cus_type2:DECIMAL#</isNotEmpty>
		 <isEmpty prepend=" and " property="map.areas_ids">a.is_konka = 1</isEmpty>
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and ee.cur_dept_id in (
						select DISTINCT (dept_id) from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			 ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<include refid="sf-konkaR3Shop" />
		<isNotEmpty prepend=" " property="map.OrderByHandle">order by handle_name</isNotEmpty>
		) where 1=1 
		<isNotEmpty prepend=" and " property="map.is_jz">is_jz = #map.is_jz:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_pd">is_pd = #map.is_pd:DECIMAL#</isNotEmpty>
		<![CDATA[ ) t_  where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!-- 取经办处 -->
	<select id="selectKonkaR3ShopPaginatedListForStat" resultMap="konkaR3ShopHandleNameResult" parameterClass="konkaR3Shop" >
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		
		  select distinct  handle_name ,id from konka_r3_shop  where 1=1
		 
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!-- 根据分公司取得该分公司下面的所有经办 -->
	<select id="selectJBDataBydeptName" resultMap="konkaR3ShopHandleNameResult2" parameterClass="konkaR3Shop" >
		 select distinct a.handle_name
			  from konka_r3_shop a
			 where 1 = 1
			<include refid="sf-konkaR3Shop" />
	</select>
	
	<select id="selectKonkaR3ShopPaginatedListGroupByName" resultMap="konkaR3ShopCustomerNameResult" parameterClass="konkaR3Shop" >
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		   select  DISTINCT  r3_code,customer_name
             FROM KONKA_R3_SHOP 
             WHERE 1        = 1
            AND r3_code IN
           (SELECT DISTINCT column_1 FROM CHANNEL_DATA_IMPORT  where 1=1 )
            <isNotEmpty prepend=" and " property="map.r3_code">R3_CODE = #map.r3_code:VARCHAR#</isNotEmpty>
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<select id="selectKonkaR3ShopCountByAddDate" resultClass="long" parameterClass="konkaR3Shop"  remapResults="true">
		select count(*)
		 from (
		<include refid="sf-konkaR3ShopByAddDate1" />
		  )a where 1 =1 
		<include refid="sf-konkaR3Shop" />
	</select>
	
	<!-- 根据数据上报时间取R3网点 -->
	<select id="selectKonkaR3ShopPaginatedListByAddDate" resultMap="konkaR3ShopResult" parameterClass="konkaR3Shop"  remapResults="true">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select *
		  from (
		<include refid="sf-konkaR3ShopByAddDate1" />
		  ) a where 1 =1 
		<include refid="sf-konkaR3Shop" />
		   order by s_id desc,a.id
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!-- Li Ka 网点端进货选择康佳品牌时，通过shop_id查询其代理商（供应商） 勿删 -->
	<select id="selectKonkaR3ShopByShopId" resultMap="konkaR3ShopResult" parameterClass="konkaR3Shop" >
		select a.* from konka_r3_shop a
 		where a.id = (select t.agents_id from konka_agents_shop_rel t where t.shop_id = #map.shop_id#)
		<include refid="sf-konkaR3Shop" />
		<!-- order by ID asc -->
	</select>
	<!-- wang yang 客户进销存搜索经办维度 -->
	<select id="selectKonkaR3ShopGroupByHandleName" resultMap="konkaR3ShopHandleNameResult" parameterClass="konkaR3Shop" >
	     select max(id) as id ,a.handle_name from konka_r3_shop a 
	     where 1 = 1
	     <include refid="sf-konkaR3Shop" />
	     group by handle_name
	</select>
	<!-- wang yang 客户进销存搜索分公司维度 -->
	<select id="selectKonkaR3ShopGroupByBranchAreaName" resultMap="konkaR3ShopBranchAreaNameResult" parameterClass="konkaR3Shop" >
	     select a.branch_area_name from konka_r3_shop a 
	     where 1 = 1
	     <include refid="sf-konkaR3Shop" />
	     group by branch_area_name
	</select>
	
	<!-- 取康佳R3网点所属分公司，Ren zhong，2013-06-09 -->
	<resultMap id="konkaR3ShopWithBranchAssignResult" class="konkaR3Shop" extends="konkaR3ShopResult">
		<result column="FGS_ID" property="map.fgs_id" jdbcType="DECIMAL" />
	</resultMap>
	
	<select id="selectKonkaR3ShopWithBranchAssign" resultMap="konkaR3ShopWithBranchAssignResult" parameterClass="konkaR3Shop">
		select a.*,t1.fgs_id
		  from branch_assign t1, KONKA_R3_SHOP a
		 where t1.konka_r3_id = a.id
		<include refid="sf-konkaR3Shop" />
	</select>
	
	<!-- 取分配的业务员  Hu,hao 2013-08-11 -->
	<resultMap id="konkaR3ShopResultByUserName" class="konkaR3Shop" extends="konkaR3ShopResult">
		<result column="REAL_NAME" property="map.real_name" jdbcType="VARCHAR" />
		<result column="C_NAME" property="map.c_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- xingxiudong @20130913 查询客户当月和去年同期的客户回款、结算信息，包括客户帐期余额 -->
	<select id="selectKonkaR3ShopSimpleStat" resultMap="konkaR3ShopSimpleStat" parameterClass="konkaR3Shop">
		<![CDATA[ 
		select t.ID, t.r3_code, t2.lastyear_cls_money,
		t1.cur_cls_money, t3.lastyear_back_money,
		t4.cur_back_money, t5.credit_balance, t5.credit_time
		from konka_r3_shop t

		left join (
		select t.column_1 r3_code, sum(t.column_14) / 10000 cur_cls_money from channel_data_import t
		where t.column_1 = #r3_code# and t.column_7 >= trunc(sysdate,'mm')
		group by t.column_1
		) t1 on t.r3_code = t1.r3_code

		left join (
		select column_1 r3_code, sum(t.column_14) / 10000 lastyear_cls_money from channel_data_import t where t.column_1 =
		#r3_code#
		and t.column_7 >= trunc(add_months(sysdate, -12),'mm')
		and t.column_7 <= last_day(add_months(sysdate, -12))
		group by t.column_1
		) t2 on t.r3_code = t2.r3_code

		left join (
		select
		t.R3_CODE,
		case to_char(sysdate, 'mm')
		when '01' then t.COLUMN_1
		when '02' then t.COLUMN_2
		when '03' then t.COLUMN_4
		when '05' then
		t.COLUMN_5
		when '06' then t.COLUMN_6
		when '07' then t.COLUMN_7
		when '08' then t.COLUMN_8
		when '09' then t.COLUMN_9
		when
		'10' then t.COLUMN_10
		when '11' then t.COLUMN_11
		when '12' then t.COLUMN_12
		end lastyear_back_money
		from
		konka_r3_backmoney t
		where t.YEAR=to_char(sysdate,'yyyy') - 1 and t.R3_CODE=#r3_code#
		) t3 on t.r3_code = t3.r3_code

		left join (
		select
		t.R3_CODE,
		case to_char(add_months(sysdate, -12), 'mm')
		when '01' then t.COLUMN_1
		when '02' then t.COLUMN_2
		when
		'03' then t.COLUMN_4
		when '05' then t.COLUMN_5
		when '06' then t.COLUMN_6
		when '07' then t.COLUMN_7
		when '08' then
		t.COLUMN_8
		when '09' then t.COLUMN_9
		when '10' then t.COLUMN_10
		when '11' then t.COLUMN_11
		when '12' then t.COLUMN_12
		end
		cur_back_money
		from konka_r3_backmoney t
		where t.YEAR=to_char(sysdate,'yyyy') and t.R3_CODE=#r3_code#
		) t4 on t.r3_code = t4.r3_code

		left join(
		select t.KUNNR r3_code, t.LAST_UPDATE_TIME credit_time, FUNC_GET_R3CREDIT(t.KUNNR) credit_balance from KONKA_R3_SHOP_CREDIT t
		where
		t.KUNNR = #r3_code#
		) t5 on t.r3_code = t5.r3_code

		where t.r3_code = #r3_code#
		 ]]>
	</select>
	
	<!-- Hu,hao 2013-08-11 根据用户查询所能获取到的客户-->
	<select id="selectKonkaR3ShopListByUserName" resultMap="konkaR3ShopResultByUserName" parameterClass="konkaR3Shop" >
	 SELECT aa.*,cc.real_name,dd.c_name
  		FROM KONKA_R3_SHOP aa LEFT JOIN BRANCH_ASSIGN bb ON aa.ID = bb.KONKA_R3_ID
  			left join konka_pe_prod_user cc on bb. user_id = cc.id
  			left join konka_Category dd on aa.customer_type = dd.c_index
 			WHERE bb.BRANCH_TYPE = 1
 	<isNotEmpty prepend=" and " property="map.dept_id">bb.fgs_id = #map.dept_id:DECIMAL# </isNotEmpty>
 	<isNotEmpty prepend=" and " property="map.jyb_id">bb.jyb_id = #map.jyb_id:DECIMAL# </isNotEmpty>
 	<isNotEmpty prepend=" and " property="map.bsc_id">bb.bsc_id = #map.bsc_id:DECIMAL# </isNotEmpty>
 	<isNotEmpty prepend=" and " property="map.user_id">bb.user_id = #map.user_id:DECIMAL# </isNotEmpty>
 	<isNotEmpty prepend=" and " property="map.customer_name_like">aa.customer_name like '%' || #map.customer_name_like:VARCHAR# || '%'</isNotEmpty>
 	<isNotEmpty prepend=" and " property="map.r3_code_like">aa.r3_code like '%' || #map.r3_code_like:VARCHAR# || '%'</isNotEmpty>
 	<isNotEmpty prepend=" and " property="map.user_name_like">cc.user_name like '%' || #map.map.user_name_like:VARCHAR# || '%'</isNotEmpty>
	</select>
	
	<!-- Liu,ZhiXiang 2013-09-23 根据p_index查询所能获取到的客户数量-->
	<select id="selectKonkaR3ShopCountByPIndex" resultMap="konkaR3ShopResultCountByPIndex" parameterClass="konkaR3Shop">
		   select aa.* from 
		   (
		   SELECT 
		   <isNotEmpty prepend=" " property="map.group_town">
		   		a.ENTP_P_INDEX as p_index,
		   		(select bp.p_name from KONKA_BASE_PROVINCE_LIST_FOUR bp where bp.p_index = a.ENTP_P_INDEX) as p_name,
		   </isNotEmpty>
		   <isEmpty prepend=" " property="map.group_town">
		   			<isNotEmpty prepend=" " property="map.group_country">
				   		substr(a.ENTP_P_INDEX,1,6) as p_index,
				   		(select bp.p_name from KONKA_BASE_PROVINCE_LIST_FOUR bp where bp.p_index = substr(a.ENTP_P_INDEX,1,6)) as p_name,
				    </isNotEmpty>
				    <isEmpty prepend=" " property="map.group_country">
				    	<isNotEmpty prepend=" " property="map.group_city">
					   		substr(a.ENTP_P_INDEX,1,4)||'00' as p_index,
					   		(select bp.p_name from KONKA_BASE_PROVINCE_LIST_FOUR bp where bp.p_index = substr(a.ENTP_P_INDEX,1,4)||'00') as p_name,
					    </isNotEmpty>
					    <isEmpty prepend=" " property="map.group_city">
					    	<isNotEmpty prepend=" " property="map.group_province">
						   		substr(a.ENTP_P_INDEX,1,2)||'0000' as p_index,
						   		(select bp.p_name from KONKA_BASE_PROVINCE_LIST_FOUR bp where bp.p_index = substr(a.ENTP_P_INDEX,1,2)||'0000') as p_name,
						    </isNotEmpty>
						    <isEmpty prepend=" " property="map.group_province">
						    	a.ENTP_P_INDEX as p_index,
		   						(select bp.p_name from KONKA_BASE_PROVINCE_LIST_FOUR bp where bp.p_index = a.ENTP_P_INDEX) as p_name,
						    </isEmpty>
					    </isEmpty>
				    </isEmpty>
		   	</isEmpty>
		   
		   count(a.ID) as num
		   FROM KONKA_R3_SHOP a 
		   where a.IS_DEL = 0 and a.ENTP_P_INDEX is not null
		   <isNotEmpty prepend=" and " property="map.town">a.ENTP_P_INDEX = #map.town#</isNotEmpty>
		   <isEmpty prepend=" " property="map.town">
		   		<isNotEmpty prepend=" and " property="map.country">a.ENTP_P_INDEX like substr(#map.country#,1,6) || '%'</isNotEmpty>
		   		<isEmpty prepend=" " property="map.country">
		   			<isNotEmpty prepend=" and " property="map.city">a.ENTP_P_INDEX like substr(#map.city#,1,4) || '%'</isNotEmpty>
		   			<isEmpty prepend=" " property="map.city">
		   				<isNotEmpty prepend=" and " property="map.province">a.ENTP_P_INDEX like substr(#map.province#,1,2) || '%'</isNotEmpty>
		   			</isEmpty>
		   		</isEmpty>
		   </isEmpty> 
		   
		   <isNotEmpty prepend=" and " property="map.province_ne">a.ENTP_P_INDEX != #map.province_ne#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.city_ne">a.ENTP_P_INDEX != #map.city_ne#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.country_ne">a.ENTP_P_INDEX != #map.country_ne#</isNotEmpty>
		   
		   <isNotEmpty prepend=" and " property="map.customer_par_index">a.customer_type in (select kc.c_index from konka_category kc where kc.par_index = #map.customer_par_index#)</isNotEmpty>
		   <isNotEmpty prepend=" and " property="customer_type">a.customer_type = #customer_type#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.add_date_start"><![CDATA[a.ADD_DATE >= to_date(#map.add_date_start#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.add_date_end"><![CDATA[a.ADD_DATE <= to_date(#map.add_date_end#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		   
		   <isNotEmpty prepend=" and " property="map.r3_money_gt"><![CDATA[ a.r3_code in (select cc.r3_code from (select c.column_1 as r3_code,value(sum(c.COLUMN_14),0) as r3_money from CHANNEL_DATA_IMPORT c where to_char(c.COLUMN_26,'yyyy') = to_char(sysdate,'yyyy') group by c.column_1) cc where cc.r3_money > #map.r3_money_gt#*10000) ]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.r3_money_lt"><![CDATA[ a.r3_code in (select cc.r3_code from (select c.column_1 as r3_code,value(sum(c.COLUMN_14),0) as r3_money from CHANNEL_DATA_IMPORT c where to_char(c.COLUMN_26,'yyyy') = to_char(sysdate,'yyyy') group by c.column_1) cc where cc.r3_money < #map.r3_money_lt#*10000) ]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.dept_id">a.ID in (select vc.KONKA_R3_ID from MV_ORG_OF_CUSTOMER vc where vc.DEPT_ID = #map.dept_id#)</isNotEmpty>
		   
		   <isNotEmpty prepend=" " property="map.group_town">GROUP BY a.ENTP_P_INDEX</isNotEmpty>
		   <isEmpty prepend=" " property="map.group_town">
		   		<isNotEmpty prepend=" " property="map.group_country">GROUP BY substr(a.ENTP_P_INDEX,1,6)</isNotEmpty>
		   		<isEmpty prepend=" " property="map.group_country">
		   			<isNotEmpty prepend=" " property="map.group_city">GROUP BY substr(a.ENTP_P_INDEX,1,4)</isNotEmpty>
		   			<isEmpty prepend=" " property="map.group_city">
		   				<isNotEmpty prepend=" " property="map.group_province">GROUP BY substr(a.ENTP_P_INDEX,1,2)</isNotEmpty>
		   			</isEmpty>
		   		</isEmpty>
		   </isEmpty>
		   ) aa order by aa.num desc
	</select>
	<!-- Liu,ZhiXiang 2013-09-23 根据p_index查询所能获取到的客户销售额-->
	<select id="selectKonkaR3ShopListByPIndex" resultMap="konkaR3ShopResultListByPIndex" parameterClass="konkaR3Shop">
		   select aa.* from 
		   (
		   SELECT a.R3_CODE,
	       a.CUSTOMER_NAME,
	       value (sum (b.ALL_PRICE), 0) AS sale_money,
	       value (sum (c.COLUMN_14), 0) AS r3_money
		   FROM KONKA_R3_SHOP a
		       LEFT JOIN KONKA_MOBILE_SAIL_DATA b
		          ON a.R3_CODE = b.CUSTOMER_R3_CODE AND b.IS_DEL = 0
		          <isNotEmpty prepend=" and " property="map.r3_money_gt">to_char(b.sale_date,'yyyy') = to_char(sysdate,'yyyy')</isNotEmpty>
		   		  <isNotEmpty prepend=" and " property="map.r3_money_lt">to_char(b.sale_date,'yyyy') = to_char(sysdate,'yyyy')</isNotEmpty>  
		       LEFT JOIN CHANNEL_DATA_IMPORT c
		          ON a.R3_CODE = c.column_1
		          <isNotEmpty prepend=" and " property="map.r3_money_gt">to_char(c.COLUMN_26,'yyyy') = to_char(sysdate,'yyyy')</isNotEmpty>
		   		  <isNotEmpty prepend=" and " property="map.r3_money_lt">to_char(c.COLUMN_26,'yyyy') = to_char(sysdate,'yyyy')</isNotEmpty>  
		   where a.IS_DEL = 0
		   <isNotEmpty prepend=" and " property="map.town">a.ENTP_P_INDEX = #map.town#</isNotEmpty>
		   <isEmpty prepend=" " property="map.town">
		   		<isNotEmpty prepend=" and " property="map.country">a.ENTP_P_INDEX like substr(#map.country#,1,6) || '%'</isNotEmpty>
		   		<isEmpty prepend=" " property="map.country">
		   			<isNotEmpty prepend=" and " property="map.city">a.ENTP_P_INDEX like substr(#map.city#,1,4) || '%' </isNotEmpty>
		   			<isEmpty prepend=" " property="map.city">
		   				<isNotEmpty prepend=" and " property="map.province">a.ENTP_P_INDEX like substr(#map.province#,1,2) || '%'</isNotEmpty>
		   			</isEmpty>
		   		</isEmpty>
		   </isEmpty> 
		   
		   <isNotEmpty prepend=" and " property="map.customer_par_index">a.customer_type in (select kc.c_index from konka_category kc where kc.par_index = #map.customer_par_index#)</isNotEmpty>
		   <isNotEmpty prepend=" and " property="customer_type">a.customer_type = #customer_type#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.add_date_start"><![CDATA[a.ADD_DATE >= to_date(#map.add_date_start#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.add_date_end"><![CDATA[a.ADD_DATE <= to_date(#map.add_date_end#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.dept_id">a.ID in (select vc.KONKA_R3_ID from MV_ORG_OF_CUSTOMER vc where vc.DEPT_ID = #map.dept_id#)</isNotEmpty>
		 	
		   GROUP BY a.R3_CODE, a.CUSTOMER_NAME) aa where 1 = 1
		   <isNotEmpty prepend=" and " property="map.r3_money_gt"><![CDATA[ aa.r3_money > #map.r3_money_gt#*10000 ]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.r3_money_lt"><![CDATA[ aa.r3_money < #map.r3_money_lt#*10000 ]]></isNotEmpty>
	</select>
	
	<!--@Hu,Hao 根据用户查询所关联的R3客户-->
	<select id="selectKonkaR3ShopForUserIdList" resultMap="konkaR3ShopResultForUserR3Code" parameterClass="konkaR3Shop" >
	<isNotEmpty property="row.count">
		<![CDATA[ select * from ( ]]>
	</isNotEmpty>
		select r3_code from MV_ORG_OF_CUSTOMER
		  where r3_code is not null
		  and user_id is not null
		  <isNotEmpty prepend=" and " property="map.fgs_user_id"> 
		 ( cur_dept_id in( SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.fgs_user_id#))
		  or cur_dept_id = #map.cur_dept_id#)             			
		  </isNotEmpty>
		  <isNotEmpty prepend=" and " property="map.ywy_id">                  			
		  and user_id = #map.ywy_id#
		  </isNotEmpty>                     
		group by r3_code
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!-- 取分公司匹配后的R3客户  Hu,hao 2013-10-28 -->
	<resultMap id="konkaR3ShopResultForOrder" class="konkaR3Shop">
		<result column="KONKA_R3_ID" property="map.konka_r3_id" jdbcType="VARCHAR" />
		<result column="R3_CODE" property="map.r3_code" jdbcType="VARCHAR" />
		<result column="USER_ID" property="map.user_id" jdbcType="VARCHAR" />
		<result column="DEPT_NAME" property="map.dept_name" jdbcType="VARCHAR" />
		<result column="MERGED_R3_CODE" property="map.merged_r3_code" jdbcType="VARCHAR" />
		<result column="YWY_USER_NAME" property="map.ywy_user_name" jdbcType="VARCHAR" />
		<result column="C_INDEX" property="map.c_index" jdbcType="VARCHAR" />
		<result column="C_NAME" property="map.c_name" jdbcType="VARCHAR" />
		<result column="CUSTOMER_NAME" property="map.customer_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<!--@Hu,Hao 2013-10-28 取分公司匹配后的R3客户-->
	<select id="selectKonkaR3ShopForOrderCount" resultClass="long" parameterClass="konkaR3Shop" >
		SELECT count(*) FROM MV_ORG_OF_CUSTOMER
		WHERE user_id IS NOT NULL and CUSTOMER_NAME IS NOT NULL
		 <isNotEmpty prepend=" and " property="map.dept_id_start">
			(cur_dept_id is not null and cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
		    user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>	
	  <isNotEmpty prepend=" and " property="map.ywy_id"> user_id = #map.ywy_id# </isNotEmpty>
	  <isNotEmpty prepend=" and " property="map.customer_name_like"> CUSTOMER_NAME like '%' || #map.customer_name_like# || '%'</isNotEmpty>
	  <isNotEmpty prepend=" and " property="r3_code">R3_CODE = #r3_code#</isNotEmpty>
      <isNotEmpty prepend=" and " property="map.dept_id">konka_r3_id in (select konka_r3_id from BRANCH_ASSIGN t where syb_id=#map.dept_id# or fgs_id=#map.dept_id# or jyb_id=#map.dept_id# or bsc_id=#map.dept_id# or user_id=#map.user_id#)</isNotEmpty>
	</select>
	
	<!--@Hu,Hao 2013-10-28 取分公司匹配后的R3客户-->
	<select id="selectKonkaR3ShopForOrderList" resultMap="konkaR3ShopResultForOrder" parameterClass="konkaR3Shop" >
	  <![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		  SELECT a.KONKA_R3_ID,
		       a.R3_CODE,
		       a.CUSTOMER_NAME,
		       a.DEPT_NAME,
		       a.MERGED_R3_CODE,
		       a.USER_ID,
		       a.YWY_USER_NAME,
		       b.C_INDEX,
		       b.C_NAME
		  FROM    (SELECT *
		             FROM MV_ORG_OF_CUSTOMER
		            WHERE user_id IS NOT NULL  
		            and CUSTOMER_NAME is not null
		           <isNotEmpty prepend=" and " property="map.dept_id_start">
					(cur_dept_id is not null and cur_dept_id in (
								select dept_id from konka_dept start with dept_id in (
								SELECT DISTINCT (dept_id)
				  							FROM KONKA_ROLE_DATA_LEVEL
				 							WHERE role_id IN (SELECT role_id
				                     			FROM KONKA_PE_ROLE_USER
				                    			WHERE user_id = #map.session_user_id#)
								) or dept_id = #map.dept_id_start# 
								connect by prior dept_id = par_id 
							)
					)
				</isNotEmpty>
				<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
						user_id = #map.filter_by_ywy_id_eq#
				</isNotEmpty>
			  <isNotEmpty prepend=" and " property="map.ywy_id"> user_id = #map.ywy_id# </isNotEmpty>
			  <isNotEmpty prepend=" and " property="map.customer_name_like"> CUSTOMER_NAME like '%' || #map.customer_name_like# || '%'</isNotEmpty>
		      <isNotEmpty prepend=" and " property="r3_code">R3_CODE = #r3_code#</isNotEmpty>
      		  <isNotEmpty prepend=" and " property="map.dept_id">konka_r3_id in (select konka_r3_id from BRANCH_ASSIGN t where syb_id=#map.dept_id# or fgs_id=#map.dept_id# or jyb_id=#map.dept_id# or bsc_id=#map.dept_id# or user_id=#map.user_id#)</isNotEmpty>
			  ) a
		       LEFT JOIN
		          KONKA_CATEGORY b
		       ON a.CUSTOMER_TYPE = b.C_INDEX
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!--@Hu,Hao 2013-12-04 客户库存查询-->
	<select id="selectKonkaR3ShopForStocksCount" resultClass="long" parameterClass="konkaR3Shop" >
		select count(1) from (
		select * from MQT_KONKA_STOCKS_PREVIEW a
		   left join konka_r3_shop b on a.c_id = b.id
		   left join BRANCH_ASSIGN c on a.c_id = c.KONKA_R3_ID
		   where 1 = 1
		<isNotEmpty prepend=" and " property="map.customer_name_like">a.CUSTOMER_NAME like '%' || #map.customer_name_like:VARCHAR# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code_like">UPPER(a.r3_code) like '%' || UPPER(#map.r3_code_like:VARCHAR#) || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.pd_name_like">UPPER(a.pd_name) like '%' || UPPER(#map.pd_name_like:VARCHAR#) || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.dept_sn">b.BRANCH_AREA_NAME_2 = #map.dept_sn:VARCHAR#</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.dept_id_start">
			(c.user_id is null and c.user_id in (
				select id from konka_pe_prod_user u
						where u.dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			c.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		)
	</select>
	
	<!--@Hu,Hao 2013-12-04 客户库存查询-->
	<resultMap id="konkaR3ShopResultForStock" class="konkaR3Shop">
		<result column="DEPT_NAME" property="map.dept_name" jdbcType="VARCHAR" />
		<result column="PD_NAME" property="map.pd_name" jdbcType="VARCHAR" />
		<result column="CUSTOMER_NAME" property="map.customer_name" jdbcType="VARCHAR" />
		<result column="PD_NAME" property="map.pd_name" jdbcType="VARCHAR" />
		<result column="R3_CODE" property="map.r3_code" jdbcType="VARCHAR" />
		<result column="INITCOUNT" property="map.initcount" jdbcType="DECIMAL" />
		<result column="TS" property="map.ts" jdbcType="TIMESTAMP" />
		<result column="INCOUNT" property="map.incount" jdbcType="DECIMAL" />
		<result column="INMONEY" property="map.inmoney" jdbcType="DECIMAL" />
		<result column="OUTCOUNT" property="map.outcount" jdbcType="DECIMAL" />
		<result column="OUTMONEY" property="map.outmoney" jdbcType="DECIMAL" />
		<result column="C_ID" property="map.c_id" jdbcType="DECIMAL" />
		<result column="STOCKS" property="map.stocks" jdbcType="DECIMAL" />
	</resultMap>
	
	<!--@Hu,Hao 2013-12-04 客户库存查询-->
	<select id="selectKonkaR3ShopForStocksList" resultMap="konkaR3ShopResultForStock" parameterClass="konkaR3Shop" >
	  <![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		  select a.*,b.BRANCH_AREA_NAME AS DEPT_NAME from MQT_KONKA_STOCKS_PREVIEW a
			   left join konka_r3_shop b on a.c_id = b.id
			   left join BRANCH_ASSIGN c on a.c_id = c.KONKA_R3_ID
			   where 1 = 1
		<isNotEmpty prepend=" and " property="map.customer_name_like">a.CUSTOMER_NAME like '%' || #map.customer_name_like:VARCHAR# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code_like">UPPER(a.r3_code) like '%' || UPPER(#map.r3_code_like:VARCHAR#) || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.pd_name_like">UPPER(a.pd_name) like '%' || UPPER(#map.pd_name_like:VARCHAR#) || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.dept_sn">b.BRANCH_AREA_NAME_2 = #map.dept_sn:VARCHAR#</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.dept_id_start">
			(c.user_id is null and c.user_id in (
				select id from konka_pe_prod_user u
						where u.dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			c.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!--@Zhang,Chao 2014-01-25 订货会参会客户自动提出-->
	<select id="selectKonkaR3ShopResultListByViewCustomerCount" resultClass="long" parameterClass="konkaR3Shop" >
	 select count(1) 
		from KONKA_R3_SHOP a
		left join konka_dept cc on a.branch_area_name_2 = cc.dept_sn
		left join MV_ORG_OF_CUSTOMER v on v.konka_r3_id= a.id
		left join KONKA_PE_PROD_USER pu on pu.ID = v.USER_ID
		where v.YWY_USER_NAME is not null
		<isNotEmpty prepend=" and " property="map.fgs_dept_value">cc.dept_id = #map.fgs_dept_value#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.fgs_user_id"> 
		 ( v.cur_dept_id in( SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.fgs_user_id#))
		  or v.cur_dept_id = #map.cur_dept_id#)             			
		  </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.dept_id_start">
			(v.user_id is not null and v.user_id in (
				select id from konka_pe_prod_user u
						where u.dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			v.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		
		<include refid="sf-konkaR3Shop" />
	</select>
	
	<!--@Zhang,Chao 2014-01-25 订货会参会客户自动提出-->
	<select id="selectKonkaR3ShopResultListByViewCustomerList" resultMap="konkaR3ShopResultListByViewCustomer" parameterClass="konkaR3Shop" >
	  <![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select DISTINCT a.*,v.R3_CODE,v.L4_DEPT_ID,v.L4_DEPT_NAME,v.USER_ID,v.YWY_USER_NAME,v.CUSTOMER_NAME,v.PAR_CUSTOMER_TYPE,v.PAR_CUSTOMER_TYPE_NAME,v.CUSTOMER_TYPE,v.CUSTOMER_TYPE_NAME,pu.JOB_ID
		from KONKA_R3_SHOP a
		left join konka_dept cc on a.branch_area_name_2 = cc.dept_sn
		left join MV_ORG_OF_CUSTOMER v on v.konka_r3_id= a.id
		left join KONKA_PE_PROD_USER pu on pu.ID = v.USER_ID
		where v.YWY_USER_NAME is not null
		<isNotEmpty prepend=" and " property="map.fgs_dept_value">cc.dept_id = #map.fgs_dept_value#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.fgs_user_id"> 
		 ( v.cur_dept_id in( SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.fgs_user_id#))
		  or v.cur_dept_id = #map.cur_dept_id#)             			
		  </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.dept_id_start">
			(v.user_id is not null and v.user_id in (
				select id from konka_pe_prod_user u
						where u.dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			v.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		
		<include refid="sf-konkaR3Shop" />
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>

	<select id="selectDeptIdByR3code" resultClass="long" parameterClass="String">
		select a.DEPT_ID
			from   KONKA_DEPT a, KONKA_R3_SHOP b
			where  a.DEPT_SN = b.BRANCH_AREA_NAME_2
			and    b.R3_CODE = #R3code#
	</select>
	
	<insert id="insertKonkaR3Shop" parameterClass="konkaR3Shop">
		<selectKey resultClass="long" keyProperty="id">select SEQ_KONKA_R3_SHOP.nextval as id from dual</selectKey>
		<![CDATA[insert into KONKA_R3_SHOP (]]>
		<dynamic prepend=" ">
			<isNotNull prepend="," property="id">ID</isNotNull>	
			<isNotNull prepend="," property="area_code">AREA_CODE</isNotNull>	
			<isNotNull prepend="," property="area_name">AREA_NAME</isNotNull>	
			<isNotNull prepend="," property="branch_area_code">BRANCH_AREA_CODE</isNotNull>	
			<isNotNull prepend="," property="branch_area_name">BRANCH_AREA_NAME</isNotNull>	
			<isNotNull prepend="," property="customer_type">CUSTOMER_TYPE</isNotNull>	
			<isNotNull prepend="," property="status">STATUS</isNotNull>	
			<isNotNull prepend="," property="r3_code">R3_CODE</isNotNull>	
			<isNotNull prepend="," property="handle_name">HANDLE_NAME</isNotNull>	
			<isNotNull prepend="," property="branch_area_code_2">BRANCH_AREA_CODE_2</isNotNull>	
			<isNotNull prepend="," property="branch_area_name_2">BRANCH_AREA_NAME_2</isNotNull>	
			<isNotNull prepend="," property="customer_code">CUSTOMER_CODE</isNotNull>	
			<isNotNull prepend="," property="customer_name">CUSTOMER_NAME</isNotNull>	
			<isNotNull prepend="," property="r3_desc">R3_DESC</isNotNull>	
			<isNotNull prepend="," property="merge_code_2010">MERGE_CODE_2010</isNotNull>	
			<isNotNull prepend="," property="import_date">IMPORT_DATE</isNotNull>	
			<isNotNull prepend="," property="import_user_id">IMPORT_USER_ID</isNotNull>	
			<isNotNull prepend="," property="is_del">IS_DEL</isNotNull>	
			<isNotNull prepend="," property="is_match">IS_MATCH</isNotNull>	
			<isNotNull prepend="," property="b_lng">B_LNG</isNotNull>
			<isNotNull prepend="," property="b_lat">B_LAT</isNotNull>
			<isNotNull prepend="," property="link_man_name">LINK_MAN_NAME</isNotNull>
			<isNotNull prepend="," property="link_man_tel">LINK_MAN_TEL</isNotNull>
			<isNotNull prepend="," property="link_man_mobile">LINK_MAN_MOBILE</isNotNull>
			<isNotNull prepend="," property="link_man_addr">LINK_MAN_ADDR</isNotNull>
			<isNotNull prepend="," property="link_man_post">LINK_MAN_POST</isNotNull>
			<isNotNull prepend="," property="host_name">HOST_NAME</isNotNull>
			<isNotNull prepend="," property="host_tel">HOST_TEL</isNotNull>
			<isNotNull prepend="," property="r3_sales_org_code">R3_SALES_ORG_CODE</isNotNull>
			
			<isNotNull prepend="," property="create_date">CREATE_DATE</isNotNull>	
			<isNotNull prepend="," property="last_year_money">LAST_YEAR_MONEY</isNotNull>	
			<isNotNull prepend="," property="last_year_back_money">LAST_YEAR_BACK_MONEY</isNotNull>	
			<isNotNull prepend="," property="entp_reg_money">ENTP_REG_MONEY</isNotNull>	
			<isNotNull prepend="," property="entp_scale">ENTP_SCALE</isNotNull>	
			<isNotNull prepend="," property="entp_man_count">ENTP_MAN_COUNT</isNotNull>	
			<isNotNull prepend="," property="entp_tel">ENTP_TEL</isNotNull>	
			<isNotNull prepend="," property="entp_birthday">ENTP_BIRTHDAY</isNotNull>	
			<isNotNull prepend="," property="entp_fax">ENTP_FAX</isNotNull>	
			<isNotNull prepend="," property="entp_post">ENTP_POST</isNotNull>	
			<isNotNull prepend="," property="entp_p_level">ENTP_P_LEVEL</isNotNull>	
			<isNotNull prepend="," property="entp_addr">ENTP_ADDR</isNotNull>	
			<isNotNull prepend="," property="entp_www">ENTP_WWW</isNotNull>	
			<isNotNull prepend="," property="entp_main_pds">ENTP_MAIN_PDS</isNotNull>	
			<isNotNull prepend="," property="entp_sale_area">ENTP_SALE_AREA</isNotNull>	
			<isNotNull prepend="," property="entp_inro">ENTP_INRO</isNotNull>	
			<isNotNull prepend="," property="entp_type">ENTP_TYPE</isNotNull>	
			<isNotNull prepend="," property="entp_p_index">ENTP_P_INDEX</isNotNull>	
			<isNotNull prepend="," property="is_konka">IS_KONKA</isNotNull>	
			<isNotNull prepend="," property="is_sdf">IS_SDF</isNotNull>
			<isNotNull prepend="," property="is_cassd">IS_CASSD</isNotNull>
			<isNotNull prepend="," property="is_loevm">IS_LOEVM</isNotNull>
			<isNotNull prepend="," property="is_minus_sales">IS_MINUS_SALES</isNotNull>
			<isNotNull prepend="," property="is_inventory">IS_INVENTORY</isNotNull>
			<isNotNull prepend="," property="web_type">WEB_TYPE</isNotNull>
			<isNotNull prepend="," property="shop_status">SHOP_STATUS</isNotNull>
			<isNotNull prepend="," property="stop_date">STOP_DATE</isNotNull>
			<isNotNull prepend="," property="add_name">ADD_NAME</isNotNull>
			<isNotNull prepend="," property="modify_user_id">MODIFY_USER_ID</isNotNull>
			,ADD_DATE
		</dynamic>
		<![CDATA[) values (]]>
		<dynamic prepend=" ">
			<isNotNull prepend="," property="id">#id:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="area_code">#area_code:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="area_name">#area_name:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="branch_area_code">#branch_area_code:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="branch_area_name">#branch_area_name:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="customer_type">#customer_type:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="status">#status:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="r3_code">#r3_code:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="handle_name">#handle_name:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="branch_area_code_2">#branch_area_code_2:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="branch_area_name_2">#branch_area_name_2:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="customer_code">#customer_code:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="customer_name">#customer_name:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="r3_desc">#r3_desc:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="merge_code_2010">#merge_code_2010:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="import_date">#import_date:DATE#</isNotNull>	
			<isNotNull prepend="," property="import_user_id">#import_user_id:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="is_del">#is_del:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="is_match">#is_match:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="b_lng">#b_lng:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="b_lat">#b_lat:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_name">#link_man_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_tel">#link_man_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_mobile">#link_man_mobile:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_addr">#link_man_addr:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_post">#link_man_post:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="host_name">#host_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="host_tel">#host_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="r3_sales_org_code">#r3_sales_org_code:VARCHAR#</isNotNull>		
			
			<isNotNull prepend="," property="create_date">#create_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="last_year_money">#last_year_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="last_year_back_money">#last_year_back_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="entp_reg_money">#entp_reg_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="entp_scale">#entp_scale:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_man_count">#entp_man_count:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_tel">#entp_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_birthday">#entp_birthday:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="entp_fax">#entp_fax:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_post">#entp_post:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_p_level">#entp_p_level:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_addr">#entp_addr:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_www">#entp_www:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_main_pds">#entp_main_pds:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_sale_area">#entp_sale_area:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_inro">#entp_inro:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_type">#entp_type:BIGINT#</isNotNull>
			<isNotNull prepend="," property="entp_p_index">#entp_p_index:BIGINT#</isNotNull>
			<isNotNull prepend="," property="is_konka">#is_konka:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_sdf">#is_sdf:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_cassd">#is_cassd:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_loevm">#is_loevm:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_minus_sales">#is_minus_sales:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_inventory">#is_inventory:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="web_type">#web_type:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="shop_status">#shop_status:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="stop_date">#stop_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="add_name">#add_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="modify_user_id">#MODIFY_USER_ID:DECIMAL#</isNotNull>
			,sysdate
		</dynamic>
		<![CDATA[)]]>
	</insert>

	<update id="updateKonkaR3Shop" parameterClass="konkaR3Shop">
		update KONKA_R3_SHOP
		<dynamic prepend="set">
			<isNotNull prepend="," property="id">ID = #id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="area_code">AREA_CODE = #area_code:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="area_name">AREA_NAME = #area_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="branch_area_code">BRANCH_AREA_CODE = #branch_area_code:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="branch_area_name">BRANCH_AREA_NAME = #branch_area_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_type">CUSTOMER_TYPE = #customer_type:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="status">STATUS = #status:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="r3_code">R3_CODE = #r3_code:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="handle_name">HANDLE_NAME = #handle_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="branch_area_code_2">BRANCH_AREA_CODE_2 = #branch_area_code_2:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="branch_area_name_2">BRANCH_AREA_NAME_2 = #branch_area_name_2:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_code">CUSTOMER_CODE = #customer_code:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_name">CUSTOMER_NAME = #customer_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="r3_desc">R3_DESC = #r3_desc:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="merge_code_2010">MERGE_CODE_2010 = #merge_code_2010:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="import_date">IMPORT_DATE = #import_date:DATE#</isNotNull>
			<isNotNull prepend="," property="import_user_id">IMPORT_USER_ID = #import_user_id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_del">IS_DEL = #is_del:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_match">IS_MATCH = #is_match:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="b_lng">B_LNG = #b_lng:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="b_lat">B_LAT = #b_lat:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_name">LINK_MAN_NAME = #link_man_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_tel">LINK_MAN_TEL = #link_man_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_mobile">LINK_MAN_MOBILE = #link_man_mobile:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_addr">LINK_MAN_ADDR = #link_man_addr:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_post">LINK_MAN_POST = #link_man_post:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="host_name">HOST_NAME = #host_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="host_tel">HOST_TEL = #host_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="add_date">ADD_DATE = #add_date:DATE#</isNotNull>
			<isNotNull prepend="," property="r3_sales_org_code">R3_SALES_ORG_CODE = #r3_sales_org_code:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="create_date">CREATE_DATE = #create_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="last_year_money">LAST_YEAR_MONEY = #last_year_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="last_year_back_money">LAST_YEAR_BACK_MONEY = #last_year_back_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="entp_reg_money">ENTP_REG_MONEY = #entp_reg_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="entp_scale">ENTP_SCALE = #entp_scale:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_man_count">ENTP_MAN_COUNT = #entp_man_count:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_tel">ENTP_TEL = #entp_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_birthday">ENTP_BIRTHDAY = #entp_birthday:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="entp_fax">ENTP_FAX = #entp_fax:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_post">ENTP_POST = #entp_post:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_p_level">ENTP_P_LEVEL = #entp_p_level:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_addr">ENTP_ADDR = #entp_addr:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_www">ENTP_WWW = #entp_www:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_main_pds">ENTP_MAIN_PDS = #entp_main_pds:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_sale_area">ENTP_SALE_AREA = #entp_sale_area:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_inro">ENTP_INRO = #entp_inro:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_type">ENTP_TYPE = #entp_type:BIGINT#</isNotNull>
			<isNotNull prepend="," property="entp_p_index">ENTP_P_INDEX = #entp_p_index:BIGINT#</isNotNull>
			<isNotNull prepend="," property="is_konka">IS_KONKA = #is_konka:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_sdf">IS_SDF = #is_sdf:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_cassd">IS_CASSD = #is_cassd:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_loevm">IS_LOEVM = #is_loevm:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_minus_sales">IS_MINUS_SALES = #is_minus_sales:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_inventory">IS_INVENTORY = #is_inventory:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="web_type">WEB_TYPE = #web_type:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="shop_status">SHOP_STATUS = #shop_status:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="branch_name">BRANCH_NAME = #branch_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="stop_date">STOP_DATE = #stop_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="add_name">ADD_NAME = #add_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="modify_user_id">MODIFY_USER_ID = #modify_user_id:DECIMAL#</isNotNull>
		</dynamic>
		where 1=1
		<isNotEmpty prepend=" and " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" and " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
			
		<isNotNull prepend=" and " property="r3_code">R3_CODE = #r3_code:VARCHAR#</isNotNull>
	</update>

	<delete id="deleteKonkaR3Shop" parameterClass="konkaR3Shop">
		delete from KONKA_R3_SHOP where
		<isNotEmpty prepend=" " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</delete>


	<!-- R3合并客户查询总数 -->
	<select id="selectMergeR3ShopCount" resultClass="long" parameterClass="konkaR3Shop" >
		select count(1) from (
		<isNotEmpty prepend="" property="r3_code">
			select * from (
		</isNotEmpty>
		  select a.r3_code,(select min(SHOP_STATUS) from konka_r3_shop where customer_code=a.r3_code) SHOP_STATUS,
		    (select to_char(listagg(t.code_list, ',')) AS r3_code_list from (select r3_code,customer_code,r3_code||decode(is_del,1,'(停用)','(启用)') code_list from konka_r3_shop) t 
			where t.customer_code=a.r3_code),(select (case when (count(customer_code)=sum(is_del)) then 1 else 0 end) is_del from konka_r3_shop where customer_code=a.r3_code group by customer_code)
			from (select r3_code,customer_name,shop_status,area_name,add_date,create_date,is_sdf,is_del,id,
            branch_area_name_2,customer_type,b_lng from konka_r3_shop where r3_code in (select customer_code from konka_r3_shop where customer_code is not null)
		   	and BRANCH_AREA_NAME_2  not  in ('KFDFD001','KF001','KFSF001') and is_konka=1 
		   <isNotEmpty prepend=" and " property="customer_code">r3_CODE = #customer_code:VARCHAR#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="customer_name">customer_name = #customer_name:VARCHAR#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="customer_type">customer_type = #customer_type:DECIMAL#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.cust_type1">customer_type in (select c_index from konka_category where C_TYPE=10 and PAR_INDEX=#map.cust_type1:DECIMAL#)</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.date_begin"><![CDATA[to_char(add_date,'yyyy-MM-dd') >= #map.date_begin:VARCHAR#]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(add_date,'yyyy-MM-dd') <= #map.date_end:VARCHAR#]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="is_sdf">IS_SDF = #is_sdf:DECIMAL#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="area_name">AREA_NAME = #area_name:VARCHAR#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="branch_name">BRANCH_NAME = #branch_name:VARCHAR#</isNotEmpty>
		   ) a left join konka_dept b on a.branch_area_name_2 = b.dept_sn left join (select customer_code, count(1) cust_num from konka_r3_shop WHERE 1=1
		    group by customer_code) c on a.r3_code = c.customer_code
		   left join konka_category d on d.c_index=a.customer_type left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1 
		   left join konka_pe_prod_user e on e.id=t1.user_id
		   <isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		   </isNotEmpty>
		   <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		   </isNotEmpty>
		   WHERE 1=1 
		   <isNotEmpty prepend=" and " property="map.dept_id">b.dept_id = #map.dept_id:DECIMAL#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.fgs_dept_value">b.dept_id = #map.fgs_dept_value#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.ywy_name">e.user_name like '%'||#map.ywy_name:VARCHAR#||'%'</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and  ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		 </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<isNotEmpty prepend="" property="r3_code">
			) tt where r3_code_list like '%'|| #r3_code:VARCHAR# || '%'
		</isNotEmpty>
		) t_ where r3_code_list is not null
		<isNotEmpty prepend=" and " property="is_del">is_del = #is_del:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="shop_status">SHOP_STATUS = #shop_status:VARCHAR#</isNotEmpty>
	</select>
	
	<!-- R3合并客户列表查询 -->
	<select id="selectMergeR3ShopList" resultClass="java.util.HashMap" parameterClass="konkaR3Shop" cacheModel="oneDayCache">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		<isNotEmpty prepend="" property="r3_code">
			select * from (
		</isNotEmpty>
		select b.dept_name,a.r3_code,a.customer_name,c.cust_num,d.c_name,a.shop_status,a.area_name,e.user_name,to_char(a.add_date,'yyyy-MM-dd') add_date,to_char(create_date,'yyyy-MM-dd') create_date,
			(select to_char(listagg(t.r3_code, ',')) AS r3_code_list from konka_r3_shop t where t.customer_code=a.r3_code
			<isNotEmpty prepend=" and " property="is_del">is_del = #is_del:DECIMAL#</isNotEmpty>
			),a.is_sdf,a.is_del,a.id,a.b_lng
		   from 
		   (
		   	select r3_code,customer_name,shop_status,area_name,add_date,create_date,is_sdf,is_del,id,branch_area_name_2,customer_type,b_lng from konka_r3_shop 
		   		where r3_code in (select customer_code from konka_r3_shop where customer_code is not null)
		   		and BRANCH_AREA_NAME_2  not  in ('KFDFD001','KF001','KFSF001') and is_konka=1
			   <isNotEmpty prepend=" and " property="customer_code">r3_CODE = #customer_code:VARCHAR#</isNotEmpty>
			   <isNotEmpty prepend=" and " property="customer_name">customer_name = #customer_name:VARCHAR#</isNotEmpty>
			   <isNotEmpty prepend=" and " property="customer_type">customer_type = #customer_type:DECIMAL#</isNotEmpty>
			   <isNotEmpty prepend=" and " property="map.cust_type1">customer_type in (select c_index from konka_category where C_TYPE=10 and PAR_INDEX=#map.cust_type1:DECIMAL#)</isNotEmpty>
			   <isNotEmpty prepend=" and " property="is_del">is_del = #is_del:DECIMAL#</isNotEmpty>
			   <isNotEmpty prepend=" and " property="map.date_begin"><![CDATA[to_char(add_date,'yyyy-MM-dd') >= #map.date_begin:VARCHAR#]]></isNotEmpty>
			   <isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(add_date,'yyyy-MM-dd') <= #map.date_end:VARCHAR#]]></isNotEmpty>
			   <isNotEmpty prepend=" and " property="is_sdf">IS_SDF = #is_sdf:DECIMAL#</isNotEmpty>
			   <isNotEmpty prepend=" and " property="shop_status">SHOP_STATUS = #shop_status:VARCHAR#</isNotEmpty>
			   <isNotEmpty prepend=" and " property="area_name">AREA_NAME = #area_name:VARCHAR#</isNotEmpty>
			   <isNotEmpty prepend=" and " property="branch_name">BRANCH_NAME = #branch_name:VARCHAR#</isNotEmpty>
		   ) a
		   left join konka_dept b on a.branch_area_name_2 = b.dept_sn 
		   left join (select customer_code, count(1) cust_num from konka_r3_shop group by customer_code) c on a.r3_code = c.customer_code
		   left join konka_category d on d.c_index=a.customer_type
		   left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1 
		   left join konka_pe_prod_user e on e.id=t1.user_id
		   <isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		   </isNotEmpty>
		   <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		   </isNotEmpty>
		   where 1=1 
		   <isNotEmpty prepend=" and " property="map.dept_id">b.dept_id = #map.dept_id:DECIMAL#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.fgs_dept_value">b.dept_id = #map.fgs_dept_value#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.ywy_name">e.user_name like '%'||#map.ywy_name:VARCHAR#||'%'</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and  ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		 </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<isNotEmpty prepend="" property="r3_code">
			) tt where r3_code_list like '%'|| #r3_code:VARCHAR# || '%'
		</isNotEmpty>  
		ORDER  BY b.dept_name
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)  
		and r3_code_list is not null
		) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!-- 统计交易客户数 -->
	<select id="selectMergeR3ShopcustCount" resultClass="long" parameterClass="konkaR3Shop" >
		select nvl(sum(cust_num),0) from (
		<isNotEmpty prepend="" property="r3_code">
			select * from (
		</isNotEmpty>
		  select a.r3_code,c.cust_num,(select min(SHOP_STATUS) from konka_r3_shop where customer_code=a.r3_code) SHOP_STATUS,
		    (select to_char(listagg(t.code_list, ',')) AS r3_code_list from (select r3_code,customer_code,r3_code||decode(is_del,1,'(停用)','(启用)') code_list from konka_r3_shop) t 
			where t.customer_code=a.r3_code),(select (case when (count(customer_code)=sum(is_del)) then 1 else 0 end) is_del from konka_r3_shop where customer_code=a.r3_code group by customer_code)
			from (select r3_code,customer_name,shop_status,area_name,add_date,create_date,is_sdf,is_del,id,
            branch_area_name_2,customer_type,b_lng from konka_r3_shop where r3_code in (select customer_code from konka_r3_shop where customer_code is not null)
		   	and BRANCH_AREA_NAME_2  not  in ('KFDFD001','KF001','KFSF001') and is_konka=1 
		   <isNotEmpty prepend=" and " property="customer_code">r3_CODE = #customer_code:VARCHAR#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="customer_name">customer_name = #customer_name:VARCHAR#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="customer_type">customer_type = #customer_type:DECIMAL#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.cust_type1">customer_type in (select c_index from konka_category where C_TYPE=10 and PAR_INDEX=#map.cust_type1:DECIMAL#)</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.date_begin"><![CDATA[to_char(add_date,'yyyy-MM-dd') >= #map.date_begin:VARCHAR#]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(add_date,'yyyy-MM-dd') <= #map.date_end:VARCHAR#]]></isNotEmpty>
		   <isNotEmpty prepend=" and " property="is_sdf">IS_SDF = #is_sdf:DECIMAL#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="area_name">AREA_NAME = #area_name:VARCHAR#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="branch_name">BRANCH_NAME = #branch_name:VARCHAR#</isNotEmpty>
		   ) a left join konka_dept b on a.branch_area_name_2 = b.dept_sn left join (select customer_code, count(1) cust_num from konka_r3_shop WHERE 1=1
		    group by customer_code) c on a.r3_code = c.customer_code
		   left join konka_category d on d.c_index=a.customer_type left join branch_assign t1 on t1.konka_r3_id = a.id and t1.branch_type = 1 
		   left join konka_pe_prod_user e on e.id=t1.user_id
		   <isNotEmpty prepend=" " property="map.dept_id_start">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		   </isNotEmpty>
		   <isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq">
		 	left join MV_ORG_OF_CUSTOMER_ALL ee on ee.konka_r3_id= a.id
		   </isNotEmpty>
		   WHERE 1=1 
		   <isNotEmpty prepend=" and " property="map.dept_id">b.dept_id = #map.dept_id:DECIMAL#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.fgs_dept_value">b.dept_id = #map.fgs_dept_value#</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.ywy_name">e.user_name like '%'||#map.ywy_name:VARCHAR#||'%'</isNotEmpty>
		   <isNotEmpty prepend=" and " property="map.dept_id_start">
			(ee.cur_dept_id is not null and  ee.cur_dept_id in (
						select dept_id from konka_dept start with dept_id in (
						SELECT DISTINCT (dept_id)
		  							FROM KONKA_ROLE_DATA_LEVEL
		 							WHERE role_id IN (SELECT role_id
		                     			FROM KONKA_PE_ROLE_USER
		                    			WHERE user_id = #map.session_user_id#)
						) or dept_id = #map.dept_id_start# 
						connect by prior dept_id = par_id 
					)
			)
		 </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			ee.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<isNotEmpty prepend="" property="r3_code">
			) tt where r3_code_list like '%'|| #r3_code:VARCHAR# || '%'
		</isNotEmpty>
		) t_ where r3_code_list is not null
		<isNotEmpty prepend=" and " property="is_del">is_del = #is_del:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="shop_status">SHOP_STATUS = #shop_status:VARCHAR#</isNotEmpty>
	</select>
	
	<!-- 根据R3编码查询客户记录 新开户时同步客户使用 -->
	<select id="selectKonkaR3ShopByR3Code" resultMap="konkaR3ShopResult" parameterClass="konkaR3Shop" >
	select * from konka_r3_shop
	 where 1 = 1
	<isNotEmpty prepend=" and " property="r3_code">R3_CODE = #r3_code:VARCHAR#</isNotEmpty>
	</select>
	
	<!-- 存储过程查询合并客户列表 -->
	<parameterMap class="java.util.HashMap" id="cursorMap">
		<parameter property="I_DEPT_ID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_MERGE_CODE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_R3_CODE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_MERGE_NAME" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_MERGE_TYPE1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_MERGE_TYPE2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_YWY_NAME" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_IS_STOP" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_DATE_BE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_DATE_ED" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_IS_SDF" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_CUST_STAT" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_AREA_NAME" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_BRANCH" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="FIRST_ROW" jdbcType="VARCHAR" javaType="java.lang.Integer" mode="IN"/>
		<parameter property="COUNT_ROW" jdbcType="VARCHAR" javaType="java.lang.Integer" mode="IN"/>
		<parameter property="I_DEPT_START" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_YWY_ID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="SESSION_ID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="I_FGS_ID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="SQL_CODE" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
	</parameterMap>
	
	<procedure id="queryMergeR3List" parameterMap="cursorMap" resultClass="java.util.HashMap">
		{call SELECT_MERGE_SHOP(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}
	</procedure>
	
	
	<!-- 查询用于创建网点的客户列表 -->
	<select id="selectShopForAgent" resultMap="konkaR3ShopResult" parameterClass="konkaR3Shop" >
		select * from konka_r3_shop a
	 	  where a.BRANCH_AREA_NAME_2 not in ('KFDFD001','KF001','KFSF001')
	 	<include refid="sf-konkaR3Shop" />
	 	order by customer_name
	</select>
	
	
	<!-- 自动变更客户状态 -->
	<procedure id="changeShopStatus" resultClass="long" cacheModel="oneDayCache">
		${call AUTO_UPDATE_SHOP()}
	</procedure>
	
	<!-- 审核后更新客户数据 -->
	<update id="modifyKonkaR3ShopByID" parameterClass="konkaR3Shop">
		update KONKA_R3_SHOP
		<dynamic prepend="set">
			<isNotNull prepend="," property="id">ID = #id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="area_code">AREA_CODE = #area_code:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="area_name">AREA_NAME = #area_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="branch_area_code">BRANCH_AREA_CODE = #branch_area_code:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="branch_area_name">BRANCH_AREA_NAME = #branch_area_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_type">CUSTOMER_TYPE = #customer_type:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="status">STATUS = #status:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="r3_code">R3_CODE = #r3_code:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="handle_name">HANDLE_NAME = #handle_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="branch_area_code_2">BRANCH_AREA_CODE_2 = #branch_area_code_2:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="branch_area_name_2">BRANCH_AREA_NAME_2 = #branch_area_name_2:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_code">CUSTOMER_CODE = #customer_code:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_name">CUSTOMER_NAME = #customer_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="r3_desc">R3_DESC = #r3_desc:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="merge_code_2010">MERGE_CODE_2010 = #merge_code_2010:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="import_date">IMPORT_DATE = #import_date:DATE#</isNotNull>
			<isNotNull prepend="," property="import_user_id">IMPORT_USER_ID = #import_user_id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_del">IS_DEL = #is_del:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_match">IS_MATCH = #is_match:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="b_lng">B_LNG = #b_lng:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="b_lat">B_LAT = #b_lat:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_name">LINK_MAN_NAME = #link_man_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_tel">LINK_MAN_TEL = #link_man_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_mobile">LINK_MAN_MOBILE = #link_man_mobile:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_addr">LINK_MAN_ADDR = #link_man_addr:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="link_man_post">LINK_MAN_POST = #link_man_post:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="host_name">HOST_NAME = #host_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="host_tel">HOST_TEL = #host_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="add_date">ADD_DATE = #add_date:DATE#</isNotNull>
			<isNotNull prepend="," property="r3_sales_org_code">R3_SALES_ORG_CODE = #r3_sales_org_code:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="create_date">CREATE_DATE = #create_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="last_year_money">LAST_YEAR_MONEY = #last_year_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="last_year_back_money">LAST_YEAR_BACK_MONEY = #last_year_back_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="entp_reg_money">ENTP_REG_MONEY = #entp_reg_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="entp_scale">ENTP_SCALE = #entp_scale:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_man_count">ENTP_MAN_COUNT = #entp_man_count:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_tel">ENTP_TEL = #entp_tel:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_birthday">ENTP_BIRTHDAY = #entp_birthday:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="entp_fax">ENTP_FAX = #entp_fax:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_post">ENTP_POST = #entp_post:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_p_level">ENTP_P_LEVEL = #entp_p_level:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_addr">ENTP_ADDR = #entp_addr:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_www">ENTP_WWW = #entp_www:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_main_pds">ENTP_MAIN_PDS = #entp_main_pds:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_sale_area">ENTP_SALE_AREA = #entp_sale_area:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_inro">ENTP_INRO = #entp_inro:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="entp_type">ENTP_TYPE = #entp_type:BIGINT#</isNotNull>
			<isNotNull prepend="," property="entp_p_index">ENTP_P_INDEX = #entp_p_index:BIGINT#</isNotNull>
			<isNotNull prepend="," property="is_konka">IS_KONKA = #is_konka:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_sdf">IS_SDF = #is_sdf:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_cassd">IS_CASSD = #is_cassd:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_loevm">IS_LOEVM = #is_loevm:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_minus_sales">IS_MINUS_SALES = #is_minus_sales:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="is_inventory">IS_INVENTORY = #is_inventory:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="web_type">WEB_TYPE = #web_type:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="shop_status">SHOP_STATUS = #shop_status:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="branch_name">BRANCH_NAME = #branch_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="stop_date">STOP_DATE = #stop_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="add_name">ADD_NAME = #add_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="modify_user_id">MODIFY_USER_ID = #modify_user_id:DECIMAL#</isNotNull>
		</dynamic>
		where 1=1
		<isNotEmpty prepend=" and " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" and " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</update>
</sqlMap>