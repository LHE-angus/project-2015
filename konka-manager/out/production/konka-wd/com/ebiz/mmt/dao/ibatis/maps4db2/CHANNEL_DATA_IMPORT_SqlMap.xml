<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="CHANNEL_DATA_IMPORT">
	<typeAlias alias="channelDataImport" type="com.ebiz.mmt.domain.ChannelDataImport" />

	<resultMap id="channelDataImportResultForList" class="channelDataImport">
		<result column="ID" property="id" jdbcType="DECIMAL" />
		<result column="IMPORT_DATE" property="import_date" jdbcType="DATETIME" />
		<result column="IMPORT_UID" property="import_uid" jdbcType="DECIMAL" />
		<result column="COLUMN_1" property="column_1" jdbcType="VARCHAR" />
		<result column="COLUMN_2" property="column_2" jdbcType="VARCHAR" />
		<result column="COLUMN_3" property="column_3" jdbcType="VARCHAR" />
		<result column="COLUMN_4" property="column_4" jdbcType="VARCHAR" />
		<result column="COLUMN_5" property="column_5" jdbcType="VARCHAR" />
		<result column="COLUMN_6" property="column_6" jdbcType="VARCHAR" />
		<result column="COLUMN_7" property="column_7" jdbcType="DATETIME" />
		<result column="COLUMN_8" property="column_8" jdbcType="VARCHAR" />
		<result column="COLUMN_9" property="column_9" jdbcType="VARCHAR" />
		<result column="COLUMN_10" property="column_10" jdbcType="VARCHAR" />
		<result column="COLUMN_11" property="column_11" jdbcType="VARCHAR" />
		<result column="COLUMN_12" property="column_12" jdbcType="VARCHAR" />
		<result column="COLUMN_13" property="column_13" jdbcType="DECIMAL" />
		<result column="COLUMN_14" property="column_14" jdbcType="DECIMAL" />
		<result column="COLUMN_15" property="column_15" jdbcType="DECIMAL" />
		<result column="COLUMN_16" property="column_16" jdbcType="DECIMAL" />
		<result column="COLUMN_17" property="column_17" jdbcType="DECIMAL" />
		<result column="COLUMN_18" property="column_18" jdbcType="DATETIME" />
		<result column="COLUMN_19" property="column_19" jdbcType="VARCHAR" />
		<result column="COLUMN_20" property="column_20" jdbcType="VARCHAR" />
		<result column="COLUMN_21" property="column_21" jdbcType="VARCHAR" />
		<result column="COLUMN_22" property="column_22" jdbcType="VARCHAR" />
		<result column="COLUMN_23" property="column_23" jdbcType="VARCHAR" />
		<result column="COLUMN_24" property="column_24" jdbcType="VARCHAR" />
		<result column="COLUMN_25" property="column_25" jdbcType="VARCHAR" />
		<result column="COLUMN_26" property="column_26" jdbcType="DATETIME" />
		<result column="COLUMN_27" property="column_27" jdbcType="DECIMAL" />
		<result column="COLUMN_28" property="column_28" jdbcType="DECIMAL" />
		<result column="COLUMN_29" property="column_29" jdbcType="DECIMAL" />
		<result column="COLUMN_30" property="column_30" jdbcType="DECIMAL" />
	</resultMap>
	
	
	<resultMap id="groupByPdStatResultForList" class="channelDataImport">
		<result column="COLUMN_11" property="column_11" jdbcType="VARCHAR" />
		<result column="COLUMN_12" property="column_12" jdbcType="VARCHAR" />
		<result column="COLUMN_14" property="column_14" jdbcType="DECIMAL" />
		<result column="COLUMN_5" property="column_5" jdbcType="DECIMAL" />
		<result column="COLUMN_13" property="column_13" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="channelDataImportResult" class="channelDataImport" extends="channelDataImportResultForList">

	</resultMap>
	
	<!-- 分公司销售业绩排名 -->
	<resultMap id="channelDataImportForFgsTopResult" class="channelDataImport">
		<result column="DEPT_ID" property="map.dept_id" jdbcType="DECIMAL" />
		<result column="DEPT_SN" property="map.dept_sn" jdbcType="VARCHAR" />
		<result column="DEPT_NAME" property="map.dept_name" jdbcType="VARCHAR" />
		<result column="CUR_MONEY_OF_MONTH_TASK" property="map.cur_money_of_month_task" jdbcType="DECIMAL" />
		<result column="RATIO" property="map.ratio" jdbcType="DECIMAL" />
		<result column="HS_MONEY" property="map.hs_money" jdbcType="DECIMAL" />
		<result column="HS_NUM" property="map.hs_num" jdbcType="DECIMAL" />
		<result column="L_HS_MONEY" property="map.l_hs_money" jdbcType="DECIMAL" />
		<result column="D3_NUM" property="map.d3_num" jdbcType="DECIMAL" />
		<result column="INT_NUM" property="map.int_num" jdbcType="DECIMAL" />
		<result column="DB_NUM" property="map.db_num" jdbcType="DECIMAL" />
		<result column="PB_NUM" property="map.pb_num" jdbcType="DECIMAL" />
		<result column="RW_WCL" property="map.rw_wcl" jdbcType="DECIMAL" />
		<result column="TB_ZZL" property="map.tb_zzl" jdbcType="DECIMAL" />
		<result column="D3_ZB" property="map.d3_zb" jdbcType="DECIMAL" />
		<result column="DB_ZB" property="map.db_zb" jdbcType="DECIMAL" />
		<result column="PRICE" property="map.price" jdbcType="DECIMAL" />
		<result column="ALL_PRICE" property="map.all_price" jdbcType="DECIMAL" />
		<result column="NUM" property="map.num" jdbcType="DECIMAL" />
	</resultMap>
	
	<!-- 大区业绩排名 -->
	<resultMap id="channelDataImportForAreaTopResult" class="channelDataImport">
		<result column="P_AREA" property="map.p_area" jdbcType="VARCHAR" />
		<result column="CUR_MONEY_OF_MONTH_TASK" property="map.cur_money_of_month_task" jdbcType="DECIMAL" />
		<result column="RATIO" property="map.ratio" jdbcType="DECIMAL" />
		<result column="HS_MONEY" property="map.hs_money" jdbcType="DECIMAL" />
		<result column="HS_NUM" property="map.hs_num" jdbcType="DECIMAL" />
		<result column="L_HS_MONEY" property="map.l_hs_money" jdbcType="DECIMAL" />
		<result column="D3_NUM" property="map.d3_num" jdbcType="DECIMAL" />
		<result column="INT_NUM" property="map.int_num" jdbcType="DECIMAL" />
		<result column="DB_NUM" property="map.db_num" jdbcType="DECIMAL" />
		<result column="PB_NUM" property="map.pb_num" jdbcType="DECIMAL" />
		<result column="RW_WCL" property="map.rw_wcl" jdbcType="DECIMAL" />
		<result column="TB_ZZL" property="map.tb_zzl" jdbcType="DECIMAL" />
		<result column="D3_ZB" property="map.d3_zb" jdbcType="DECIMAL" />
		<result column="DB_ZB" property="map.db_zb" jdbcType="DECIMAL" />
		<result column="PRICE" property="map.price" jdbcType="DECIMAL" />
		<result column="ALL_PRICE" property="map.all_price" jdbcType="DECIMAL" />
		<result column="NUM" property="map.num" jdbcType="DECIMAL" />
	</resultMap>
	
	<!-- 任务达成分析表 -->
	<resultMap id="channelDataImportForRwWcFxResult" class="channelDataImport">
		<result column="M" property="map.m" jdbcType="DECIMAL" />
		<result column="CUR_MONEY_OF_MONTH_TASK" property="map.cur_money_of_month_task" jdbcType="DECIMAL" />
		<result column="RATIO" property="map.ratio" jdbcType="DECIMAL" />
		<result column="TOTAL_MONEY" property="map.total_money" jdbcType="DECIMAL" />
		<result column="L_TOTAL_MONEY" property="map.l_total_money" jdbcType="DECIMAL" />
		<result column="YD_DCL" property="map.yd_dcl" jdbcType="DECIMAL" />
		<result column="TQ_ZZl" property="map.tq_zzl" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="channelDataImportToStat" class="channelDataImport">
		<result column="COLUMN_1" property="column_1" jdbcType="VARCHAR" />
		<result column="COLUMN_11" property="column_11" jdbcType="VARCHAR" />
		<result column="NUM" property="map.num" jdbcType="DECIMAL" />
		<result column="PRICE" property="map.price" jdbcType="DECIMAL" />
		<result column="TOTAL" property="map.total" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="channelDataImportWithR3ShopResult" class="channelDataImport" extends="channelDataImportResultForList">
		<result column="COLUMN_04" property="map.column_04" jdbcType="VARCHAR" />
		<result column="COLUMN_06" property="map.column_06" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap id="channelDataImportResultToSum" class="channelDataImport" extends="channelDataImportResultForList">
		<result column="PD_ID" property="map.pd_id" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="channelDataImportToModel" class="channelDataImport">
		<result column="MODEL" property="map.model" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="sf-channelDataImportStat">
		<isNotEmpty prepend="," property="map.date1">
			column_7 having
			<isNotEmpty prepend=" and " property="map.date_start"><![CDATA[to_char(COLUMN_7,'mmDD') >=to_char (to_date(#map.date_start#,'yyyy-MM-dd hh24:mi:ss'),'mmDD')]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'mmDD') <= to_char (to_date(#map.date_end#,'yyyy-MM-dd hh24:mi:ss','mmDD')]]></isNotEmpty>
		</isNotEmpty>
		<isNotEmpty prepend="," property="map.date2">
			column_7 having
			<isNotEmpty prepend=" and " property="map.date_start"><![CDATA[to_char(COLUMN_7,'yyyymm') >=to_char (to_date(#map.date_start#,'yyyy-MM-dd hh24:mi:ss'),'yyyymm')]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymm') <= to_char (to_date(#map.date_end#,'yyyy-MM-dd hh24:mi:ss','yyyymm')]]></isNotEmpty>
		</isNotEmpty>
	</sql>

	<sql id="sf-channelDataImport">
		<isNotEmpty prepend=" and " property="id">ID = #id:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="import_date">IMPORT_DATE = #import_date:DATETIME#</isNotEmpty>
		<isNotEmpty prepend=" and " property="import_uid">IMPORT_UID = #import_uid:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_1">COLUMN_1 = #column_1:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code">COLUMN_1 = #map.r3_code:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_2">COLUMN_2 = #column_2:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_3">COLUMN_3 = #column_3:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_4">COLUMN_4 = #column_4:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.column_4">COLUMN_4 like '%' || #column_4:VARCHAR#|| '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_5">COLUMN_5 = #column_5:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_6">COLUMN_6 = #column_6:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_7">COLUMN_7 = #column_7:DATETIME#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_8">COLUMN_8 = #column_8:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_9">COLUMN_9 = #column_9:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_10">COLUMN_10 = #column_10:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_11">COLUMN_11 = #column_11:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.column_11">COLUMN_11 = #map.column_11:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_12">COLUMN_12 = #column_12:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_13">COLUMN_13 = #column_13:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.column_13">COLUMN_13 is null</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_14">COLUMN_14 = #column_14:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_15">COLUMN_15 = #column_15:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_16">COLUMN_16 = #column_16:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_17">COLUMN_17 = #column_17:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_18">COLUMN_18 = #column_18:DATETIME#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_19">COLUMN_19 = #column_19:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_20">COLUMN_20 = #column_20:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_21">COLUMN_21 = #column_21:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_22">COLUMN_22 = #column_22:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_23">COLUMN_23 = #column_23:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_24">COLUMN_24 = #column_24:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_25">COLUMN_25 = #column_25:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_26">COLUMN_26 = #column_26:DATETIME#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_27">COLUMN_27 = #column_27:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_28">COLUMN_28 = #column_28:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_29">COLUMN_29 = #column_29:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_30">COLUMN_30 = #column_30:DECIMAL#</isNotEmpty>

		<isNotEmpty prepend=" and " property="map.startDate1"><![CDATA[COLUMN_26 >= to_date(#map.startDate1#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.endDate1"><![CDATA[COLUMN_26 <= to_date(#map.endDate1#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.startDate"><![CDATA[COLUMN_7 >= to_date(#map.startDate#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.endDate"><![CDATA[COLUMN_7 <= to_date(#map.endDate#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.endDate_lt"><![CDATA[COLUMN_7 < to_date(#map.endDate_lt#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.s_date"><![CDATA[COLUMN_7 >= to_date(#map.s_date#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.e_date"><![CDATA[COLUMN_7 <= to_date(#map.e_date#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.import_date_gt"><![CDATA[column_26 > to_date(#map.import_date_gt#,'yyyy-mm-dd hh24:mi:ss')]]></isNotEmpty>

		<isNotEmpty prepend=" and " property="map.keyword">COLUMN_1 like '%' || #map.keyword# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.import_date">to_char(IMPORT_DATE) =#map.import_date#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.customer_name_like">COLUMN_4 like '%'|| #map.customer_name_like# ||'%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.column_8_like">COLUMN_8 like '%'|| #map.column_8_like# ||'%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.md_name_like">COLUMN_11 like '%' || #map.md_name_like# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.ywy_user_id">COLUMN_1 in (select r3_code from konka_r3_shop where id in (select konka_r3_id from BRANCH_ASSIGN t where user_id=#map.ywy_user_id#))</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.max_date">id in (select max(id) from CHANNEL_DATA_IMPORT)</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.num_equal">COLUMN_12=COLUMN_27</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.not_exists_kf">COLUMN_11 not like 'KF%'</isNotEmpty>
		
		
<!--      	客户端查r3单的tiao'jian	wangKunLin-->
<!--		<isNotEmpty prepend=" and " property="map.shop_cust_id">s2.id = #map.shop_cust_id#</isNotEmpty>-->
	</sql>

	<select id="selectChannelDataImport" resultMap="channelDataImportResult" parameterClass="channelDataImport">
		select * from CHANNEL_DATA_IMPORT where 1 = 1
		<include refid="sf-channelDataImport" />
		<![CDATA[ and rownum < 2 ]]>
	</select>

	<select id="selectChannelDataImportList" resultMap="channelDataImportToModel" parameterClass="channelDataImport">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select distinct t.column_11 as model from channel_data_import t where 1 = 1
		<include refid="sf-channelDataImport" />
		<isNotEmpty prepend=" " property="map.orderByDate">order by COLUMN_7 asc</isNotEmpty>
		<isEmpty prepend=" " property="map.orderByDate">
		</isEmpty>
	</select>

	<select id="selectChannelDataImportListForFifo" resultMap="channelDataImportResult" parameterClass="channelDataImport">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select * from channel_data_import t where 1 = 1
		<include refid="sf-channelDataImport" />
		<isNotEmpty prepend=" " property="map.orderByDate">order by COLUMN_7 asc</isNotEmpty>
		<isEmpty prepend=" " property="map.orderByDate">
		</isEmpty>
	</select>


	<select id="selectGroupByPdStatList" resultMap="groupByPdStatResultForList" parameterClass="channelDataImport">
		select column_11, sum(COLUMN_12) COLUMN_12, sum(COLUMN_14) COLUMN_14,COLUMN_5,avg(COLUMN_13) COLUMN_13  from channel_data_import where 1 = 1
		<include refid="sf-channelDataImport" />
		group by column_11,COLUMN_5
	</select>

	<!-- Hu,Hao 2013-09-14 分公司销售业绩排名-->
	<select id="selectChannelDataImportForFgsTop" resultMap="channelDataImportForFgsTopResult" parameterClass="channelDataImport">
	<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select * from ( SELECT t.*,
		   decode(CUR_MONEY_OF_MONTH_TASK,0,0,HS_MONEY/CUR_MONEY_OF_MONTH_TASK) *100 as rw_wcl,
		   decode(l_hs_money,0,0,(HS_MONEY-l_hs_money)/l_hs_money) * 100 as tb_zzl,
		   decode(pb_num,0,0,D3_NUM/pb_num)*100 as D3_ZB,
		   decode(pb_num,0,0,db_num/pb_num)*100 as DB_ZB,
		   decode(pb_num,0,0,(HS_MONEY * 10000)/pb_num) as price
		  FROM (SELECT aa.dept_id,
		               aa.dept_sn,
		               aa.dept_name,
		               decode (bb.CUR_MONEY_OF_MONTH_TASK, NULL, 0,bb.CUR_MONEY_OF_MONTH_TASK) AS CUR_MONEY_OF_MONTH_TASK,
		               decode (bb.RATIO, NULL, 0, bb.RATIO) * 100 AS RATIO,
		               decode (cc.HS_MONEY, NULL, 0, cc.HS_MONEY / 10000)  AS HS_MONEY,
		               decode (cc.hs_num, NULL, 0,cc.hs_num) AS hs_num,
		               decode (dd.l_hs_money, NULL, 0, dd.l_hs_money / 10000) AS l_hs_money,
		               decode (ee.D3_NUM, NULL, 0, ee.D3_NUM) AS D3_NUM,
		               decode (ff.INT_NUM, NULL, 0, ff.INT_NUM) AS INT_NUM,
		               decode (gg.db_num, NULL, 0, gg.db_num) AS db_num,
		               decode (hh.pb_num,null,0,hh.pb_num) as pb_num,
		               decode (mm.SAIL_NUM,null,0,mm.SAIL_NUM) as num,
                 decode (mm.SAIL_ALL_PPRICE,null,0,mm.SAIL_ALL_PPRICE/10000) as all_price
		          FROM konka_dept aa
		               LEFT JOIN V_A_DATA_OF_DEPT_TASK_fgs bb
		                  ON aa.dept_sn = bb.dept_sn
		               LEFT JOIN (SELECT  t12.P_SALES_ORG_CODE AS dept_sn,
		                                 sum (column_14) AS hs_money,
		                                 sum (column_12) AS hs_num
		                             FROM CHANNEL_DATA_IMPORT t11 left join KONKA_SALES_DEPT t12 
                                    on t11.COLUMN_25 = t12.SALES_ORG_CODE
		                           WHERE <![CDATA[t11.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   AND <![CDATA[t11.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY t12.P_SALES_ORG_CODE) cc
		                  ON aa.DEPT_SN = cc.DEPT_SN
		               LEFT JOIN (SELECT t22.P_SALES_ORG_CODE AS dept_sn,
		                                 sum (column_14) AS l_hs_money
		                            FROM CHANNEL_DATA_IMPORT t21 left join KONKA_SALES_DEPT t22
                                    on t21.COLUMN_25 = t22.SALES_ORG_CODE
		                           WHERE <![CDATA[t21.COLUMN_26 >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   AND <![CDATA[t21.COLUMN_26 <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY t22.P_SALES_ORG_CODE) dd
		                  ON aa.DEPT_SN = dd.DEPT_SN
		               LEFT JOIN (SELECT e3.P_SALES_ORG_CODE AS DEPT_SN1,
		                                 sum (COLUMN_12) AS d3_num
		                            FROM    CHANNEL_DATA_IMPORT e1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL e2
		                                 ON e1.COLUMN_11 = e2.MD_NAME
		                                 left join KONKA_SALES_DEPT e3
                                         on e1.COLUMN_25 = e3.SALES_ORG_CODE
		                           WHERE e2.LABEL_3D = 1
		                                 AND <![CDATA[e1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[e1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY e3.P_SALES_ORG_CODE) ee
		                  ON aa.DEPT_SN = ee.DEPT_SN1
		               LEFT JOIN (SELECT f3.P_SALES_ORG_CODE AS DEPT_SN2,
		                                 sum (COLUMN_12) AS int_num
		                            FROM    CHANNEL_DATA_IMPORT f1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL f2
		                                 ON f1.COLUMN_11 = f2.MD_NAME
		                                  left join KONKA_SALES_DEPT f3
                                         on f1.COLUMN_25 = f3.SALES_ORG_CODE
		                           WHERE f2.LABEL_INT = 1
		                                 AND <![CDATA[f1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                  		 AND <![CDATA[f1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY f3.P_SALES_ORG_CODE) ff
		                  ON aa.DEPT_SN = ff.DEPT_SN2
		               LEFT JOIN (SELECT g3.P_SALES_ORG_CODE AS DEPT_SN3,
		                                 sum (COLUMN_12) AS db_num
		                            FROM    CHANNEL_DATA_IMPORT g1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL g2
		                                 ON g1.COLUMN_11 = g2.MD_NAME
		                                 left join KONKA_SALES_DEPT g3
                                         on g1.COLUMN_25 = g3.SALES_ORG_CODE
		                           WHERE g2.MD_SIZE  is not null and  SMALLINT(g2.MD_SIZE) >= 46
		                                 AND <![CDATA[g1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[g1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY g3.P_SALES_ORG_CODE) gg
		                  ON aa.DEPT_SN = gg.DEPT_SN3
		                  LEFT JOIN (SELECT h3.P_SALES_ORG_CODE AS DEPT_SN4,
		                                 sum (COLUMN_12) AS pb_num
		                            FROM    CHANNEL_DATA_IMPORT h1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL h2
		                                 ON h1.COLUMN_11 = h2.MD_NAME
		                                 left join KONKA_SALES_DEPT h3
                                         on h1.COLUMN_25 = h3.SALES_ORG_CODE
		                           WHERE <![CDATA[h1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[h1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY h3.P_SALES_ORG_CODE) hh
		                  ON aa.DEPT_SN = hh.DEPT_SN4
		                  left join (select SUBCOMP_ID ,
                      		sum(m.num) as sail_num,
                      		sum(m.all_price) as sail_all_pprice
		                    from KONKA_MOBILE_SAIL_DATA m
		                    where <![CDATA[m.REPORT_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                     and <![CDATA[m.REPORT_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                     and m.IS_DEL = 0 and  m.num is not null and m.ALL_PRICE is not null
		                     and m.SUBCOMP_ID is not null
		                     group by SUBCOMP_ID
		                    ) mm on mm.SUBCOMP_ID = aa.dept_id
         WHERE aa.dept_type = 3 AND bb.Y = #map.this_year# AND bb.M = #map.this_month#) t) order by rw_wcl desc
		 <isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	
	<!-- 分公司销售业绩排名（回款） -->
	<resultMap id="channelDataImportForFgsHkTopResult" class="channelDataImport">
		<result column="DEPT_ID" property="map.dept_id" jdbcType="DECIMAL" />
		<result column="DEPT_SN" property="map.dept_sn" jdbcType="VARCHAR" />
		<result column="DEPT_NAME" property="map.dept_name" jdbcType="VARCHAR" />
		<result column="CUR_MONEY_OF_MONTH_TASK" property="map.cur_money_of_month_task" jdbcType="DECIMAL" />
		<result column="RATIO" property="map.ratio" jdbcType="DECIMAL" />
		<result column="HS_MONEY" property="map.hs_money" jdbcType="DECIMAL" />
		<result column="HS_NUM" property="map.hs_num" jdbcType="DECIMAL" />
		<result column="L_HS_MONEY" property="map.l_hs_money" jdbcType="DECIMAL" />
		<result column="D3_NUM" property="map.d3_num" jdbcType="DECIMAL" />
		<result column="INT_NUM" property="map.int_num" jdbcType="DECIMAL" />
		<result column="DB_NUM" property="map.db_num" jdbcType="DECIMAL" />
		<result column="PB_NUM" property="map.pb_num" jdbcType="DECIMAL" />
		<result column="RW_WCL" property="map.rw_wcl" jdbcType="DECIMAL" />
		<result column="TB_ZZL" property="map.tb_zzl" jdbcType="DECIMAL" />
		<result column="D3_ZB" property="map.d3_zb" jdbcType="DECIMAL" />
		<result column="DB_ZB" property="map.db_zb" jdbcType="DECIMAL" />
		<result column="PRICE" property="map.price" jdbcType="DECIMAL" />
		<result column="ALL_PRICE" property="map.all_price" jdbcType="DECIMAL" />
		<result column="NUM" property="map.num" jdbcType="DECIMAL" />
		<result column="HK_WCL" property="map.hk_wcl" jdbcType="DECIMAL" />
		<result column="HK_ZZL" property="map.hk_zzl" jdbcType="DECIMAL" />
		<result column="HK_MONEY" property="map.hk_money" jdbcType="DECIMAL" />
		<result column="TQ_HK_MONEY" property="map.tq_hk_money" jdbcType="DECIMAL" />
		<result column="K4_ZB" property="map.k4_zb" jdbcType="DECIMAL" />
		<result column="K4_NUM" property="map.k4_num" jdbcType="DECIMAL" />
		<result column="DR_HS_MONEY" property="map.dr_hs_money" jdbcType="DECIMAL" />
	</resultMap>
	
	<!-- Hu,Hao 2013-11-14 分公司销售业绩排名（回款）-->
	<select id="selectChannelDataImportForFgsHkTop" resultMap="channelDataImportForFgsHkTopResult" parameterClass="channelDataImport">
	<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select * from ( SELECT t.*,
		   decode(CUR_MONEY_OF_MONTH_TASK,0,0,HS_MONEY/CUR_MONEY_OF_MONTH_TASK) *100 as rw_wcl,
		   decode(l_hs_money,0,0,(HS_MONEY-l_hs_money)/l_hs_money) * 100 as tb_zzl,
		   decode(pb_num,0,0,D3_NUM/pb_num)*100 as D3_ZB,
		   decode(pb_num,0,0,db_num/pb_num)*100 as DB_ZB,
		   decode (pb_num, 0, 0, k4_num / pb_num) * 100 AS k4_ZB,
		   decode(pb_num,0,0,(HS_MONEY * 10000)/pb_num) as price,
		   decode(CUR_MONEY_OF_MONTH_TASK,0,0,hk_money/CUR_MONEY_OF_MONTH_TASK) * 100 as hk_wcl,
     	   decode(TQ_HK_MONEY,0,0,(hk_money-TQ_HK_MONEY)/TQ_HK_MONEY)*100 as hk_zzl
		  FROM (SELECT aa.dept_id,
		               aa.dept_sn,
		               aa.dept_name,
		               decode (bb.CUR_MONEY_OF_MONTH_TASK, NULL, 0,bb.CUR_MONEY_OF_MONTH_TASK) AS CUR_MONEY_OF_MONTH_TASK,
		               decode (bb.RATIO, NULL, 0, bb.RATIO) * 100 AS RATIO,
		               decode (cc.HS_MONEY, NULL, 0, cc.HS_MONEY / 10000)  AS HS_MONEY,
		               decode (cc.hs_num, NULL, 0,cc.hs_num) AS hs_num,
		               decode (yy.dr_hs_money, NULL, 0, yy.dr_hs_money / 10000) AS dr_hs_money,
		               decode (dd.l_hs_money, NULL, 0, dd.l_hs_money / 10000) AS l_hs_money,
		               decode (ee.D3_NUM, NULL, 0, ee.D3_NUM) AS D3_NUM,
		               decode (ff.INT_NUM, NULL, 0, ff.INT_NUM) AS INT_NUM,
		               decode (gg.db_num, NULL, 0, gg.db_num) AS db_num,
		               decode (hh.pb_num,null,0,hh.pb_num) as pb_num,
		               decode (mm.SAIL_NUM,null,0,mm.SAIL_NUM) as num,
		               decode (xx.k4_num, NULL, 0, xx.k4_num) AS k4_num,
	                   decode (mm.SAIL_ALL_PPRICE,null,0,mm.SAIL_ALL_PPRICE/10000) as all_price,
	                   decode (nn.HK_MONEY,null,0,nn.HK_MONEY) as hk_money,
	                   decode (pp.TQ_HK_MONEY,null,0,pp.TQ_HK_MONEY) as tq_hk_money
		          FROM konka_dept aa
		               LEFT JOIN V_A_DATA_OF_DEPT_TASK_fgs bb
		                  ON aa.dept_sn = bb.dept_sn
		               LEFT JOIN (SELECT  t12.P_SALES_ORG_CODE AS dept_sn,
		                                 sum (column_14) AS hs_money,
		                                 sum (column_12) AS hs_num
		                             FROM CHANNEL_DATA_IMPORT t11 left join KONKA_SALES_DEPT t12 
                                    on t11.COLUMN_25 = t12.SALES_ORG_CODE
		                           WHERE <![CDATA[t11.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   AND <![CDATA[t11.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY t12.P_SALES_ORG_CODE) cc
		                  ON aa.DEPT_SN = cc.DEPT_SN
		               LEFT JOIN (SELECT t22.P_SALES_ORG_CODE AS dept_sn,
		                                 sum (column_14) AS l_hs_money
		                            FROM CHANNEL_DATA_IMPORT t21 left join KONKA_SALES_DEPT t22
                                    on t21.COLUMN_25 = t22.SALES_ORG_CODE
		                           WHERE <![CDATA[t21.COLUMN_26 >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   AND <![CDATA[t21.COLUMN_26 <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY t22.P_SALES_ORG_CODE) dd
		                  ON aa.DEPT_SN = dd.DEPT_SN
		               LEFT JOIN (SELECT e3.P_SALES_ORG_CODE AS DEPT_SN1,
		                                 sum (COLUMN_12) AS d3_num
		                            FROM    CHANNEL_DATA_IMPORT e1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL e2
		                                 ON e1.COLUMN_11 = e2.MD_NAME
		                                 left join KONKA_SALES_DEPT e3
                                         on e1.COLUMN_25 = e3.SALES_ORG_CODE
		                           WHERE e2.LABEL_3D = 1
		                                 AND <![CDATA[e1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[e1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY e3.P_SALES_ORG_CODE) ee
		                  ON aa.DEPT_SN = ee.DEPT_SN1
		               LEFT JOIN (SELECT f3.P_SALES_ORG_CODE AS DEPT_SN2,
		                                 sum (COLUMN_12) AS int_num
		                            FROM    CHANNEL_DATA_IMPORT f1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL f2
		                                 ON f1.COLUMN_11 = f2.MD_NAME
		                                  left join KONKA_SALES_DEPT f3
                                         on f1.COLUMN_25 = f3.SALES_ORG_CODE
		                           WHERE f2.LABEL_INT = 1
		                                 AND <![CDATA[f1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                  		 AND <![CDATA[f1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY f3.P_SALES_ORG_CODE) ff
		                  ON aa.DEPT_SN = ff.DEPT_SN2
		               LEFT JOIN (SELECT g3.P_SALES_ORG_CODE AS DEPT_SN3,
		                                 sum (COLUMN_12) AS db_num
		                            FROM    CHANNEL_DATA_IMPORT g1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL g2
		                                 ON g1.COLUMN_11 = g2.MD_NAME
		                                 left join KONKA_SALES_DEPT g3
                                         on g1.COLUMN_25 = g3.SALES_ORG_CODE
		                           WHERE g2.MD_SIZE  is not null and  SMALLINT(g2.MD_SIZE) >= 46
		                                 AND <![CDATA[g1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[g1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY g3.P_SALES_ORG_CODE) gg
		                  ON aa.DEPT_SN = gg.DEPT_SN3
		                  LEFT JOIN (SELECT h3.P_SALES_ORG_CODE AS DEPT_SN4,
		                                 sum (COLUMN_12) AS pb_num
		                            FROM    CHANNEL_DATA_IMPORT h1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL h2
		                                 ON h1.COLUMN_11 = h2.MD_NAME
		                                 left join KONKA_SALES_DEPT h3
                                         on h1.COLUMN_25 = h3.SALES_ORG_CODE
		                           WHERE <![CDATA[h1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[h1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY h3.P_SALES_ORG_CODE) hh
		                  ON aa.DEPT_SN = hh.DEPT_SN4
		                  left join (select SUBCOMP_ID ,
                      		sum(m.num) as sail_num,
                      		sum(m.all_price) as sail_all_pprice
		                    from KONKA_MOBILE_SAIL_DATA m
		                    where <![CDATA[m.REPORT_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                     and <![CDATA[m.REPORT_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                     and m.IS_DEL = 0 and  m.num is not null and m.ALL_PRICE is not null
		                     and m.SUBCOMP_ID is not null
		                     group by SUBCOMP_ID
		                    ) mm on mm.SUBCOMP_ID = aa.dept_id
		                    LEFT JOIN (SELECT x3.P_SALES_ORG_CODE AS DEPT_SN5,
                                         sum (COLUMN_12) AS k4_num
                                    FROM CHANNEL_DATA_IMPORT x1
                                         LEFT JOIN KONKA_PE_PD_MODEL x2
                                            ON x1.COLUMN_11 = x2.MD_NAME
                                         LEFT JOIN KONKA_SALES_DEPT x3
                                            ON x1.COLUMN_25 = x3.SALES_ORG_CODE
                                   WHERE x2.is_4k = 1 and
                                   <![CDATA[x1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
                                   AND <![CDATA[x1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
                                  GROUP BY x3.P_SALES_ORG_CODE) xx  ON aa.DEPT_SN = xx.DEPT_SN5  
                          LEFT JOIN (SELECT y2.P_SALES_ORG_CODE AS dept_sn,
                                         sum (column_14) AS dr_hs_money
                                    FROM    CHANNEL_DATA_IMPORT y1
                                         LEFT JOIN
                                            KONKA_SALES_DEPT y2
                                         ON y1.COLUMN_25 = y2.SALES_ORG_CODE
                                   WHERE <![CDATA[y1.COLUMN_26 >= to_date(#map.this_day_s#,'yyyy-MM-dd hh24:mi:ss')]]>
                                         AND <![CDATA[y1.COLUMN_26 <= to_date(#map.this_day_e#,'yyyy-MM-dd hh24:mi:ss')]]>
                                  GROUP BY y2.P_SALES_ORG_CODE) yy ON aa.DEPT_SN = yy.DEPT_SN 
		                   left join(
							select sum($map.column_value$) as hk_money, P_SALES_ORG_CODE from KONKA_R3_BACKMONEY n1 left join 
							    konka_r3_shop n2 on n1.R3_CODE = n2.R3_CODE 
							    left join KONKA_SALES_DEPT n3 on n2.R3_SALES_ORG_CODE = n3.P_SALES_ORG_CODE
							  where n1.YEAR  = #map.this_year#
							  group by n3.P_SALES_ORG_CODE
		                   )nn on aa.dept_sn = nn.P_SALES_ORG_CODE
		                   left join(
							select sum($map.column_value$) as tq_hk_money, P_SALES_ORG_CODE from KONKA_R3_BACKMONEY p1 left join 
							    konka_r3_shop p2 on p1.R3_CODE = p2.R3_CODE 
							    left join KONKA_SALES_DEPT p3 on p2.R3_SALES_ORG_CODE = p3.P_SALES_ORG_CODE
							  where p1.YEAR  = #map.last_year#
							  group by p3.P_SALES_ORG_CODE
		                   )pp on aa.dept_sn = pp.P_SALES_ORG_CODE
         WHERE aa.dept_type = 3 AND bb.Y = #map.this_year# AND bb.M = #map.this_month#) t) order by rw_wcl desc
		 <isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!-- Hu,Hao 2013-12-18 分公司销售业绩排名之其他 -->
	<select id="selectChannelDataImportForFgsHkQt" resultMap="channelDataImportForFgsHkTopResult" parameterClass="channelDataImport">
	    <isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		SELECT aa.dept_id,
		       'qt' as dept_sn,
		       '其他' as dept_name,
		       0 as CUR_MONEY_OF_MONTH_TASK,
		       0 as ratio,
		       decode(aa.hs_money,null,0,aa.hs_money/10000) as hs_money,
		       aa.hs_num,
		       decode(bb.L_HS_MONEY,null,0,bb.L_HS_MONEY/10000) L_HS_MONEY,
		      decode(gg.DR_HS_MONEY,null,0,gg.DR_HS_MONEY/10000) DR_HS_MONEY,
		       cc.K4_NUM,
		       dd.INT_NUM,
		       ee.D3_NUM,
		       ff.db_num,
		       aa.hs_num as pb_num,
		       0 as num,
		       0 as price,
		       0 as all_price,
		       0 as hk_money,
		       0 as tq_hk_money,
		       0 as rw_wcl,
		       0 as hk_wcl,
		       0 as hk_zzl,
		       decode(L_HS_MONEY,null,0,0,0,(hs_money-L_HS_MONEY)/L_HS_MONEY) as tb_zzl,
		       decode(aa.hs_num,0,0,ff.db_num/aa.hs_num) as db_zb,
		       decode(aa.hs_num,0,0,ee.D3_NUM/aa.hs_num) as d3_zb,
		       decode(aa.hs_num,0,0,cc.K4_NUM/aa.hs_num) as k4_zb
		  FROM (SELECT -1 AS dept_id,sum (decode (column_27, NULL, 0, column_27) * decode (column_13, NULL, 0, column_13)) AS hs_money,
		               sum (decode (column_27, NULL, 0, column_27)) AS hs_num
		          FROM CHANNEL_DATA_IMPORT_2
		         WHERE column_1 LIKE '000100%'
		            and <![CDATA[COLUMN_31 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				    AND <![CDATA[COLUMN_31 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		         ) aa
		       LEFT JOIN (SELECT -1 AS dept_id, 
		           sum (decode (column_27,  NULL, 0, column_27) * decode (column_13, NULL, 0, column_13)) AS l_hs_money
		                    FROM CHANNEL_DATA_IMPORT_2
		                   WHERE  column_1 LIKE '000100%'
		                   and <![CDATA[COLUMN_31 >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				           AND <![CDATA[COLUMN_31 <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                   ) bb
		          ON aa.dept_id = bb.dept_id
		       LEFT JOIN (SELECT sum (decode (column_27, NULL, 0, column_27)) AS k4_num,
		                         -1 AS dept_id
		                    FROM    CHANNEL_DATA_IMPORT_2 a
		                         LEFT JOIN konka_pe_pd_model b
		                         ON a.COLUMN_11 = b.MD_NAME
		                   WHERE     column_1 LIKE '000100%' 
		                   		 and <![CDATA[a.COLUMN_31 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				    			 AND <![CDATA[a.COLUMN_31 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                         AND b.IS_4K = 1
		                         AND b.IS_DEL = 0
		                         ) cc ON aa.dept_id = cc.dept_id
		       LEFT JOIN (SELECT sum (decode (column_27,NULL, 0, column_27)) AS int_num,
		                         -1 AS dept_id
		                    FROM    CHANNEL_DATA_IMPORT_2 a
		                         LEFT JOIN
		                            konka_pe_pd_model b
		                         ON a.COLUMN_11 = b.MD_NAME
		                   WHERE     column_1 LIKE '000100%'
		                    	 and <![CDATA[a.COLUMN_31 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				    			 AND <![CDATA[a.COLUMN_31 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                         AND b.LABEL_INT = 1
		                         AND b.IS_DEL = 0
		                         ) dd
		          ON aa.dept_id = dd.dept_id
		       LEFT JOIN (SELECT sum (decode (column_27, NULL, 0, column_27)) AS d3_num, -1 AS dept_id
		                    FROM    CHANNEL_DATA_IMPORT_2 a
		                         LEFT JOIN
		                            konka_pe_pd_model b
		                         ON a.COLUMN_11 = b.MD_NAME
		                   WHERE     column_1 LIKE '000100%'
		                   		 and <![CDATA[a.COLUMN_31 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				    			 AND <![CDATA[a.COLUMN_31 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                         AND b.LABEL_3D = 1
		                         AND b.IS_DEL = 0) ee
		          ON aa.dept_id = ee.dept_id
		       LEFT JOIN (SELECT sum (decode (column_27, NULL, 0, column_27)) AS db_num,
		                         -1 AS dept_id
		                    FROM    CHANNEL_DATA_IMPORT_2 a
		                         LEFT JOIN
		                            konka_pe_pd_model b
		                         ON a.COLUMN_11 = b.MD_NAME
		                   WHERE     column_1 LIKE '000100%'
		                   		 and <![CDATA[a.COLUMN_31 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				    			 AND <![CDATA[a.COLUMN_31 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                         AND b.MD_size IS NOT NULL
		                         AND b.MD_SIZE >= 46
		                         AND b.IS_DEL = 0) ff
		          ON aa.dept_id = ff.dept_id
		       left join (SELECT -1 AS dept_id,sum (decode (column_27, NULL, 0, column_27) * decode (column_13, NULL, 0, column_13)) AS dr_hs_money   
		          FROM CHANNEL_DATA_IMPORT_2
		         WHERE 
		         <![CDATA[COLUMN_31 >= to_date(#map.this_day_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				 AND <![CDATA[COLUMN_31 <= to_date(#map.this_day_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		         and column_1 LIKE '000100%') gg on aa.DEPT_ID = gg.dept_id 		
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	
	<!-- Hu,Hao 2013-09-14 分公司销售业绩排名-->
	<select id="selectChannelDataImportForJybTop" resultMap="channelDataImportForAreaTopResult" parameterClass="channelDataImport">
	<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
	SELECT tt.*,
		decode(CUR_MONEY_OF_MONTH_TASK,0,0,HS_MONEY/CUR_MONEY_OF_MONTH_TASK) *100 as rw_wcl,
		decode(l_hs_money,0,0,(HS_MONEY-l_hs_money)/l_hs_money) * 100 as tb_zzl,
		decode(pb_num,0,0,D3_NUM/pb_num)*100 as D3_ZB,
		decode(pb_num,0,0,db_num/pb_num)*100 as DB_ZB,
		decode(pb_num,0,0,(HS_MONEY * 10000)/pb_num) as price  from
	    ( select t.P_AREA,
	       sum(CUR_MONEY_OF_MONTH_TASK) as CUR_MONEY_OF_MONTH_TASK,
	       sum (RATIO) as RATIO,
	       sum(HS_MONEY) as HS_MONEY,
	       sum(hs_num) as hs_num,
	       sum(l_hs_money) as l_hs_money,
	       sum(D3_NUM) as D3_NUM,
	       sum(INT_NUM) as INT_NUM,
	       sum(db_num) as db_num,
	       sum(pb_num) as pb_num,
	       sum(num) as num,
	       sum(all_price) as all_price
	     from( SELECT aa.p_area,
			     decode (bb.CUR_MONEY_OF_MONTH_TASK, NULL, 0,bb.CUR_MONEY_OF_MONTH_TASK) AS CUR_MONEY_OF_MONTH_TASK,
			     decode (bb.RATIO, NULL, 0, bb.RATIO) * 100 AS RATIO,
			     decode (cc.HS_MONEY, NULL, 0, cc.HS_MONEY / 10000)  AS HS_MONEY,
			     decode (cc.hs_num, NULL, 0,cc.hs_num) AS hs_num,
			     decode (dd.l_hs_money, NULL, 0, dd.l_hs_money / 10000) AS l_hs_money,
			     decode (ee.D3_NUM, NULL, 0, ee.D3_NUM) AS D3_NUM,
			     decode (ff.INT_NUM, NULL, 0, ff.INT_NUM) AS INT_NUM,
			     decode (gg.db_num, NULL, 0, gg.db_num) AS db_num,
			     decode (hh.pb_num,null,0,hh.pb_num) as pb_num,
	       decode (mm.SAIL_NUM,null,0,mm.SAIL_NUM) as num,
	       decode (mm.SAIL_ALL_PPRICE,null,0,mm.SAIL_ALL_PPRICE/10000) as all_price
			FROM konka_dept aa
		               LEFT JOIN V_A_DATA_OF_DEPT_TASK_fgs bb
		                  ON aa.dept_sn = bb.dept_sn
		               LEFT JOIN (SELECT column_25 AS dept_sn,
		                                 sum (column_14) AS hs_money,
		                                 sum (column_12) AS hs_num
		                            FROM CHANNEL_DATA_IMPORT
		                           WHERE <![CDATA[COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   AND <![CDATA[COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY column_25) cc
		                  ON aa.DEPT_SN = cc.DEPT_SN
		               LEFT JOIN (SELECT column_25 AS dept_sn,
		                                 sum (column_14) AS l_hs_money
		                            FROM CHANNEL_DATA_IMPORT
		                           WHERE <![CDATA[COLUMN_26 >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   AND <![CDATA[COLUMN_26 <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY column_25) dd
		                  ON aa.DEPT_SN = dd.DEPT_SN
		               LEFT JOIN (SELECT column_25 AS DEPT_SN1,
		                                 sum (COLUMN_12) AS d3_num
		                            FROM    CHANNEL_DATA_IMPORT e1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL e2
		                                 ON e1.COLUMN_11 = e2.MD_NAME
		                           WHERE e2.LABEL_3D = 1
		                                 AND <![CDATA[e1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[e1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY column_25) ee
		                  ON aa.DEPT_SN = ee.DEPT_SN1
		               LEFT JOIN (SELECT column_25 AS DEPT_SN2,
		                                 sum (COLUMN_12) AS int_num
		                            FROM    CHANNEL_DATA_IMPORT f1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL f2
		                                 ON f1.COLUMN_11 = f2.MD_NAME
		                           WHERE f2.LABEL_INT = 1
		                                 AND <![CDATA[f1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                  		 AND <![CDATA[f1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY column_25) ff
		                  ON aa.DEPT_SN = ff.DEPT_SN2
		               LEFT JOIN (SELECT column_25 AS DEPT_SN3,
		                                 sum (COLUMN_12) AS db_num
		                            FROM    CHANNEL_DATA_IMPORT g1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL g2
		                                 ON g1.COLUMN_11 = g2.MD_NAME
		                           WHERE g2.MD_SIZE  is not null and  SMALLINT(g2.MD_SIZE) >= 46
		                                 AND <![CDATA[g1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[g1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY column_25) gg
		                  ON aa.DEPT_SN = gg.DEPT_SN3
		                  LEFT JOIN (SELECT column_25 AS DEPT_SN4,
		                                 sum (COLUMN_12) AS pb_num
		                            FROM    CHANNEL_DATA_IMPORT h1
		                                 LEFT JOIN
		                                    KONKA_PE_PD_MODEL h2
		                                 ON h1.COLUMN_11 = h2.MD_NAME
		                           WHERE <![CDATA[h1.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
				                   		 AND <![CDATA[h1.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                          GROUP BY column_25) hh
		                  ON aa.DEPT_SN = hh.DEPT_SN4
		                  left join (select SUBCOMP_ID ,
                      		sum(m.num) as sail_num,
                      		sum(m.all_price) as sail_all_pprice
		                    from KONKA_MOBILE_SAIL_DATA m
		                    where <![CDATA[m.REPORT_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                     and <![CDATA[m.REPORT_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                     and m.IS_DEL = 0 and  m.num is not null and m.ALL_PRICE is not null
		                     and m.SUBCOMP_ID is not null
		                     group by SUBCOMP_ID
		                    ) mm on mm.SUBCOMP_ID = aa.dept_id
         		WHERE aa.dept_type = 3 AND bb.Y = 2013 AND bb.M = 9 and p_area is not null
         		) t group by t.P_AREA) tt order by rw_wcl desc
		 <isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!-- Hu,Hao 2013-09-22 按月度任务分析 -->
	<select id="selectChannelDataImportListToMonth" resultMap="channelDataImportForRwWcFxResult" parameterClass="channelDataImport">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select tt.*,
		  decode(tt.CUR_MONEY_OF_MONTH_TASK,null,0,(tt.TOTAL_MONEY/tt.CUR_MONEY_OF_MONTH_TASK) * 100) as yd_dcl,
		  decode(tt.l_total_money,null,0,((decode(tt.TOTAL_MONEY,null,0,tt.TOTAL_MONEY) - l_total_money)/tt.l_total_money) * 100) as tq_zzl
		 from(SELECT bb.I as m ,
		        aa.TOTAL_MONEY/10000 as TOTAL_MONEY ,
		        cc.RATIO * 100 as RATIO, 
		        cc.CUR_MONEY_OF_MONTH_TASK,
		        aa1.TOTAL_MONEY /10000 as l_total_money
		  FROM (SELECT * FROM n WHERE  <![CDATA[i < 13]]>) bb
		       LEFT JOIN (SELECT t.m, sum (t.PD_TOTAL_MONEY) AS total_money
		                    FROM (SELECT a.*,
		                                 substr (to_char (a.create_date, 'yyyyMMdd'), 1, 4) AS y,
		                                 substr ( substr ( to_char (a.create_date, 'yyyyMMdd'), 5, 6), 1, 2) AS m
		                            FROM V_A_DETAILS_OF_PURCHASE_SaleOrg a
		                           WHERE     a.CREATE_DATE IS NOT NULL
										 <isNotEmpty prepend=" and " property="map.dept_id">a.dept_id = #map.dept_id#</isNotEmpty>
		                                 <![CDATA[and a.CREATE_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                 <![CDATA[and a.CREATE_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                 ) t
		                  GROUP BY t.m) aa
		          ON bb.I = aa.M
		       LEFT JOIN (SELECT c.M,sum (c.RATIO) AS ratio, sum (c.CUR_MONEY_OF_MONTH_TASK) AS CUR_MONEY_OF_MONTH_TASK
		                    FROM (SELECT a1.m, a1.RATIO, a1.CUR_MONEY_OF_MONTH_TASK
		                            FROM    V_A_DATA_OF_DEPT_TASK_fgs a1
		                                 LEFT JOIN
		                                    KONKA_DEPT b1
		                                 ON a1.DEPT_SN = b1.DEPT_SN
		                           WHERE a1.Y = #map.this_year# 
								   <isNotEmpty prepend=" and " property="map.dept_id">b1.dept_id = #map.dept_id#</isNotEmpty>
		                           ) c
		                  GROUP BY c.M) cc
		          ON bb.I = cc.m
		      LEFT JOIN (SELECT t.m, sum (t.PD_TOTAL_MONEY) AS total_money
		                    FROM (SELECT a.*,
		                                 substr (to_char (a.create_date, 'yyyyMMdd'), 1, 4) AS y,
		                                 substr ( substr ( to_char (a.create_date, 'yyyyMMdd'), 5, 6), 1, 2) AS m
		                            FROM V_A_DETAILS_OF_PURCHASE_SaleOrg a
		                           WHERE     a.CREATE_DATE IS NOT NULL
										<isNotEmpty prepend=" and " property="map.dept_id">a.dept_id = #map.dept_id#</isNotEmpty>
		                                <![CDATA[and a.CREATE_DATE >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                <![CDATA[and a.CREATE_DATE <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                ) t
		                  GROUP BY t.m) aa1
		          ON bb.I = aa1.M
		 ) tt     
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!-- Hu,Hao 2013-09-22 按季度任务分析 -->
	<select id="selectChannelDataImportListToSeason" resultMap="channelDataImportForRwWcFxResult" parameterClass="channelDataImport">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select tt.*,
		  decode(tt.CUR_MONEY_OF_MONTH_TASK,null,0,(tt.TOTAL_MONEY/tt.CUR_MONEY_OF_MONTH_TASK) * 100) as yd_dcl,
		  decode(tt.l_total_money,null,0,((decode(tt.TOTAL_MONEY,null,0,tt.TOTAL_MONEY) - l_total_money)/tt.l_total_money) * 100) as tq_zzl
		 from(SELECT bb.I as m ,
		        aa.TOTAL_MONEY/10000 as TOTAL_MONEY ,
		        cc.RATIO * 100 as RATIO, 
		        cc.CUR_MONEY_OF_MONTH_TASK,
		        aa1.TOTAL_MONEY /10000 as l_total_money
		  FROM (SELECT * FROM n WHERE <![CDATA[i < 5]]>) bb
		       LEFT JOIN (SELECT t.q, sum (t.PD_TOTAL_MONEY) AS total_money
		                    FROM (SELECT a.*,
		                                 decode( substr ( substr ( to_char (a.create_date, 'yyyyMMdd'), 5, 6), 1, 2),1,1,2,1,3,1,4,2,5,2,6,2,7,3,8,3,9,3,10,4,11,4,12,4 )AS Q
		                            FROM V_A_DETAILS_OF_PURCHASE_SaleOrg a
		                           WHERE     a.CREATE_DATE IS NOT NULL
										 <isNotEmpty prepend=" and " property="map.dept_id">a.dept_id = #map.dept_id#</isNotEmpty>
		                                 <![CDATA[and a.CREATE_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                 <![CDATA[and a.CREATE_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                 ) t
		                  GROUP BY t.q) aa
		          ON bb.I = aa.q
		       LEFT JOIN (SELECT c.q,sum (c.RATIO) AS ratio, sum (c.CUR_MONEY_OF_MONTH_TASK)AS CUR_MONEY_OF_MONTH_TASK
		                    FROM (SELECT a1.q, a1.RATIO, a1.CUR_MONEY_OF_MONTH_TASK
		                            FROM    V_A_DATA_OF_DEPT_TASK_fgs a1
		                                 LEFT JOIN
		                                    KONKA_DEPT b1
		                                 ON a1.DEPT_SN = b1.DEPT_SN
		                           WHERE a1.Y = #map.this_year# 
								   <isNotEmpty prepend=" and " property="map.dept_id">b1.dept_id = #map.dept_id#</isNotEmpty>
		                           ) c
		                  GROUP BY c.Q) cc
		          ON bb.I = cc.q
		      LEFT JOIN (SELECT t.q, sum (t.PD_TOTAL_MONEY) AS total_money
		                    FROM (SELECT a.*,
		                                  decode( substr ( substr ( to_char (a.create_date, 'yyyyMMdd'), 5, 6), 1, 2),1,1,2,1,3,1,4,2,5,2,6,2,7,3,8,3,9,3,10,4,11,4,12,4 )AS Q
		                            FROM V_A_DETAILS_OF_PURCHASE_SaleOrg a
		                           WHERE     a.CREATE_DATE IS NOT NULL
										<isNotEmpty prepend=" and " property="map.dept_id">a.dept_id = #map.dept_id#</isNotEmpty>
		                                <![CDATA[and a.CREATE_DATE >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                <![CDATA[and a.CREATE_DATE <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                 ) t
		                  GROUP BY t.q) aa1
		          ON bb.I = aa1.q
		 ) tt     
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!-- Hu,Hao 2013-09-22 按全年任务分析 -->
	<select id="selectChannelDataImportListToAll" resultMap="channelDataImportForRwWcFxResult" parameterClass="channelDataImport">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select tt.*,
		  decode(tt.CUR_MONEY_OF_MONTH_TASK,null,0,(tt.TOTAL_MONEY/tt.CUR_MONEY_OF_MONTH_TASK) * 100) as yd_dcl,
		  decode(tt.l_total_money,null,0,((decode(tt.TOTAL_MONEY,null,0,tt.TOTAL_MONEY) - l_total_money)/tt.l_total_money) * 100) as tq_zzl
		 from(SELECT bb.I as m ,
		        aa.TOTAL_MONEY/10000 as TOTAL_MONEY ,
		        cc.RATIO * 100 as RATIO, 
		        cc.CUR_MONEY_OF_MONTH_TASK,
		        aa1.TOTAL_MONEY /10000 as l_total_money
		  FROM (SELECT * FROM n WHERE <![CDATA[i < 2]]>) bb
		       LEFT JOIN (SELECT 1 as q, sum (a.PD_TOTAL_MONEY) AS total_money  FROM V_A_DETAILS_OF_PURCHASE_SaleOrg a
		                           WHERE     a.CREATE_DATE IS NOT NULL
										 <isNotEmpty prepend=" and " property="map.dept_id">a.dept_id = #map.dept_id#</isNotEmpty>
		                                 <![CDATA[and a.CREATE_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                 <![CDATA[and a.CREATE_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                  ) aa ON bb.I = aa.q
		       LEFT JOIN (SELECT 1 as q,sum (a1.RATIO) AS ratio, sum (a1.CUR_MONEY_OF_MONTH_TASK)AS CUR_MONEY_OF_MONTH_TASK
		                            FROM    V_A_DATA_OF_DEPT_TASK_fgs a1
		                                 LEFT JOIN
		                                    KONKA_DEPT b1
		                                 ON a1.DEPT_SN = b1.DEPT_SN
		                           WHERE a1.Y = #map.this_year# 
								   <isNotEmpty prepend=" and " property="map.dept_id">b1.dept_id = #map.dept_id#</isNotEmpty>
		                           ) cc
		          ON bb.I = cc.q
		      LEFT JOIN (SELECT 1 as q, sum (a.PD_TOTAL_MONEY) AS total_money  FROM V_A_DETAILS_OF_PURCHASE_SaleOrg a
		                           WHERE     a.CREATE_DATE IS NOT NULL
										<isNotEmpty prepend=" and " property="map.dept_id">a.dept_id = #map.dept_id#</isNotEmpty>
		                                <![CDATA[and a.CREATE_DATE >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                                <![CDATA[and a.CREATE_DATE <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
		                  ) aa1 ON bb.I = aa1.q
		 ) tt      
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>	

	<select id="selectChannelDataImportListToSum" resultMap="channelDataImportResultToSum" parameterClass="channelDataImport">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		SELECT A.*, B.PD_ID
		FROM CHANNEL_DATA_IMPORT A
		LEFT JOIN KONKA_PE_PD_MODEL B ON A.COLUMN_11 = B.MD_NAME
		WHERE 1 = 1
		<include refid="sf-channelDataImport" />
		<isNotEmpty prepend=" and " property="map.date_like">
		<![CDATA[ TO_CHAR(A.COLUMN_7, 'yyyymmdd') <= #map.date_like:VARCHAR# ]]>
<!-- 			ORDER BY A.COLUMN_7 , A.ID -->
		</isNotEmpty>
		<isEmpty prepend=" " property="map.date_like">
<!-- 			ORDER BY A.COLUMN_7 , A.ID -->
		</isEmpty>
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	<!-- 查找R3客户是否有结算 -->
	<select id="selectR3codeIsJs" resultClass="long" parameterClass="channelDataImport">
	       select count(*) from CHANNEL_DATA_IMPORT where 1=1
	       <include refid="sf-channelDataImport" />
	</select>
	
	<!-- 查询R3客户订单列表总数 -->
	<select id="selectChannelDataImportCount" resultClass="long" parameterClass="channelDataImport">
		select count(1) from
		<isNotEmpty property="map.count1">
			CHANNEL_DATA_IMPORT s
			<isNotEmpty prepend=" " property="map.shop_cust_id" >
				left join KONKA_R3_SHOP s10 on s.COLUMN_5 = s10.R3_CODE 
			</isNotEmpty>
			<isNotEmpty prepend=" " property="map.area_name" >
				left join KONKA_R3_SHOP shop on s.COLUMN_1 = shop.R3_CODE 
			</isNotEmpty>
			<isNotEmpty prepend=" " property="map.count1" >
				left join MV_ORG_OF_CUSTOMER_ALL s3 on s.COLUMN_1 = s3.R3_code
			</isNotEmpty>
			where 1 = 1
			<isNotEmpty prepend=" and " property="map.area_name" >
				shop.area_name = #map.area_name:VARCHAR# 
			</isNotEmpty>
			<isNotEmpty prepend=" and " property="map.dept_id">
				(s3.cur_dept_id is not null and s3.cur_dept_id in (
							select dept_id from konka_dept start with dept_id = #map.dept_id# 
							connect by prior dept_id = par_id 
						)
				)
			</isNotEmpty>
			<isNotEmpty prepend=" and " property="map.shop_cust_id" >
				s10.id= #map.shop_cust_id#
			</isNotEmpty>
			<include refid="sf-channelDataImport" />
		</isNotEmpty>
		<isNotEmpty property="map.count2">
			(select column_1,
			column_11,
			sum(to_number(column_12)) as num,
			avg(column_13) as price,
			sum(column_14) as total
			from CHANNEL_DATA_IMPORT
			where 1 = 1
			group by column_1, column_11
			<isNotEmpty property="map.date1">
				<isNotEmpty prepend="," property="map.date_start">column_7
					having  <![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
				<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			</isNotEmpty>
			<isNotEmpty property="map.date2">
				<isNotEmpty prepend="," property="map.date_start">
					column_7 having  <![CDATA[to_char(COLUMN_7,'yyyymm') >=#map.date_start#]]></isNotEmpty>
				<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymm') <=#map.date_end# ]]></isNotEmpty>
			</isNotEmpty>
			) where 1 = 1
			<include refid="sf-channelDataImport" />
		</isNotEmpty>
		<isNotEmpty property="map.count3">
			(select distinct t.column_11 from channel_data_import t ) where 1 = 1
			<include refid="sf-channelDataImport" />
		</isNotEmpty>
		<isNotEmpty property="map.dept_id_start">
			(select *
				from CHANNEL_DATA_IMPORT
				where 1 = 1
				<include refid="sf-channelDataImport" />
			) s
			<isNotEmpty prepend=" " property="map.dept_id_start" >
				left join MV_ORG_OF_CUSTOMER_ALL s3 on s.COLUMN_1 = s3.R3_code
			</isNotEmpty>
			where 1 = 1
			<isNotEmpty prepend=" and " property="map.dept_id_start">
				(s3.cur_dept_id is not null and s3.cur_dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
			</isNotEmpty>
		</isNotEmpty>
		<isNotEmpty property="map.filter_by_ywy_id_eq">
			(select *
				from CHANNEL_DATA_IMPORT
				where 1 = 1
				<include refid="sf-channelDataImport" />
			) s
			<isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq" >
				left join MV_ORG_OF_CUSTOMER_ALL s3 on s.COLUMN_1 = s3.R3_code
			</isNotEmpty>
			where 1 = 1
			<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
				s3.user_id = #map.filter_by_ywy_id_eq#
			</isNotEmpty>
		</isNotEmpty>
	</select>
	
	<!--查询R3客户订单列表sql  -->
	<select id="selectChannelDataImportPaginatedList" resultMap="channelDataImportWithR3ShopResult" parameterClass="channelDataImport">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select s.* ,s1.customer_name as COLUMN_04 ,s2.customer_name as
			COLUMN_06 from (select * from CHANNEL_DATA_IMPORT where 1 = 1
				<include refid="sf-channelDataImport" />
				) s
			left join KONKA_R3_SHOP s1 on s.COLUMN_1 = s1.R3_CODE
			left join KONKA_R3_SHOP s2 on s.COLUMN_5 = s2.R3_CODE
			<isNotEmpty prepend=" " property="map.count1" >
				left join MV_ORG_OF_CUSTOMER_ALL s3 on s.COLUMN_1 = s3.R3_code
			</isNotEmpty>
			<isNotEmpty prepend=" " property="map.dept_id_start" >
				left join MV_ORG_OF_CUSTOMER_ALL s3 on s.COLUMN_1 = s3.R3_code
			</isNotEmpty>
			<isNotEmpty prepend=" " property="map.filter_by_ywy_id_eq" >
				left join MV_ORG_OF_CUSTOMER_ALL s3 on s.COLUMN_1 = s3.R3_code
			</isNotEmpty>
			where 1 = 1 
			<isNotEmpty prepend=" and " property="map.area_name" >
				s1.area_name = #map.area_name:VARCHAR# 
			</isNotEmpty>
			<!--	客户端查r3单的tiao'jian	wangKunLin-->
			<isNotEmpty prepend=" and " property="map.shop_cust_id">s2.id = #map.shop_cust_id#</isNotEmpty>
			<isNotEmpty prepend=" and " property="map.dept_id_start">
				(s3.cur_dept_id is not null and s3.cur_dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
			</isNotEmpty>
			<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
					 s3.user_id = #map.filter_by_ywy_id_eq#
			</isNotEmpty>
			<isNotEmpty prepend=" and " property="map.count1">
				(s3.cur_dept_id IS NOT NULL AND s3.cur_dept_id IN (
					SELECT dept_id FROM konka_dept
				<isNotEmpty prepend=" " property="map.dept_id">
                    START WITH  dept_id = #map.dept_id#
				</isNotEmpty>
                CONNECT BY PRIOR dept_id = par_id))
			</isNotEmpty>
		<![CDATA[ order by s.id desc) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>

	<select id="selectChannelDataImportForSum" resultClass="long" parameterClass="channelDataImport">
		select decode(sum(num),null,0,sum(num)) from
		<isNotEmpty property="map.a">
			(select COLUMN_1,COLUMN_11,sum(to_number(decode(column_12,null,0,column_12))) as num
			from CHANNEL_DATA_IMPORT
			group by COLUMN_1, COLUMN_11 ,column_12,column_7 having to_number(column_12)>0
			<isNotEmpty prepend=" and " property="map.date_start">  <![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			) where 1 = 1
			<include refid="sf-channelDataImport" />
		</isNotEmpty>

		<isNotEmpty property="map.a1">
			(select COLUMN_1,sum(to_number(column_12)) as num
			from CHANNEL_DATA_IMPORT
			group by COLUMN_1 , column_7 ,column_12 having to_number(column_12)>0
			<isNotEmpty prepend=" and " property="map.date_start">  <![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			) where 1 = 1
			<isNotEmpty prepend=" and " property="column_1">COLUMN_1 = #column_1:VARCHAR#</isNotEmpty>
		</isNotEmpty>

		<isNotEmpty property="map.b">
			(select COLUMN_3,COLUMN_11,sum(to_number(column_12)) as num
			from CHANNEL_DATA_IMPORT
			group by COLUMN_3, COLUMN_11 ,column_12,column_7 having to_number(column_12)>0
			<isNotEmpty prepend=" and " property="map.date_start"><![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			) where 1 = 1
			<include refid="sf-channelDataImport" />
		</isNotEmpty>

		<isNotEmpty property="map.b1">
			(select COLUMN_3,sum(to_number(column_12)) as num
			from CHANNEL_DATA_IMPORT
			group by COLUMN_3,column_12,column_7 having to_number(column_12)>0
			<isNotEmpty prepend=" and " property="map.date_start"><![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			) where 1 = 1
			<isNotEmpty prepend=" and " property="column_3">COLUMN_3 = #column_3:VARCHAR#</isNotEmpty>
		</isNotEmpty>

		<isNotEmpty property="map.c">
			(select COLUMN_1, COLUMN_11, sum(to_number(column_12)) as num
			from CHANNEL_DATA_IMPORT
			group by COLUMN_1, COLUMN_11 ,column_12 ,column_7
			having to_number(column_12)>0
			<isNotEmpty prepend=" and " property="map.is_fgs">
				column_1 in (select r3_code from konka_r3_shop where branch_area_name = #map.fgs:VARCHAR#)
			</isNotEmpty>
			<isNotEmpty prepend=" and " property="map.is_jyb">
				column_1 in (select r3_code from konka_r3_shop where handle_name = #map.fgs:VARCHAR#)
			</isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_start"> <![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			)
			where 1 = 1
			<include refid="sf-channelDataImport" />
		</isNotEmpty>

		<isNotEmpty property="map.c1">
			(select sum(to_number(column_12)) as num
			from CHANNEL_DATA_IMPORT
			where 1=1
			<isNotEmpty prepend=" and " property="map.is_jyb">
				column_1 in (select r3_code from konka_r3_shop where handle_name = #map.fgs:VARCHAR#)
			</isNotEmpty>
			<isNotEmpty prepend=" and " property="map.is_fgs">
				column_1 in (select r3_code from konka_r3_shop where branch_area_name = #map.fgs:VARCHAR#)
			</isNotEmpty>
			and to_number(column_12)>0
			<isNotEmpty prepend=" and " property="map.date_start"><![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			)
			where 1 = 1
			<include refid="sf-channelDataImport" />
		</isNotEmpty>


		<isNotEmpty property="map.d">
			(select COLUMN_1, COLUMN_11, sum(to_number(column_12)) as num
			from CHANNEL_DATA_IMPORT
			group by COLUMN_1, COLUMN_11 ,column_12 ,column_7
			having to_number(column_12)>0
			and column_1 in (select r3_code from konka_r3_shop where handle_name = #map.fgs:VARCHAR#)
			<isNotEmpty prepend=" and " property="map.date_start"> <![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			)
			where 1 = 1
			<include refid="sf-channelDataImport" />
		</isNotEmpty>

		<isNotEmpty property="map.d1">
			(select sum(to_number(column_12)) as num
			from CHANNEL_DATA_IMPORT
			where 1=1 and column_1 in (select r3_code from konka_r3_shop where handle_name = #map.fgs:VARCHAR#) and to_number(column_12)>0
			<isNotEmpty property="map.date1">
				<isNotEmpty prepend=" and " property="map.date_start"><![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
				<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			</isNotEmpty>
			<isNotEmpty property="map.date2">
				<isNotEmpty prepend=" and " property="map.date_start"> <![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
				<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			</isNotEmpty>
			)
			where 1 = 1
			<include refid="sf-channelDataImport" />
		</isNotEmpty>

		<isNotEmpty property="map.e">
			(select
			sum(to_number(column_12)) as num
			from CHANNEL_DATA_IMPORT where to_number(column_12)>0
			<isNotEmpty prepend=" and " property="map.date_start"> <![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
			)
			where 1 = 1
		</isNotEmpty>
	</select>

	<select id="selectChannelDataImportPaginatedListforR3" resultMap="channelDataImportResultForList" parameterClass="channelDataImport">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select
		distinct column_1
		from CHANNEL_DATA_IMPORT where 1 = 1
		<include refid="sf-channelDataImport" />
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<select id="selectChannelDataImportForMaxDate"  resultClass="java.util.Date" parameterClass="channelDataImport">
		select max(import_date) import_date from CHANNEL_DATA_IMPORT where 1 = 1
		<include refid="sf-channelDataImport" />
	</select>
	

	<select id="selectChannelDataImportPaginatedListForModel" resultMap="channelDataImportToModel" parameterClass="channelDataImport" remapResults="true">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select distinct t.column_11 as model from channel_data_import t where 1 = 1
		<include refid="sf-channelDataImport" />
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>

	<select id="selectChannelDataImportPaginatedListForStat" resultMap="channelDataImportToStat" parameterClass="channelDataImport" remapResults="true">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select column_1, column_11,
		sum(to_number(column_12)) as num,
		round(avg(column_13),2) as price,
		sum(column_14) as total
		from CHANNEL_DATA_IMPORT
		where 1 = 1
		<include refid="sf-channelDataImport" />
		group by column_1 ,column_11
		<isNotEmpty property="map.date1">
			<isNotEmpty prepend="," property="map.date_start">column_7
				having  <![CDATA[to_char(COLUMN_7,'yyyymmDD') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymmDD') <=#map.date_end# ]]></isNotEmpty>
		</isNotEmpty>
		<isNotEmpty property="map.date2">
			<isNotEmpty prepend="," property="map.date_start">
				column_7 having <![CDATA[to_char(COLUMN_7,'yyyymm') >=#map.date_start#]]></isNotEmpty>
			<isNotEmpty prepend=" and " property="map.date_end"><![CDATA[to_char(COLUMN_7,'yyyymm') <=#map.date_end# ]]></isNotEmpty>
		</isNotEmpty>
	<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>


	<!-- @author Wang,Yang @version 2011-11-10 @desc 最基本的LIST查询 -->
	<select id="selectChannelDataListByPdId" resultMap="channelDataImportResultForList" parameterClass="channelDataImport" remapResults="true">
		select * from CHANNEL_DATA_IMPORT
		where 1=1
		<include refid="sf-channelDataImport" />
	</select>

	<select id="selectChannelDataSumByPdId" resultClass="decimal" parameterClass="channelDataImport" remapResults="true">
		select sum($map.column$) from CHANNEL_DATA_IMPORT t
		where 1=1
		<include refid="sf-channelDataImport" />
	</select>

	<!-- @author Wang,Yang @version 2011-12-28 @desc 客户结算统计 -->
	<select id="selectChannelDataImportListForStatistics" resultMap="channelDataImportToStat" parameterClass="channelDataImport" remapResults="true">
		select
		<isNotEmpty prepend="" property="map.isDKH">(select customer_name from konka_r3_shop where r3_code = column_1) column_1,</isNotEmpty>
		<isEmpty prepend="" property="map.isDKH">#map.dept_name# as column_1,</isEmpty>
		column_11,
		sum(to_number(column_12)) as num,
		round(avg(column_13),2) as price,
		sum(column_14) as total
		from CHANNEL_DATA_IMPORT
		where 1 = 1
		<include refid="sf-channelDataImport" />
		group by
		<isNotEmpty prepend="" property="map.isDKH">column_1,</isNotEmpty>
		column_11
	</select>
	
	<!-- 统计R3客户订单查询数据的总数量、总金额 -->
	<select id="selectChannelDataImportAllCountAndAllMoney" resultClass="java.util.HashMap" parameterClass="channelDataImport">
		select sum(s.column_27) as all_count, sum(s.column_14) as all_money 
		from (select * from CHANNEL_DATA_IMPORT  where 1=1
		<include refid="sf-channelDataImport" /> ) s
		left join MV_ORG_OF_CUSTOMER_ALL s3 on s.COLUMN_1 = s3.R3_code
		<isNotEmpty prepend=" " property="map.area_name">
		    left join konka_r3_shop shop on s.COLUMN_1 = shop.r3_code
		</isNotEmpty>
		where 1=1
		<isNotEmpty prepend=" and " property="map.area_name">
		    shop.area_name = #map.area_name:VARCHAR#
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.dept_id_start">
				(s3.cur_dept_id is not null and s3.cur_dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			s3.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.count1">
			(s3.cur_dept_id IS NOT NULL AND s3.cur_dept_id IN (
				SELECT dept_id FROM konka_dept
			<isNotEmpty prepend=" " property="map.manager_dept_id">
                   START WITH  dept_id = #map.manager_dept_id#
			</isNotEmpty>
               CONNECT BY PRIOR dept_id = par_id))
		</isNotEmpty>
	</select>

	<insert id="insertChannelDataImport" parameterClass="channelDataImport">
		<selectKey resultClass="long" keyProperty="id">select SEQ_CHANNEL_DATA_IMPORT.nextval as id from dual</selectKey>
		<![CDATA[insert into CHANNEL_DATA_IMPORT (]]>
		<dynamic prepend=" ">
			<isNotNull prepend="," property="id">ID</isNotNull>
			<isNotNull prepend="," property="import_date">IMPORT_DATE</isNotNull>
			<isNotNull prepend="," property="import_uid">IMPORT_UID</isNotNull>
			<isNotNull prepend="," property="column_1">COLUMN_1</isNotNull>
			<isNotNull prepend="," property="column_2">COLUMN_2</isNotNull>
			<isNotNull prepend="," property="column_3">COLUMN_3</isNotNull>
			<isNotNull prepend="," property="column_4">COLUMN_4</isNotNull>
			<isNotNull prepend="," property="column_5">COLUMN_5</isNotNull>
			<isNotNull prepend="," property="column_6">COLUMN_6</isNotNull>
			<isNotNull prepend="," property="column_7">COLUMN_7</isNotNull>
			<isNotNull prepend="," property="column_8">COLUMN_8</isNotNull>
			<isNotNull prepend="," property="column_9">COLUMN_9</isNotNull>
			<isNotNull prepend="," property="column_10">COLUMN_10</isNotNull>
			<isNotNull prepend="," property="column_11">COLUMN_11</isNotNull>
			<isNotNull prepend="," property="column_12">COLUMN_12</isNotNull>
			<isNotNull prepend="," property="column_13">COLUMN_13</isNotNull>
			<isNotNull prepend="," property="column_14">COLUMN_14</isNotNull>
			<isNotNull prepend="," property="column_15">COLUMN_15</isNotNull>
			<isNotNull prepend="," property="column_16">COLUMN_16</isNotNull>
			<isNotNull prepend="," property="column_17">COLUMN_17</isNotNull>
			<isNotNull prepend="," property="column_18">COLUMN_18</isNotNull>
			<isNotNull prepend="," property="column_19">COLUMN_19</isNotNull>
			<isNotNull prepend="," property="column_20">COLUMN_20</isNotNull>
			<isNotNull prepend="," property="column_21">COLUMN_21</isNotNull>
			<isNotNull prepend="," property="column_22">COLUMN_22</isNotNull>
			<isNotNull prepend="," property="column_23">COLUMN_23</isNotNull>
			<isNotNull prepend="," property="column_24">COLUMN_24</isNotNull>
			<isNotNull prepend="," property="column_25">COLUMN_25</isNotNull>
			<isNotNull prepend="," property="column_26">COLUMN_26</isNotNull>
			<isNotNull prepend="," property="column_27">COLUMN_27</isNotNull>
			<isNotNull prepend="," property="column_28">COLUMN_28</isNotNull>
			<isNotNull prepend="," property="column_29">COLUMN_29</isNotNull>
			<isNotNull prepend="," property="column_30">COLUMN_30</isNotNull>
		</dynamic>
		<![CDATA[) values (]]>
		<dynamic prepend=" ">
			<isNotNull prepend="," property="id">#id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="import_date">#import_date:DATETIME#</isNotNull>
			<isNotNull prepend="," property="import_uid">#import_uid:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_1">#column_1:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_2">#column_2:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_3">#column_3:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_4">#column_4:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_5">#column_5:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_6">#column_6:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_7">#column_7:DATETIME#</isNotNull>
			<isNotNull prepend="," property="column_8">#column_8:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_9">#column_9:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_10">#column_10:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_11">#column_11:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_12">#column_12:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_13">#column_13:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_14">#column_14:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_15">#column_15:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_16">#column_16:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_17">#column_17:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_18">#column_18:DATETIME#</isNotNull>
			<isNotNull prepend="," property="column_19">#column_19:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_20">#column_20:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_21">#column_21:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_22">#column_22:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_23">#column_23:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_24">#column_24:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_25">#column_25:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_26">#column_26:DATETIME#</isNotNull>
			<isNotNull prepend="," property="column_27">#column_27:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_28">#column_28:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_29">#column_29:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_30">#column_30:DECIMAL#</isNotNull>
		</dynamic>
		<![CDATA[)]]>
	</insert>

	<update id="updateChannelDataImport" parameterClass="channelDataImport">
		update CHANNEL_DATA_IMPORT
		<dynamic prepend="set">
			<isNotNull prepend="," property="id">ID = #id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="import_date">IMPORT_DATE = #import_date:DATETIME#</isNotNull>
			<isNotNull prepend="," property="import_uid">IMPORT_UID = #import_uid:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_1">COLUMN_1 = #column_1:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_2">COLUMN_2 = #column_2:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_3">COLUMN_3 = #column_3:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_4">COLUMN_4 = #column_4:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_5">COLUMN_5 = #column_5:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_6">COLUMN_6 = #column_6:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_7">COLUMN_7 = #column_7:DATETIME#</isNotNull>
			<isNotNull prepend="," property="map.column_7">COLUMN_7 = TO_DATE('', 'DD-MON-RR')</isNotNull>
			<isNotNull prepend="," property="column_8">COLUMN_8 = #column_8:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_9">COLUMN_9 = #column_9:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_10">COLUMN_10 = #column_10:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_11">COLUMN_11 = #column_11:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_12">COLUMN_12 = #column_12:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_13">COLUMN_13 = #column_13:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="map.column_13">COLUMN_13 = ''</isNotNull>
			<isNotNull prepend="," property="column_14">COLUMN_14 = #column_14:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="map.column_14">COLUMN_14 = ''</isNotNull>
			<isNotNull prepend="," property="column_15">COLUMN_15 = #column_15:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="map.column_15">COLUMN_15 = ''</isNotNull>
			<isNotNull prepend="," property="column_16">COLUMN_16 = #column_16:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="map.column_16">COLUMN_16 = ''</isNotNull>
			<isNotNull prepend="," property="column_17">COLUMN_17 = #column_17:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="map.column_17">COLUMN_17 = ''</isNotNull>
			<isNotNull prepend="," property="column_18">COLUMN_18 = #column_18:DATETIME#</isNotNull>
			<isNotNull prepend="," property="map.column_18">COLUMN_18 = TO_DATE('', 'DD-MON-RR')</isNotNull>
			<isNotNull prepend="," property="column_19">COLUMN_19 = #column_19:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_20">COLUMN_20 = #column_20:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_21">COLUMN_21 = #column_21:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_22">COLUMN_22 = #column_22:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_23">COLUMN_23 = #column_23:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_24">COLUMN_24 = #column_24:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_25">COLUMN_25 = #column_25:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_26">COLUMN_26 = #column_26:DATETIME#</isNotNull>
			<isNotNull prepend="," property="column_27">COLUMN_27 = #column_27:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_28">COLUMN_28 = #column_28:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_29">COLUMN_29 = #column_29:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_30">COLUMN_30 = #column_30:DECIMAL#</isNotNull>
		</dynamic>
		where
		<isNotEmpty prepend=" " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</update>

	<delete id="deleteChannelDataImport" parameterClass="channelDataImport">
		delete from CHANNEL_DATA_IMPORT where 1 = 1
		<isNotEmpty prepend=" and " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" and " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
		<include refid="sf-channelDataImport" />
	</delete>

</sqlMap>