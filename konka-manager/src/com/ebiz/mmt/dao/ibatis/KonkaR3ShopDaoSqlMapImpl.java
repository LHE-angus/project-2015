package com.ebiz.mmt.dao.ibatis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.ebiz.mmt.dao.KonkaR3ShopDao;
import com.ebiz.mmt.domain.KonkaR3Shop;
import com.ebiz.ssi.dao.ibatis.EntityDaoSqlMapImpl;

/**
 * Code by AutoGenerated Builder AutoGenerated Builder Version 2.1
 * 
 * @author Hui,Gang
 * @datetime 2011-09-24 14:50:49
 */
@Repository
public class KonkaR3ShopDaoSqlMapImpl extends EntityDaoSqlMapImpl<KonkaR3Shop> implements KonkaR3ShopDao {
	/**
	 * @author wangyang
	 */
	@Override
	public KonkaR3Shop selectKonkaR3ShopForResult(KonkaR3Shop t) {
		return (KonkaR3Shop) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopForResult", t);
	}

	/**
	 * @author Xing,XiuDong
	 */
	@Override
	public KonkaR3Shop selectKonkaR3ShopSimpleStat(KonkaR3Shop t) {
		return (KonkaR3Shop) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopSimpleStat", t);
	}

	/**
	 * @author wangyang 根据业务数据上报时间取R3网点
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopPaginatedListByAddDate(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopPaginatedListByAddDate", t);
	}

	/** Li,Ka :网点端进货选择康佳品牌时，通过shop_id查询其代理商（供应商） */
	@Override
	public KonkaR3Shop selectKonkaR3ShopByShopId(KonkaR3Shop t) {
		return (KonkaR3Shop) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopByShopId", t);
	}

	@Override
	public Long selectKonkaR3ShopCountByAddDate(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopCountByAddDate", t);
	}

	/**
	 * @author Zhang,Xufeng 查询已分配和已分配的 R3 网点
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopMatchAndAssignList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopMatchAndAssignList", t);
	}

	/**
	 * @author Zhang,Xufeng 查询已分配和已分配的 R3 网点
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopMatchAndAssignPaginatedList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopMatchAndAssignPaginatedList", t);
	}

	@Override
	public Long selectKonkaR3ShopMatchAndAssignCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopMatchAndAssignCount", t);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopGroupByHandleName(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopGroupByHandleName", t);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopGroupByBranchAreaName(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopGroupByBranchAreaName", t);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopPaginatedListForStat(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopPaginatedListForStat", t);
	}

	@Override
	public Long selectKonkaR3ShopCountForHandle(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopCountForHandle", t);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopPaginatedListGroupByName(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopPaginatedListGroupByName", t);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopStaticsGroupByFGS(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopStaticsGroupByFGS", t);
	}

	/**
	 * @author Ren,zhong
	 * @date 2013-06-09
	 */
	@Override
	public KonkaR3Shop selectKonkaR3ShopWithBranchAssign(KonkaR3Shop t) {
		return (KonkaR3Shop) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopWithBranchAssign", t);
	}

	/**
	 * @author pan,gang
	 * @date 2013-7-5
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopForYwyPaginatedList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopForYwyPaginatedList", t);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectJBDataBydeptName(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectJBDataBydeptName", t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-08-11
	 * @return 返回R3客户列表
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopListByUserName(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopListByUserName", t);
	}

	/**
	 * @author Jiang,JiaYong
	 * @version 2013-08-29
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopStockByR3CodeList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopStockByR3CodeList", t);
	}

	/**
	 * @author Liu,ZhiXiang
	 * @version 2013-09-23
	 * @return 根据p_index查询所能获取到的客户数量
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopCountByPIndex(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopCountByPIndex", t);
	}

	/**
	 * @author Liu,ZhiXiang
	 * @version 2013-09-23
	 * @return 根据p_index查询所能获取到的客户销售额
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopListByPIndex(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopListByPIndex", t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-10-09
	 * @return 根据用户ID查询客户R3_CODE
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopForUserIdList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopForUserIdList", t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-10-14
	 */
	@Override
	public Long selectKonkaR3ShopForYwyCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopForYwyCount", t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-10-28
	 */
	@Override
	public Long selectKonkaR3ShopForOrderCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopForOrderCount", t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-10-28
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopForOrderList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopForOrderList", t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-12-04
	 */
	@Override
	public Long selectKonkaR3ShopForStocksCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopForStocksCount", t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-12-04
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopForStocksList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopForStocksList", t);
	}

	/**
	 * 订货会 参会客户自动提出
	 * 
	 * @author Zhang,Chao
	 * @version 2014-01-25
	 */
	@Override
	public Long selectKonkaR3ShopResultListByViewCustomerCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopResultListByViewCustomerCount",
				t);
	}

	/**
	 * 订货会 参会客户自动提出
	 * 
	 * @author Zhang,Chao
	 * @version 2014-01-25
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopResultListByViewCustomerList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopResultListByViewCustomerList", t);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<KonkaR3Shop> selectKonkaR3ShopListForYwyAndJb(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopListForYwyAndJb", t);
	}

	@Override
	public Long selectDeptIdFromR3code(String code) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectDeptIdByR3code", code);
	}

	/**
	 * 合作伙伴关系R3编码
	 * 
	 * @author Xiao,GuoJian
	 * @version 2014-05-05
	 */
	@Override
	public Long selectKonkaR3ShopForR3CodeCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopForR3CodeCount", t);
	}

	/**
	 * 合作伙伴关系R3编码
	 * 
	 * @author Xiao,GuoJian
	 * @date 2014-05-05
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<KonkaR3Shop> selectKonkaR3ShopForR3CodePaginatedList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopForR3CodePaginatedList", t);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<KonkaR3Shop> selectKonkaR3ShopForCustVisit(KonkaR3Shop entity) {
		
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopForCustVisit", entity);
	}

	// 客户 零售 结算 汇款统计list
	@Override
	public List<HashMap> selectKonkaR3ShopMoneryPaginatedList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopMoneryPaginatedList", t);
	}

	// 客户 零售 结算 汇款统计count
	@Override
	public Long selectKonkaR3ShopMoneryPaginatedListCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopMoneryPaginatedListCount", t);
	}

	@Override
	public HashMap selectKonkaR3ShopOrJbasePartner(KonkaR3Shop t) {
		
		return (HashMap) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopOrJbasePartner", t);
	}

	@Override
	public Long selectMergeR3ShopCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectMergeR3ShopCount", t);
	}

	@Override
	public List<HashMap> selectMergeR3ShopList(KonkaR3Shop t) {

		Map map = new HashMap();
		if(null != t.getMap().get("dept_id")){
			map.put("I_DEPT_ID", t.getMap().get("dept_id").toString());
		}
		if(null != t.getCustomer_code()){
			map.put("I_MERGE_CODE", t.getCustomer_code().toString());
		}
		if(null != t.getR3_code()){
			map.put("I_R3_CODE", t.getR3_code().toString());
		}
		if(null != t.getCustomer_name()){
			map.put("I_MERGE_NAME", t.getCustomer_name().toString());
		}
		if(null != t.getMap().get("cust_type1")){
			map.put("I_MERGE_TYPE1", t.getMap().get("cust_type1").toString());
		}
		if(null != t.getCustomer_type()){
			map.put("I_MERGE_TYPE2", t.getCustomer_type().toString());
		}
		if(null != t.getMap().get("ywy_name")){
			map.put("I_YWY_NAME", t.getMap().get("ywy_name").toString());
		}
		if(null != t.getIs_del()){
			map.put("I_IS_STOP", t.getIs_del().toString());
		}
		if(null != t.getMap().get("date_begin")){
			map.put("I_DATE_BE", t.getMap().get("date_begin").toString());
		}
		if(null != t.getMap().get("date_end")){
			map.put("I_DATE_ED", t.getMap().get("date_end").toString());
		}
		if(null != t.getIs_sdf()){
			map.put("I_IS_SDF", t.getIs_sdf().toString());
		}
		if(null != t.getShop_status()){
			map.put("I_CUST_STAT", t.getShop_status().toString());
		}
		if(null != t.getArea_name()){
			map.put("I_AREA_NAME", t.getArea_name().toString());
		}
		if(null != t.getBranch_name()){
			map.put("I_BRANCH", t.getBranch_name().toString());
		}
		if(null != t.getMap().get("dept_id_start")){
			map.put("I_DEPT_START", t.getMap().get("dept_id_start").toString());
		}
		if(null != t.getMap().get("filter_by_ywy_id_eq")){
			map.put("I_YWY_ID", t.getMap().get("filter_by_ywy_id_eq").toString());
		}
		if(null != t.getMap().get("session_user_id")){
			map.put("SESSION_ID", t.getMap().get("session_user_id").toString());
		}
		if(null != t.getMap().get("fgs_dept_value")){
			map.put("I_FGS_ID", t.getMap().get("fgs_dept_value").toString());
		}
		map.put("FIRST_ROW", t.getRow().getFirst() + 1);
		map.put("COUNT_ROW", t.getRow().getCount() + t.getRow().getFirst());

		List<HashMap> list = super.getSqlMapClientTemplate().queryForList("queryMergeR3List", map);// 调用
		logger.info(map.get("SQL_CODE").toString()); // 打印查询语句

		return list;

		// return
		// super.getSqlMapClientTemplate().queryForList("selectMergeR3ShopList",t);
	}

	@Override
	public Long selectMergeR3ShopcustCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectMergeR3ShopcustCount", t);
	}

	@Override
	public KonkaR3Shop selectKonkaR3ShopByR3Code(KonkaR3Shop t) {
		return (KonkaR3Shop) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopByR3Code", t);
	}

	@Override
	public Long selectKonkaR3ShopWithJzAndPdCount(KonkaR3Shop t) {
		return (Long) super.getSqlMapClientTemplate().queryForObject("selectKonkaR3ShopWithJzAndPdCount", t);
	}

	@Override
	public List<KonkaR3Shop> selectKonkaR3ShopWithJzAndPdPaginatedList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopWithJzAndPdPaginatedList", t);
	}

	@Override
	public List<KonkaR3Shop> selectKonkaR3ShopWithJzAndPdList(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectKonkaR3ShopWithJzAndPdList", t);
	}

	@Override
	public List<KonkaR3Shop> selectShopForAgent(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().queryForList("selectShopForAgent", t);
	}

	@Override
	public void changeShopStatus() {
		super.getSqlMapClientTemplate().queryForObject("changeShopStatus");
	}

	@Override
	public int updateKonkaR3ShopByID(KonkaR3Shop t) {
		return super.getSqlMapClientTemplate().update("modifyKonkaR3ShopByID", t);
	}

}