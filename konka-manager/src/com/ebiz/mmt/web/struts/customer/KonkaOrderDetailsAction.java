package com.ebiz.mmt.web.struts.customer;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

import net.sf.json.JSONArray;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.validator.GenericValidator;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ebiz.mmt.domain.JBasePartner;
import com.ebiz.mmt.domain.JBaseStore;
import com.ebiz.mmt.domain.JBaseType;
import com.ebiz.mmt.domain.KonkaDept;
import com.ebiz.mmt.domain.KonkaMobileSailData;
import com.ebiz.mmt.domain.KonkaOrderInfo;
import com.ebiz.mmt.domain.KonkaR3Backmoney;
import com.ebiz.mmt.domain.KonkaR3Order;
import com.ebiz.mmt.domain.OperLog;
import com.ebiz.mmt.domain.PeProdUser;
import com.ebiz.mmt.domain.SysModule;
import com.ebiz.mmt.domain.TaskPara;
import com.ebiz.mmt.web.Constants;
import com.ebiz.mmt.web.struts.BaseAction;
import com.ebiz.mmt.web.util.StringHelper;
import com.ebiz.ssi.util.EncryptUtils;
import com.ebiz.ssi.web.struts.bean.Pager;
import com.ebiz.ssi.web.struts.bean.UploadFile;

/**
 * Code by AutoGenerated Builder AutoGenerated Builder Version 2.1
 * 
 * @author Gao,YongXiang
 * @datetime 2011-11-10 15:33:16
 */
public class KonkaOrderDetailsAction extends BaseClientJxcAction {
	/**
	 * 初始化
	 * @author Angus
	 * @date 2014-08-26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
		HashMap allmap = new HashMap();
        //位置信息
        DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");

		String naviString = "";
		if (StringUtils.isNotBlank(mod_id)) {
			SysModule sysModule = new SysModule();
			sysModule.getMap().put("mod_id", mod_id);
			List<SysModule> sysModuleList = getFacade().getSysModuleService().getSysModuleList(sysModule);
			naviString = StringHelper.getNaviString(sysModuleList, " > ");
		}
		allmap.put("local_str", naviString);
		
		//默认当前月份
		Date today = new Date();
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		String day_first = theFirstDayOfCurrentMonth();
		String day_last = df.format(today);
        allmap.put("date_begin", day_first);
        allmap.put("date_end", day_last);
		
		//当前用户信息
		PeProdUser ui = super.getSessionCustomerUserInfo(request);
		if(ui!=null){
			int max_dlevel = super.getMaxDLevel(ui.getId());
			if(max_dlevel==9){
				allmap.put("dept_id", "");
			}else{
				allmap.put("dept_id", ui.getDept_id());
			}
		}
		
		//转换为json数据
		JSONArray jsonArray = JSONArray.fromObject(allmap);
		
		int start =jsonArray.toString().indexOf("[");
		int end = jsonArray.toString().lastIndexOf("}");

		response.setContentType("application/json;charset=UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(jsonArray.toString().substring(start+1, end+1));
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 初始化商品类型
	 * @author Angus
	 * @date 2014-8-26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getGoodsTypeList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		PeProdUser user_info = super.getSessionCustomerUserInfo(request);
		JBaseType entity = new JBaseType();
		entity.setIs_del(0);
		entity.setC_id(user_info.getCust_id());
		entity.setPar_id(10001L);
		entity.getMap().put("order_by_order_value", true);
		List<HashMap> entityList = getFacade().getJBaseTypeService().getJBaseTypeMap(entity);
		
		List<HashMap> list = new ArrayList<HashMap>();
		HashMap map = new HashMap();
		map.put("TYPE_ID", "");
		map.put("TYPE_NAME", "-请选择-");
		list.add(map);
		list.addAll(entityList);
		//转换为json数据
		JSONArray jsonArray = JSONArray.fromObject(list);
		response.setContentType("application/json;charset=UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(jsonArray.toString());
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 初始化仓库列表
	 * @author Angus
	 * @date 2014-8-26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getStoreList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		ArrayList<HashMap> StoreList = new ArrayList<HashMap>();
		HashMap m = new HashMap();
		m.put("STORE_ID", "");
		m.put("STORE_NAME", "-请选择-");
		StoreList.add(m);
		m = new HashMap();
		m.put("STORE_ID", "0");
		m.put("STORE_NAME", " - ");
		StoreList.add(m);
		
		PeProdUser ui = super.getSessionCustomerUserInfo(request);
		JBaseStore jBaseStore = new JBaseStore();
		jBaseStore.setC_id(ui.getCust_id());
		jBaseStore.setIs_del(0);
		List<HashMap> jBaseStores = super.getFacade().getJBaseStoreService().getJBaseStoreMapList(jBaseStore);
		StoreList.addAll(jBaseStores);
		
		//转换为json数据
		JSONArray jsonArray = JSONArray.fromObject(StoreList);
		response.setContentType("application/json;charset=UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(jsonArray.toString());
		out.flush();
		out.close();
		return null;
	}
	
	
	/**
	 * 初始化供应商列表
	 * @author Angus
	 * @date 2014-8-28
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPartnerList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		ArrayList<HashMap> StoreList = new ArrayList<HashMap>();
		HashMap m = new HashMap();
		m.put("PARTNER_ID", "");
		m.put("PARTNER_NAME", "-请选择-");
		StoreList.add(m);
		m = new HashMap();
		m.put("PARTNER_ID", "0");
		m.put("PARTNER_NAME", "康佳集团股份有限公司");
		StoreList.add(m);
		JBasePartner entity = new JBasePartner();
		
		PeProdUser ui = super.getSessionCustomerUserInfo(request);
		entity.setC_id(ui.getCust_id());
		entity.setIs_del(0);
		List<HashMap> jBaseStores = super.getFacade().getJBasePartnerService().getJBasePartnerMapList(entity);
		StoreList.addAll(jBaseStores);
		
		//转换为json数据
		JSONArray jsonArray = JSONArray.fromObject(StoreList);
		response.setContentType("application/json;charset=UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(jsonArray.toString());
		out.flush();
		out.close();
		return null;
	}
	
	
	public ActionForward queryList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
	        HttpServletResponse response) throws Exception {
		//验证权限
//		if (null == super.checkUserModPopeDom(form, request, "0")) {
//			return super.checkPopedomInvalid(request, response);
//		}
		
		KonkaOrderInfo entity = getEntiy(mapping, form, request);

		Long recordCount = super.getFacade().getKonkaOrderInfoService().getKonkaOrderInfoDetailsCount(entity);
		DynaBean dynaBean = (DynaBean) form;
		Pager pager = (Pager) dynaBean.get("pager");
		String rows = (String)dynaBean.get("rows");
		pager.init(recordCount, Integer.valueOf(rows), (String)entity.getMap().get("page"));
		entity.getRow().setFirst(pager.getFirstRow());
		entity.getRow().setCount(pager.getRowCount());

		List<HashMap> entityList = null;
		List<HashMap> entityListCount = null;
		if(recordCount>0){
			entityList = super.getFacade().getKonkaOrderInfoService().getKonkaOrderInfoDetailsList(entity);
			
			//统计数量和金额
			entityListCount = super.getFacade().getKonkaOrderInfoService().getKonkaOrderInfoDetailsListCount(entity);
		}
		
		//封装成JSON字符串
		Map<String, Object> m = new HashMap<String, Object>();
		m.put("total", recordCount);
		if(entityList==null){
			String[] str = {};
			m.put("rows", str);
			m.put("CUR_NUM", 0);
			m.put("CUR_MONEY", 0);
			m.put("TOTAL_NUM", 0);
			m.put("TOTAL_MONEY", 0);
		}else{
			m.put("rows", entityList);
			m.put("CUR_NUM", entityListCount.get(1).get("NUMS"));
			m.put("CUR_MONEY", entityListCount.get(1).get("MONEY"));
			m.put("TOTAL_NUM", entityListCount.get(0).get("NUMS"));
			m.put("TOTAL_MONEY", entityListCount.get(0).get("MONEY"));
			m.put("SORT", entity.getMap().get("sort_text"));
			m.put("ORDER", entity.getMap().get("order_text"));
		}
		JSONArray jsonArray = JSONArray.fromObject(m);
		int start =jsonArray.toString().indexOf("[");
		int end = jsonArray.toString().lastIndexOf("}");
		String jsonStr = jsonArray.toString().substring(start+1, end+1);
		response.setContentType("application/json;charset=UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(jsonStr);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 导出数据
	 * @author Angus
	 * @date 2014-7-24
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward exportData(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		response.setCharacterEncoding("UTF-8");
		response.setContentType("application/octet-stream");
		response.setHeader("Content-Disposition", "attachment;filename=" + EncryptUtils.encodingFileName("订单明细表")
		        + ".xls");
		KonkaOrderInfo entity = getEntiy(mapping, form, request);
		Long recordCount = super.getFacade().getKonkaOrderInfoService().getKonkaOrderInfoDetailsCount(entity);
		entity.getRow().setFirst(0);
		entity.getRow().setCount(recordCount.intValue());
		List<HashMap> entityList1 = super.getFacade().getKonkaOrderInfoService().getKonkaOrderInfoDetailsList(entity);
		request.setAttribute("allList", entityList1);
		return mapping.findForward("view");
	}
	
	/**
	 * 封装数据
	 * @author Angus
	 * @date 2014-7-24
	 * @param mapping
	 * @param form
	 * @param request
	 * @return
	 * @throws Exception 
	 */
	public KonkaOrderInfo  getEntiy(ActionMapping mapping, ActionForm form, HttpServletRequest request) throws Exception{
		
		String page = request.getParameter("page");
		
		//排序字段
		String sort = request.getParameter("sort");
		
		//排序顺序
		String order = request.getParameter("order");
		
		//订单号
		String order_sn = request.getParameter("order_sn");
		
		//商品类型
		String goods_type = request.getParameter("goods_type");
		//商品类型文本 --对"康佳电视"选项的特殊处理
		String goods_type_text = request.getParameter("goods_type_text");
		
		//商品/型号
		String goods_sn = request.getParameter("goods_sn");
		
		//业务类型
		String business_type = request.getParameter("business_type");
		
		//仓库名
		String store_id = request.getParameter("store_id");
		
		//供应商
		String partner_id = request.getParameter("partner_id");
		
		//单据状态
		String bills_stat = request.getParameter("bills_stat");
		
		//时间范围
		String date_begin = request.getParameter("date_begin");
		String date_end = request.getParameter("date_end");
		
		KonkaOrderInfo entity = new KonkaOrderInfo();

		
		if (StringUtils.isNotBlank(order_sn)) {
			entity.setTrade_index(order_sn);
		}
		if (StringUtils.isNotBlank(goods_type)) {
			entity.getMap().put("goods_type", goods_type);
			if ("康佳电视".equals(goods_type_text)) {
				entity.getMap().put("is_konka", true);
			}
		}
		if (StringUtils.isNotBlank(goods_sn)) {
			entity.getMap().put("goods_sn", goods_sn);
		}
		if (StringUtils.isNotBlank(business_type)) {
			entity.getMap().put("bes_type", business_type);
		}
		if (StringUtils.isNotBlank(store_id)) {
			entity.getMap().put("store_id", store_id);
		}
		if (StringUtils.isNotBlank(partner_id)) {
			entity.getMap().put("partner_id", partner_id);
		}
		if (StringUtils.isNotBlank(bills_stat)) {
			entity.getMap().put("bills_stat", bills_stat);
		}
		if (StringUtils.isNotBlank(date_begin)) {
			entity.getMap().put("date_begin", date_begin);
		}
		if (StringUtils.isNotBlank(date_end)) {
			entity.getMap().put("date_end", date_end);
		}
		if (StringUtils.isNotBlank(sort)) {
			entity.getMap().put("sort_text", sort);
		}else{
			entity.getMap().put("sort_text", "order_date");  //默认排序
		}
		if (StringUtils.isNotBlank(order)) {
			entity.getMap().put("order_text", order);
		}else{
			entity.getMap().put("order_text", "desc");
		}
		
		// 数据级别判断开始
		PeProdUser ui = new PeProdUser();
		ui = super.getSessionCustomerUserInfo(request);
		Long __dept_id = ui.getDept_id(); 		// 默认为当前用户所在部门
		int max_dlevel = super.getMaxDLevel(ui.getId()); // 获取当前用户的最高可视部门级别
		logger.info("Max level : {}", max_dlevel);
		request.setAttribute("max_dlevel", max_dlevel);
		switch (max_dlevel) {
		case 9:
			// 集团及以下部门可见
			__dept_id = 0L; // 0表示部门根节点，即“多媒体事业本部”
			break;
		case 8:
			// 分公司及以下部门可见
			KonkaDept dept_fgs = super.getKonkaDeptForFgs(ui.getDept_id()); // 查询部门分公司
			if (null != dept_fgs && null != dept_fgs.getDept_id()) {
				__dept_id = dept_fgs.getDept_id(); // 分公司部门ID
				entity.getMap().put("dept_id_start", __dept_id);
			}
			break;
		case 7:
			// 我所在的部门及以下部门可见
			__dept_id = ui.getDept_id(); // 默认为当前用户所在部门
			entity.getMap().put("dept_id_start", __dept_id);
			break;
		case 0:
			__dept_id = ui.getDept_id(); // 默认为当前用户所在部门
			// entity.getMap().put("dept_id_start", __dept_id);
			entity.getMap().put("filter_by_ywy_id_eq", ui.getId());
			break;
		default:
			// 出错
		}
		entity.getMap().put("session_user_id", ui.getId());
		entity.getMap().put("cust_id", ui.getCust_id());
		// 数据级别判断结束
		entity.getMap().put("page", page);
		return entity;
	}
	
	/**
	 * 同步订单数据
	 * @author Angus
	 * @date 2014-7-25
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward synData(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
		super.getFacade().getAutoRunService().createR3Order();
		KonkaR3Order t = new KonkaR3Order(); 
		Long counts = super.getFacade().getKonkaR3OrderService().getKonkaR3OrderCount(t);
		HashMap m = new HashMap();
		m.put("data_count", counts);
		
		//转换为json数据
		JSONArray jsonArray = JSONArray.fromObject(m);
		
		int start =jsonArray.toString().indexOf("[");
		int end = jsonArray.toString().lastIndexOf("}");
		
		response.setContentType("application/json;charset=UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(jsonArray.toString().substring(start+1, end+1));
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 获得当前月份的首日
	 * @author Angus
	 * @date 2014-7-10
	 * @return
	 */
	private static String theFirstDayOfCurrentMonth() {
		Calendar c = Calendar.getInstance();

		String y = String.valueOf(c.get(Calendar.YEAR));
		String m = "";
		String d = "";// the first day of a month
		if (c.get(Calendar.MONTH) + 1 >= 10) {
			m = String.valueOf(c.get(Calendar.MONTH) + 1);
		} else {
			m = "0" + String.valueOf(c.get(Calendar.MONTH) + 1);
		}
		d = "0" + c.getActualMinimum(Calendar.DAY_OF_MONTH);
		String start_day = y + "-" + m + "-" + d;
		return start_day;
	}
}