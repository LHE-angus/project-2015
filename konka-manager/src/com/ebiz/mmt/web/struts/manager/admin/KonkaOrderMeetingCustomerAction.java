package com.ebiz.mmt.web.struts.manager.admin;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.validator.GenericValidator;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ebiz.mmt.domain.Attachment;
import com.ebiz.mmt.domain.BaseProvinceListFour;
import com.ebiz.mmt.domain.BranchAssign;
import com.ebiz.mmt.domain.JBasePartner;
import com.ebiz.mmt.domain.KonkaCategory;
import com.ebiz.mmt.domain.KonkaDept;
import com.ebiz.mmt.domain.KonkaR3MmtMatch;
import com.ebiz.mmt.domain.KonkaR3Shop;
import com.ebiz.mmt.domain.KonkaR3ShopLink;
import com.ebiz.mmt.domain.KonkaSalesDept;
import com.ebiz.mmt.domain.KonkaStoreUserCInfo;
import com.ebiz.mmt.domain.PeProdUser;
import com.ebiz.mmt.domain.PeRoleUser;
import com.ebiz.mmt.domain.UserInfo;
import com.ebiz.mmt.r3.KNA1;
import com.ebiz.mmt.r3.ReturnInfo;
import com.ebiz.mmt.web.Constants;
import com.ebiz.mmt.web.struts.BaseAction;
import com.ebiz.mmt.web.struts.MmtFilePathConfig;
import com.ebiz.ssi.util.EncryptUtils;
import com.ebiz.ssi.web.struts.bean.Pager;
import com.ebiz.ssi.web.struts.bean.UploadFile;

import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

/**
 * Code by AutoGenerated Builder AutoGenerated Builder Version 2.1
 * 
 * @author Wang,Yang
 * @datetime 2011-09-24 14:50:49
 */
public class KonkaOrderMeetingCustomerAction extends BaseAction {

	// private static HashMap<String, String> properties = new HashMap<String,
	// String>();
	// static {
	// InputStream inputStream =
	// InteractWebServiceImpl.class.getClassLoader().getResourceAsStream(
	// "webservice-url.properties");
	// Properties p = new Properties();
	// try {
	// p.load(inputStream);
	// } catch (IOException e1) {
	// e1.printStackTrace();
	// }
	// for (Object key : p.keySet()) {
	// properties.put((String) key, (String) p.get(key));
	// }
	// }

	@Override
	public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		return this.list(mapping, form, request, response);
	}

	/**
	 * @author pan,gang
	 * @date 2013-7-5
	 */
	public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (null == super.checkUserModPopeDom(form, request, "0")) {
			return super.checkPopedomInvalid(request, response);
		}

		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		super.getModPopeDom(form, request);

		super.encodeCharacterForGetMethod(dynaBean, request);
		Pager pager = (Pager) dynaBean.get("pager");
		String keyword = (String) dynaBean.get("keyword");
		String code_like = (String) dynaBean.get("code_like");
		String is_match = (String) dynaBean.get("is_match");
		String dept_id = (String) dynaBean.get("dept_id");
		String c_index = (String) dynaBean.get("c_index");
		String user_name_like = (String) dynaBean.get("user_name_like");
		String is_del = (String) dynaBean.get("is_del");
		String export = (String) dynaBean.get("export");
		String is_sdf = (String) dynaBean.get("is_sdf");

		String add_date_start = (String) dynaBean.get("add_date_start");
		String add_date_end = (String) dynaBean.get("add_date_end");

		PeProdUser ui = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);

		dynaBean.set("match", is_match);

		KonkaR3Shop entity = new KonkaR3Shop();
		super.copyProperties(entity, form);
		entity.setIs_del(0L);
		if (StringUtils.isNotBlank(is_del)) {
			entity.setIs_del(Long.valueOf(is_del));
		}

		if (!GenericValidator.isLong(is_match)) {
			entity.getMap().put("is_assign", "true");
			entity.getMap().put("leftYWY", "true");
			entity.getMap().put("YWY", "true");
		} else {
			entity.getMap().put("is_assign", "true");
			entity.getMap().put("leftYWY", "true");
			entity.getMap().put("YWY", "true");
			entity.setIs_match(Long.valueOf(is_match));
		}

		if (StringUtils.isNotBlank(dept_id)) {
			entity.getMap().put("dept_id", dept_id);
			entity.getMap().put("user_id", ui.getId());
		}

		// 数据级别判断开始
		Long __dept_id = StringUtils.isNotBlank(dept_id) ? Long.valueOf(dept_id) : ui.getDept_id(); // 默认为当前用户所在部门
		int max_dlevel = super.getMaxDLevel(ui.getId()); // 获取当前用户的最高可视部门级别
		logger.info("Max level : {}", max_dlevel);
		request.setAttribute("max_dlevel", max_dlevel);
		switch (max_dlevel) {
		case 9:
			// 集团及以下部门可见
			__dept_id = 0L; // 0表示部门根节点，即“多媒体事业本部”
			if (StringUtils.isNotBlank(dept_id)) {
				entity.getMap().put("dept_id", null);
				entity.getMap().put("fgs_dept_value", dept_id);
			}

			break;
		case 8:
			// 分公司及以下部门可见
			KonkaDept dept_fgs = super.getKonkaDeptForFgs(ui.getDept_id()); // 查询部门分公司
			if (null != dept_fgs && null != dept_fgs.getDept_id()) {
				__dept_id = dept_fgs.getDept_id(); // 分公司部门ID
				// entity.getMap().put("dept_id_start", __dept_id);
				entity.getMap().put("fgs_dept_value", __dept_id);
			}
			break;
		case 7:
			// 我所在的部门及以下部门可见
			__dept_id = ui.getDept_id(); // 默认为当前用户所在部门
			entity.getMap().put("dept_id_start", __dept_id);
			break;
		case 0:
			__dept_id = ui.getDept_id(); // 默认为当前用户所在部门
			// entity.getMap().put("dept_id_start", __dept_id);
			entity.getMap().put("filter_by_ywy_id_eq", ui.getId());
			break;
		default:
			// 出错
		}
		entity.getMap().put("session_user_id", ui.getId());
		// 数据级别判断结束

		// if (role_id_le_29) {// 若登陆用户属于管理员
		// if (StringUtils.isNotEmpty(dept_id)) {
		// KonkaDept _dept = super.getSuperiorForDeptType(Long.valueOf(dept_id),
		// 3);
		// if (null != _dept) {
		// entity.setBranch_area_name_2(_dept.getDept_sn());
		// }
		// }
		// } else if (role_id_ge_30_le_59) {// 若登陆用户属于分公司
		// if (role_id_30_or_34) {
		// KonkaDept _dept =
		// super.getSuperiorForDeptType(Long.valueOf(ui.getDept_id()), 3);
		// if (null != _dept)
		// entity.setBranch_area_name_2(_dept.getDept_sn());
		// } else {
		// entity.getMap().put("is_fgs_user_id", ui.getId());
		// if (ui.getDept_id() != null)
		// entity.getMap().put("is_fgs_dept_id", ui.getDept_id());
		// }
		//
		// } else if (role_id_ge_60) {// 若登陆用户属于业务员
		// entity.getMap().put("ywy_user_id", userInfo.getId());
		// } else {
		// super.renderHtml(response, "无权访问，无系统权限，请联系管理员授予系统角色。");
		// return null;
		// }

		if (GenericValidator.isInt(is_sdf)) {
			entity.setIs_sdf(Integer.valueOf(is_sdf));
		} else {
			entity.setIs_sdf(0);
			dynaBean.set("is_sdf", 0);
		}

		dynaBean.set("is_del", is_del);

		entity.setCustomer_type(c_index);
		entity.getMap().put("c_index", c_index);
		entity.getMap().put("user_name_like", user_name_like); // 业务员模糊查询字段
		entity.getMap().put("keyword", keyword);
		entity.getMap().put("code_like", code_like);
		if (StringUtils.isNotBlank(add_date_start)) {
			entity.getMap().put("add_date_start", add_date_start + " 00:00:00");
		}
		if (StringUtils.isNotBlank(add_date_end)) {
			entity.getMap().put("add_date_end", add_date_end + " 23:59:59");
		}

		Long recordCount = getFacade().getKonkaR3ShopService().getKonkaR3ShopForYwyCount(entity);
		pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
		entity.getRow().setFirst(pager.getFirstRow());
		entity.getRow().setCount(pager.getRowCount());

		List<KonkaR3Shop> entityList = getFacade().getKonkaR3ShopService().getKonkaR3ShopForYwyPaginatedList(entity);

		if (null != entityList && entityList.size() > 0) {
			for (KonkaR3Shop c : entityList) {
				KonkaR3Shop temp = new KonkaR3Shop();
				temp.setR3_code(c.getR3_code());
				temp = super.getFacade().getKonkaR3ShopService().getKonkaR3ShopSimpleStat(temp);
				c.getMap().put("stat", temp);
			}
		}
		request.setAttribute("entityList", entityList);

		if (StringUtils.isNotBlank(export)) {
			response.setCharacterEncoding("UTF-8");
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename=" + EncryptUtils.encodingFileName("R3客户")
					+ ".xls");
			entity.getRow().setCount(recordCount.intValue());
			dynaBean.set("export", export);
			List<KonkaR3Shop> entityList1 = getFacade().getKonkaR3ShopService().getKonkaR3ShopForYwyPaginatedList(
					entity);
			if (null != entityList1 && entityList1.size() > 0) {
				for (KonkaR3Shop c : entityList1) {
					KonkaR3Shop temp = new KonkaR3Shop();
					temp.setR3_code(c.getR3_code());
					temp = super.getFacade().getKonkaR3ShopService().getKonkaR3ShopSimpleStat(temp);
					c.getMap().put("stat", temp);
				}
			}
			request.setAttribute("entityList1", entityList1);
			return mapping.findForward("view");
		}

		// 分公司
		KonkaDept kd = new KonkaDept();
		if (max_dlevel == 9) {
			kd.setDept_id(0L);
		} else {
			kd.setDept_id(ui.getDept_id());
		}
		kd = super.getFacade().getKonkaDeptService().getKonkaDept(kd);
		entity.getMap().put("dept_name", kd.getDept_name());
		request.setAttribute("sybDeptInfoList", super.getDeptInfoListWithOutLimit(mapping, form, request, response));

		// 网点类型
		KonkaCategory kc = new KonkaCategory();
		kc.setC_type(10);
		request.setAttribute("konkaCategoryList", super.getFacade().getKonkaCategoryService().getKonkaCategoryList(kc));

		return mapping.findForward("list");
	}

	public ActionForward detail(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String id = (String) dynaBean.get("id");
		// String key = (String) dynaBean.get("key");
		if (!GenericValidator.isLong(id)) {
			this.saveError(request, "errors.long", new String[] { id });
			return mapping.findForward("list");
		}
		KonkaR3Shop entity = new KonkaR3Shop();
		entity.setId(Long.valueOf(id));
		// entity.getMap().put("is_assign", 1);
		entity = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(entity);

		// if(entity != null){
		// String mmt_shop_id = entity.getMap().get("mmt_shop_id").toString();
		//
		// EntpShop entpShop = new EntpShop();
		// entpShop.setShop_id(Long.valueOf(mmt_shop_id));
		// entpShop = getFacade().getEntpShopService().getEntpShop(entpShop);
		// if(entpShop!=null){
		// BaseProvinceList baseProvinceList = new BaseProvinceList();
		// baseProvinceList.setP_index(Long.valueOf(entpShop.getP_index()));
		// List<BaseProvinceList> baseProvinceListList =
		// super.getFacade().getBaseProvinceListService()
		// .getBaseProvinceListParentList(baseProvinceList);
		//
		// request.setAttribute("baseProvinceListList", baseProvinceListList);
		// }
		// request.setAttribute("entpShop", entpShop);
		// }else if(entity == null){
		// if(StringUtils.isNotBlank(key)){
		// String msg = "数据错误！此网点未匹配上买卖提网点，请解除匹配后重新匹配买卖提网点。";
		// super.renderJavaScript(response, "window.onload=function(){alert('" +
		// msg + "');history.back();}");
		// return null;
		// }else{
		// KonkaR3Shop r3 = new KonkaR3Shop();
		// r3.setId(Long.valueOf(id));
		// entity=getFacade().getKonkaR3ShopService().getKonkaR3Shop(r3);
		// }
		// }
		// 当月结算,当月回款
		KonkaR3Shop temp = new KonkaR3Shop();
		temp.setR3_code(entity.getR3_code());
		temp = super.getFacade().getKonkaR3ShopService().getKonkaR3ShopSimpleStat(temp);
		entity.getMap().put("stat", temp);

		super.copyProperties(form, entity);

		KonkaR3ShopLink kr = new KonkaR3ShopLink();
		kr.setR3_shop_id(Long.valueOf(id));
		kr.setIs_del(0);
		request.setAttribute("konkaR3ShopLinkList", super.getFacade().getKonkaR3ShopLinkService()
				.getKonkaR3ShopLinkList(kr));

		if (StringUtils.isNotBlank(entity.getCustomer_type())) {
			// 客户类型
			KonkaCategory kc = new KonkaCategory();
			kc.setC_type(10);
			kc.setIs_del(0);
			kc.setC_index(new Long(entity.getCustomer_type()));
			List<KonkaCategory> konkaCategoryList = super.getFacade().getKonkaCategoryService()
					.getKonkaCategoryList(kc);
			if (null != konkaCategoryList && konkaCategoryList.size() > 0) {
				kc = konkaCategoryList.get(0);
				request.setAttribute("customer_type_name", "[" + kc.getC_comm() + "]" + kc.getC_name());
			}

		}

		if (entity.getEntp_type() != null) {
			// 企业类型
			KonkaCategory kc = new KonkaCategory();
			kc = new KonkaCategory();
			kc.setC_type(12);
			kc.setIs_del(0);
			kc.setC_index(entity.getEntp_type());
			List<KonkaCategory> entpTypeList = super.getFacade().getKonkaCategoryService().getKonkaCategoryList(kc);
			if (null != entpTypeList && entpTypeList.size() > 0) {
				kc = entpTypeList.get(0);
				request.setAttribute("entp_type_name", kc.getC_name());
			}
		}

		if (StringUtils.isNotBlank(entity.getEntp_scale())) {
			// 客户规模（年销售额）
			KonkaCategory kc = new KonkaCategory();
			kc.setC_type(13);
			kc.setIs_del(0);
			kc.setC_index(new Long(entity.getEntp_scale()));
			List<KonkaCategory> entpScaleList = super.getFacade().getKonkaCategoryService().getKonkaCategoryList(kc);
			if (null != entpScaleList && entpScaleList.size() > 0) {
				kc = entpScaleList.get(0);
				request.setAttribute("entp_scale_name", kc.getC_name());
			}
		}

		if (entity.getEntp_p_index() != null && String.valueOf(entity.getEntp_p_index()).length() >= 6) {
			// 省/直辖市/自治区
			BaseProvinceListFour baseProvinceFour = new BaseProvinceListFour();
			baseProvinceFour.setP_index(new Long(String.valueOf(entity.getEntp_p_index()).substring(0, 2) + "0000"));
			baseProvinceFour.setDel_mark(0);
			List<BaseProvinceListFour> baseProvinceFourList = super.getFacade().getBaseProvinceListFourService()
					.getBaseProvinceListFourList(baseProvinceFour);
			if (null != baseProvinceFourList && baseProvinceFourList.size() > 0) {
				BaseProvinceListFour b = baseProvinceFourList.get(0);
				request.setAttribute("province", b.getP_name());
			}
			// 市
			baseProvinceFour.setP_index(new Long(String.valueOf(entity.getEntp_p_index()).substring(0, 4) + "00"));
			baseProvinceFourList = null;
			baseProvinceFourList = super.getFacade().getBaseProvinceListFourService().getBaseProvinceListFourList(
					baseProvinceFour);
			if (null != baseProvinceFourList && baseProvinceFourList.size() > 0) {
				BaseProvinceListFour b = baseProvinceFourList.get(0);
				request.setAttribute("city", b.getP_name());
			}
			// 县
			baseProvinceFour.setP_index(new Long(String.valueOf(entity.getEntp_p_index()).substring(0, 6)));
			baseProvinceFourList = null;
			baseProvinceFourList = super.getFacade().getBaseProvinceListFourService().getBaseProvinceListFourList(
					baseProvinceFour);
			if (null != baseProvinceFourList && baseProvinceFourList.size() > 0) {
				BaseProvinceListFour b = baseProvinceFourList.get(0);
				request.setAttribute("country", b.getP_name());
			}
			// 乡镇
			baseProvinceFour.setP_index(new Long(String.valueOf(entity.getEntp_p_index())));
			baseProvinceFourList = null;
			baseProvinceFourList = super.getFacade().getBaseProvinceListFourService().getBaseProvinceListFourList(
					baseProvinceFour);
			if (null != baseProvinceFourList && baseProvinceFourList.size() > 0) {
				BaseProvinceListFour b = baseProvinceFourList.get(0);
				request.setAttribute("town", b.getP_name());
			}
		}

		// 客户分配信息
		if (entity.getIs_match() == 1) {
			BranchAssign ba = new BranchAssign();
			ba.setKonka_r3_id(Long.valueOf(id));
			List<BranchAssign> baList = super.getFacade().getBranchAssignService().getBranchAssignList(ba);
			if (baList.size() > 0) {
				KonkaDept dept = new KonkaDept();
				if (baList.get(0).getJyb_id() != null) {
					dept.setDept_id(baList.get(0).getJyb_id());
					dept = super.getFacade().getKonkaDeptService().getKonkaDept(dept);
					if (dept != null) {
						request.setAttribute("jyb_name", dept.getDept_name());
					}
				}

				if (baList.get(0).getBsc_id() != null) {
					dept.setDept_id(baList.get(0).getBsc_id());
					dept = super.getFacade().getKonkaDeptService().getKonkaDept(dept);
					if (dept != null) {
						request.setAttribute("bsc_name", dept.getDept_name());
					}
				}

				if (baList.get(0).getUser_id() != null) {
					PeProdUser ppu = new PeProdUser();
					ppu.setId(baList.get(0).getUser_id());
					ppu = super.getFacade().getPeProdUserService().getPeProdUser(ppu);
					if (ppu != null) {
						request.setAttribute("ywy_name", ppu.getReal_name());
					}
				}

			}
		} else {
			request.setAttribute("is_not_match", true);
		}

		// if("0".equals(entity.getMap().get("mmt_shop_name").toString())){
		// request.setAttribute("mmt_shop_name","");
		// }else{
		// request.setAttribute("mmt_shop_name",
		// entity.getMap().get("mmt_shop_name"));
		// }
		// request.setAttribute("import_user_name",
		// entity.getMap().get("import_user_name"));

		// 附件
		Attachment attachment = new Attachment();
		attachment.setLink_id(new Long(id));
		attachment.setLink_tab("KONKA_R3_SHOP");
		attachment.setDel_mark(new Short("0"));
		request.setAttribute("attachmentList", getFacade().getAttachmentService().getAttachmentList(attachment));
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/detail.jsp"));
	}

	public ActionForward toMatch(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String id = (String) dynaBean.get("id");
		if (!GenericValidator.isLong(id)) {
			this.saveError(request, "errors.long", new String[] { id });
			return mapping.findForward("list");
		}
		KonkaR3Shop entity = new KonkaR3Shop();
		entity.setId(Long.valueOf(id));
		entity = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(entity);
		if (null == entity) {
			saveMessage(request, "entity.missing");
			return mapping.findForward("list");
		}
		entity.setQueryString(super.serialize(request, "str_pks", "method"));
		super.copyProperties(form, entity);
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/toMatch.jsp"));
	}

	public ActionForward Match(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String r3_shop_id = (String) dynaBean.get("id");
		String mod_id = (String) dynaBean.get("mod_id");
		String mmt_shop_id = (String) dynaBean.get("mmt_shop_id");
		String mmt_shop_name = (String) dynaBean.get("mmt_shop_name");
		super.getFacade().getKonkaR3MmtMatchService().match(r3_shop_id, mmt_shop_id, mmt_shop_name);

		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append(mapping.findForward("success").getPath());
		pathBuffer.append("&mod_id=" + mod_id);
		pathBuffer.append("&");
		pathBuffer.append(super.encodeSerializedQueryString(super.serialize(request, "id", "pks", "method")));
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end

		return forward;
	}

	public ActionForward addBatch(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);

		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/addBatch.jsp"));
	}

	public ActionForward saveBatch(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");
		int x = 0, y = 0, z = 0;
		String str = new String();
		PeProdUser ui = new PeProdUser();
		ui = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);

		String fileSavePath = "";
		String ctxDir = "";

		List<UploadFile> uploadFiles = super.uploadFile(form, MmtFilePathConfig.OTHERS_PATH);
		for (UploadFile uploadFile : uploadFiles) {
			if ("up_load_file".equals(uploadFile.getFormName())) {
				fileSavePath = uploadFile.getFileSavePath();
				break;
			}
		}
		ctxDir = getServlet().getServletContext().getRealPath(String.valueOf(File.separatorChar));
		// 附件保存路径更改遗留问题
		if (StringUtils.contains(fileSavePath, MmtFilePathConfig.S_OTHERS_PATH)) {
			ctxDir = "";
			fileSavePath = "/Attachment_new/konka-files/" + fileSavePath;
		}
		if (uploadFiles.size() == 1) {

			List<KonkaR3Shop> r3ShopList = new ArrayList<KonkaR3Shop>();
			int size = 0;// Excel表格执行验证的记录条数
			try {
				Workbook workbook = Workbook.getWorkbook(new File(ctxDir + fileSavePath));
				Sheet sheet = workbook.getSheet(0);
				String msg = "";// 上传的表格不符合规范时的返回信息
				for (int i = 1; i < sheet.getRows(); i++) {
					if (StringUtils.isNotBlank(sheet.getCell(0, i).getContents())) {// 判断数据库中定义的必填项是否为空
						KonkaR3Shop r3Shop = new KonkaR3Shop();
						r3Shop.setArea_name(sheet.getCell(0, i).getContents());
						r3Shop.setBranch_area_name(sheet.getCell(1, i).getContents());
						String _type = sheet.getCell(2, i).getContents().trim();
						// r3Shop.setCustomer_type(type);//
						// 客户群类型：1.乡镇客户；2.县级客户；3.核心100；4.白金100；5.代理客户
						String status = sheet.getCell(4, i).getContents().trim();// 交易状态：1.有交易；2.无交易
						String r3_code = sheet.getCell(3, i).getContents().trim();// R3编码
						String customer_name = sheet.getCell(8, i).getContents().trim();// 客户名称

						/*
						 * 判断R3编码是否为空
						 */
						if (!StringUtils.isNotBlank(r3_code)) {
							msg += "请输入第" + (i + 1) + "行的R3编码！";
							super.renderJavaScript(response, "alert('" + msg + "');history.go(-1);");
							return null;
						} else {
							r3Shop.setR3_code(sheet.getCell(3, i).getContents());// R3编码
						}

						/*
						 * 判断是不是规定的5种客户类型中的一种
						 */
						if (StringUtils.isNotBlank(_type)) {
							if (!_type.equals("乡镇客户") && !_type.equals("县级客户") && !_type.equals("核心500")
									&& !_type.equals("白金100") && !_type.equals("代理客户")) {
								msg += "请输入正确的第" + (i + 1) + "行的客户群类型：乡镇客户、县级客户、核心500、白金100或代理客户！";
								super.renderJavaScript(response, "alert('" + msg + "');history.go(-1);");
								return null;
							} else {
								r3Shop.setCustomer_type(_type);
							}
						}

						/*
						 * 判断是不是规定的交易状态中2种状态客的一种
						 */
						if (StringUtils.isNotBlank(status)) {
							if (status.equals("有交易")) {
								r3Shop.setStatus(1);
							} else if (status.equals("无交易")) {
								r3Shop.setStatus(2);
							} else {
								msg += "请输入正确的第" + (i + 1) + "行的交易与否：有交易或无交易！";
								super.renderJavaScript(response, "alert('" + msg + "');history.go(-1);");
								return null;
							}
						}

						/*
						 * 判断客户名称是否为空
						 */
						if (!StringUtils.isNotBlank(customer_name)) {
							msg += "请填写第" + (i + 1) + "行的客户名称！";
							super.renderJavaScript(response, "alert('" + msg + "');history.go(-1);");
							return null;
						} else {
							r3Shop.setCustomer_name(sheet.getCell(8, i).getContents());// 客户名称
						}

						r3Shop.setHandle_name(sheet.getCell(5, i).getContents());
						r3Shop.setBranch_area_name_2(sheet.getCell(6, i).getContents());
						r3Shop.setCustomer_code(sheet.getCell(7, i).getContents().trim());
						r3Shop.setR3_desc(sheet.getCell(9, i).getContents());
						r3Shop.setMerge_code_2010(sheet.getCell(10, i).getContents().trim());

						r3ShopList.add(r3Shop);
						size = size + 1;
					} else {
						String sum_contents = "";
						StringBuffer sb = new StringBuffer();
						for (int j = 1; j < 11; j++) {
							if (null != sheet.getCell(j, i)) {
								sb.append(sheet.getCell(j, i).getContents().trim());
							}
						}
						sum_contents = sb.toString();
						if (StringUtils.isNotBlank(sum_contents)) {
							size = size + 1;
						}
						break;
					}
				}
				workbook.close();
			} catch (BiffException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}

			if (r3ShopList != null && r3ShopList.size() > 0 && r3ShopList.size() == size) {
				z = r3ShopList.size();
				for (int i = 0; i < r3ShopList.size(); i++) {
					KonkaR3Shop entity = r3ShopList.get(i);
					entity.setImport_user_id(ui.getId());
					entity.setImport_date(new Date());

					KonkaR3Shop r3Shop = new KonkaR3Shop();
					r3Shop.setR3_code(r3ShopList.get(i).getR3_code());
					try {
						r3Shop = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(r3Shop);

					} catch (Exception e) {
						super.renderJavaScript(response, "alert('R3编码为" + r3ShopList.get(i).getR3_code()
								+ "的数据在数据库中可能存在重复，请联系管理员');history.go(-1);");
						return null;
					}
					if (r3Shop != null) {
						entity.setIs_del(r3Shop.getIs_del());
						entity.setIs_match(r3Shop.getIs_match());
						entity.setId(r3Shop.getId());
						try {
							// super.getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(entity);
							str += r3Shop.getR3_code() + ",";
							x = x + 1;
						} catch (Exception ex) {
							log.info(ex.getMessage() + "\n" + (i + 1) + "");
						}
					} else {
						try {
							entity.setIs_del(new Long(0));
							entity.setIs_match(new Long(0));
							super.getFacade().getKonkaR3ShopService().createKonkaR3Shop(entity);
							y = y + 1;
						} catch (Exception ex) {
							log.info(ex.getMessage() + "\n" + (i + 1) + "");
						}
					}
				}
			} else if (r3ShopList != null && r3ShopList.size() > 0 && r3ShopList.size() < size) {
				super.renderJavaScript(response, "alert('Excel表格内容错误:第" + (size + 1)
						+ "行的第一列：区域不能为空！');history.go(-1);");
				return null;
			} else {
				super.renderJavaScript(response, "alert('Excel表格内容错误:第一行第一列的区域不能为空！');history.go(-1);");
				return null;
			}
		} else {
			super.renderJavaScript(response, "alert('" + "Excel为空" + "');history.go(-1);");
			return null;
		}
		String msg = null;
		if (x == 0) {
			msg = "总数为：" + z + "条信息，新增了" + y + "条R3网点信息。";
		} else if (x > 0) {
			msg = "总数为：" + z + "条信息，新增了" + y + "条R3网点信息，有" + x + "条信息与数据库中的数据R3编码重复，重复的编码为："
					+ str.substring(0, str.length() - 1);
		}
		super.renderJavaScript(response, "alert('" + msg + "');location.href='KonkaR3MmtMatch.do?method=list&mod_id="
				+ mod_id + "';");
		return null;
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (null == super.checkUserModPopeDom(form, request, "2")) {
			return super.checkPopedomInvalid(request, response);
		}

		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String id = (String) dynaBean.get("id");
		if (!GenericValidator.isLong(id)) {
			this.saveError(request, "errors.long", new String[] { id });
			return mapping.findForward("list");
		}
		KonkaR3Shop entity = new KonkaR3Shop();
		entity.setId(Long.valueOf(id));
		entity.getMap().put("is_assign", 1);
		entity = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(entity);
		if (null == entity) {
			saveMessage(request, "entity.missing");
			return mapping.findForward("list");
		}
		entity.setQueryString(super.serialize(request, "str_pks", "method"));
		super.copyProperties(form, entity);
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/toEdit.jsp"));
	}

	public ActionForward toModify(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String id = (String) dynaBean.get("id");
		if (!GenericValidator.isLong(id)) {
			this.saveError(request, "errors.long", new String[] { id });
			return mapping.findForward("list");
		}
		KonkaR3Shop entity = new KonkaR3Shop();
		entity.setId(Long.valueOf(id));
		entity = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(entity);
		if (null == entity) {
			saveMessage(request, "entity.missing");
			return mapping.findForward("list");
		}
		// 当月结算,当月回款
		KonkaR3Shop temp = new KonkaR3Shop();
		temp.setR3_code(entity.getR3_code());
		temp = super.getFacade().getKonkaR3ShopService().getKonkaR3ShopSimpleStat(temp);
		entity.getMap().put("stat", temp);

		entity.setQueryString(super.serialize(request, "id", "method"));
		super.copyProperties(form, entity);

		Boolean role_id_ge_30 = false;
		PeRoleUser role_user = new PeRoleUser();
		role_user.setUser_id(super.getSessionUserInfo(request).getId());
		// List<PeRoleUser> roleList =
		// super.getFacade().getPeRoleUserService().getPeRoleUserList(role_user);
		// if (roleList.size() > 0) {
		// for (PeRoleUser role_id : roleList) {
		// if (role_id.getRole_id() >= 30) {
		// role_id_ge_30 = true;
		// }
		// }
		// }

		// update by zhou 2013/10/25
		// 规则判定:当一个人的角色已经是大权限的时候,就以最大的权限给他
		List<PeRoleUser> roleList = super.getFacade().getPeRoleUserService().getPeRoleUserList(role_user);
		if (roleList.size() > 0) {
			for (PeRoleUser _roleUser : roleList) {
				if (_roleUser.getRole_id() >= 30l) {
					role_id_ge_30 = true;// 如果已经确认是分公司角色,直接跳出
					break;
				} else {
					role_id_ge_30 = false;// 如果已经确认是总部角色,直接跳出
					break;
				}
			}
		}

		// KonkaR3Shop r3 = new KonkaR3Shop();
		// r3.setIs_del(0L);
		// // if (role.getRole_id() >= 30) {
		// if (role_id_ge_30) {
		// KonkaDept dept = new KonkaDept();
		// dept.setDept_id(super.getSessionUserInfo(request).getDept_id());
		// dept = getFacade().getKonkaDeptService().getKonkaDept(dept);
		// if (dept.getDept_type() == 3) {// 分公司
		// r3.setBranch_area_name(dept.getDept_name());
		// dynaBean.set("branch_area_name", dept.getDept_name());
		// } else if (dept.getDept_type() == 4 || dept.getDept_type() == 5) {//
		// 经营部
		// r3.setBranch_area_name(super.getSuperiorForDeptType(dept.getDept_id(),
		// 3).getDept_name());
		// dynaBean.set("branch_area_name",
		// super.getSuperiorForDeptType(dept.getDept_id(), 3).getDept_name());
		// }
		// }
		// List<KonkaR3Shop> BranchList =
		// getFacade().getKonkaR3ShopService().getKonkaR3ShopGroupByBranchAreaName(r3);

		KonkaDept konkaDept = new KonkaDept();
		konkaDept.setDept_type(3);
		if (role_id_ge_30) {
			konkaDept.setDept_id(super.getSessionUserInfo(request).getDept_id());
		}
		konkaDept.getMap().put("order_by_dept_name", true);
		List<KonkaDept> kList = super.getFacade().getKonkaDeptService().getKonkaDeptList(konkaDept);
		request.setAttribute("BranchList", kList);

		// 客户类型
		KonkaCategory kc = new KonkaCategory();
		kc.setC_type(10);
		kc.setIs_del(0);
		request.setAttribute("konkaCategoryList", super.getFacade().getKonkaCategoryService().getKonkaCategoryList(kc));

		// 企业类型
		kc = new KonkaCategory();
		kc.setC_type(12);
		kc.setIs_del(0);
		request.setAttribute("entpTypeList", super.getFacade().getKonkaCategoryService().getKonkaCategoryList(kc));

		// 客户规模（年销售额）
		kc = new KonkaCategory();
		kc.setC_type(13);
		kc.setIs_del(0);
		request.setAttribute("entpScaleList", super.getFacade().getKonkaCategoryService().getKonkaCategoryList(kc));

		KonkaR3ShopLink kr = new KonkaR3ShopLink();
		kr.setR3_shop_id(Long.valueOf(id));
		kr.setIs_del(0);
		request.setAttribute("konkaR3ShopLinkList", super.getFacade().getKonkaR3ShopLinkService()
				.getKonkaR3ShopLinkList(kr));

		if (null != entity.getEntp_p_index() && String.valueOf(entity.getEntp_p_index()).length() >= 6) {
			request.setAttribute("province", String.valueOf(entity.getEntp_p_index()).substring(0, 2) + "0000");
			request.setAttribute("city", String.valueOf(entity.getEntp_p_index()).substring(0, 4) + "00");
			request.setAttribute("country", String.valueOf(entity.getEntp_p_index()).substring(0, 6));
			request.setAttribute("town", String.valueOf(entity.getEntp_p_index()));
		}

		// PeProdUser user = new PeProdUser();
		// user.setCust_id(Long.valueOf(id));
		// user = getFacade().getPeProdUserService().getPeProdUser(user);
		// if (null != user) {
		// dynaBean.set("user_id", user.getId());
		// dynaBean.set("user_name", user.getUser_name());
		// dynaBean.set("user_type", user.getUser_type());
		// DESPlus des = new DESPlus();
		// dynaBean.set("pass_word", des.decrypt(user.getPass_word()));
		// dynaBean.set("real_name", user.getReal_name());
		// dynaBean.set("link_phone", user.getLink_phone());
		// dynaBean.set("link_addr", user.getLink_addr());
		// }

		// 附件
		Attachment attachment = new Attachment();
		attachment.setLink_id(new Long(id));
		attachment.setLink_tab("KONKA_R3_SHOP");
		attachment.setDel_mark(new Short("0"));
		request.setAttribute("attachmentList", getFacade().getAttachmentService().getAttachmentList(attachment));

		return mapping.findForward("input");
	}

	/**
	 * 修改R3 网点信息
	 */
	public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");
		// String user_id = (String) dynaBean.get("user_id");
		// String user_name = (String) dynaBean.get("user_name");
		// String user_type = (String) dynaBean.get("user_type");
		// String pass_word = (String) dynaBean.get("pass_word");
		// String real_name = (String) dynaBean.get("real_name");
		// String link_phone = (String) dynaBean.get("link_phone");
		// String link_addr = (String) dynaBean.get("link_addr");
		String request_from = (String) dynaBean.get("request_from");

		String[] r3_link_position = (String[]) dynaBean.get("r3_link_position");
		String[] r3_link_real_name = (String[]) dynaBean.get("r3_link_real_name");
		String[] r3_link_sex = (String[]) dynaBean.get("r3_link_sex");
		String[] r3_link_birthday = (String[]) dynaBean.get("r3_link_birthday");
		String[] r3_link_tel = (String[]) dynaBean.get("r3_link_tel");
		String[] r3_link_email = (String[]) dynaBean.get("r3_link_email");
		String[] r3_link_favor = (String[]) dynaBean.get("r3_link_favor");

		String province = (String) dynaBean.get("province");
		String city = (String) dynaBean.get("city");
		String country = (String) dynaBean.get("country");
		String town = (String) dynaBean.get("town");

		if (StringUtils.isNotBlank(request_from)) {
			if ("zmd".equalsIgnoreCase(request_from)) {
				dynaBean.set("request_from", request_from);
			}
		}

		String branch_area_name_2 = (String) dynaBean.get("branch_area_name_2");
		String branch_area_name_2_old = (String) dynaBean.get("branch_area_name_2_old");

		KonkaR3Shop entity = new KonkaR3Shop();
		super.copyProperties(entity, form);

		// 附件处理
		List<UploadFile> uploadFileList = super.uploadFile(form, MmtFilePathConfig.OTHERS_PATH, true, 0,
				new int[] { 240 });
		List<Attachment> filesAttachmentList = new ArrayList<Attachment>();
		Attachment filesAttachment = null;
		for (UploadFile uploadFile : uploadFileList) {
			filesAttachment = new Attachment();
			filesAttachment.setFile_name(uploadFile.getFileName());
			filesAttachment.setFile_type(uploadFile.getContentType());
			filesAttachment.setFile_size(new Integer(uploadFile.getFileSize()));
			filesAttachment.setSave_path(uploadFile.getFileSavePath());
			filesAttachment.setSave_name(uploadFile.getFileSaveName());
			filesAttachment.setDel_mark(new Short("0"));
			filesAttachmentList.add(filesAttachment);
		}
		entity.setAttachmentList(filesAttachmentList);

		if (StringUtils.isNotBlank(branch_area_name_2) && StringUtils.isNotBlank(branch_area_name_2_old)
				&& !StringUtils.equalsIgnoreCase(branch_area_name_2, branch_area_name_2_old)) {
			entity.getMap().put("remove_branch_assign", true);
			KonkaDept dept = new KonkaDept();
			dept.setDept_sn(branch_area_name_2);
			dept = super.getFacade().getKonkaDeptService().getKonkaDept(dept);
			if (null != dept) {
				entity.setBranch_area_name(dept.getDept_name());
			}
		}

		// PeProdUser user = new PeProdUser();
		// if (StringUtils.isNotBlank(user_id)) {
		// user.setId(Long.valueOf(user_id));
		// }
		// user.setUser_name(user_name);
		// if (StringUtils.isBlank(user_type)) {
		// user_type = "2";
		// }
		// user.setUser_type(Integer.valueOf(user_type));
		// DESPlus des = new DESPlus();
		// user.setPass_word(des.encrypt(pass_word));
		// user.setReal_name(real_name);
		// user.setLink_phone(link_phone);
		// user.setLink_addr(link_addr);
		// user.setProd_entp_id(185L);
		// entity.setPeProdUser(user);

		// 客户联系人信息
		entity.setR3_link_position(r3_link_position);
		entity.setR3_link_real_name(r3_link_real_name);
		entity.setR3_link_sex(r3_link_sex);
		entity.setR3_link_birthday(r3_link_birthday);
		entity.setR3_link_tel(r3_link_tel);
		entity.setR3_link_email(r3_link_email);
		entity.setR3_link_favor(r3_link_favor);

		// 维护时间
		entity.setCreate_date(new Date());

		if (StringUtils.isNotBlank(town)) {
			entity.setEntp_p_index(new Long(town));
		} else if (StringUtils.isNotBlank(country)) {
			entity.setEntp_p_index(new Long(country));
		} else if (StringUtils.isNotBlank(city)) {
			entity.setEntp_p_index(new Long(city));
		} else if (StringUtils.isNotBlank(province)) {
			entity.setEntp_p_index(new Long(province));
		}

		super.getFacade().getKonkaR3ShopService().modifyKonkaR3ShopAndLink(entity);
		// super.getFacade().getKonkaR3ShopService().modifyKonkaR3ShopWithPeProdUser(entity);

		// the line below is added for pagination
		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append(mapping.findForward("success").getPath());
		pathBuffer.append("&mod_id=" + mod_id);
		pathBuffer.append("&");
		logger.info(entity.getQueryString());
		pathBuffer.append(super.encodeSerializedQueryString(entity.getQueryString()));
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end
		return forward;
	}

	public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		super.getModPopeDom(form, request);
		String r3_shop_id = (String) dynaBean.get("id");
		String mod_id = (String) dynaBean.get("mod_id");
		String mmt_shop_id = (String) dynaBean.get("mmt_shop_id");
		String mmt_shop_name = (String) dynaBean.get("mmt_shop_name");
		if (GenericValidator.isLong(mmt_shop_id)) {
			KonkaR3MmtMatch r3MmtMatch = new KonkaR3MmtMatch();
			r3MmtMatch.setR3_shop_id(new Long(r3_shop_id));
			super.getFacade().getKonkaR3MmtMatchService().removeKonkaR3MmtMatch(r3MmtMatch);
			r3MmtMatch.setMmt_shop_id(new Long(mmt_shop_id));
			r3MmtMatch.setMmt_shop_name(mmt_shop_name);
			super.getFacade().getKonkaR3MmtMatchService().createKonkaR3MmtMatch(r3MmtMatch);
			KonkaR3Shop r3Shop = new KonkaR3Shop();
			r3Shop.setId(Long.valueOf(r3_shop_id));
			r3Shop.setIs_match(new Long(1));
			super.getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(r3Shop);
		} else {
			KonkaR3Shop r3Shop = new KonkaR3Shop();
			r3Shop.setId(Long.valueOf(r3_shop_id));
			r3Shop.setIs_match(new Long(0));
			super.getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(r3Shop);
			KonkaR3MmtMatch r3MmtMatch = new KonkaR3MmtMatch();
			r3MmtMatch.setR3_shop_id(new Long(r3_shop_id));
			super.getFacade().getKonkaR3MmtMatchService().removeKonkaR3MmtMatch(r3MmtMatch);
		}

		String request_from = (String) dynaBean.get("request_from");
		if ("zmd".equalsIgnoreCase(request_from)) {
			super.saveMessage(request, "konka.xx.zmd.message.zmdadmin.update.success");
			String ctx = super.getCtxPath(request);
			super.renderJavaScript(response, "location.href='" + ctx
					+ "/manager/zmd/KonkaXxZmdAuditUserInfo.do?method=list&mod_id=810300'");
			return null;
		}

		// the line below is added for pagination
		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append("/admin/KonkaR3MmtMatch.do?method=list&is_match=1");
		pathBuffer.append("&mod_id=" + mod_id);
		pathBuffer.append("&");
		pathBuffer.append(super.encodeSerializedQueryString(super.serialize(request, "id", "pks", "method")));
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end

		return forward;
	}

	public ActionForward getR3_code(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;
		String id = (String) dynaBean.get("id");
		StringBuffer sb = new StringBuffer("[");

		KonkaR3Shop entity = new KonkaR3Shop();
		entity.setId(Long.valueOf(id));
		entity = getFacade().getKonkaR3ShopService().getKonkaR3Shop(entity);

		sb.append("{\"r3_code\":\"" + String.valueOf(entity.getR3_code()) + "\"},");
		sb.append("{\"end\":\"\"}]");

		super.renderJson(response, sb.toString());
		return null;
	}

	public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request,// 解除匹配
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;
		super.getModPopeDom(form, request);
		String r3_shop_id = (String) dynaBean.get("r3_shop_id");
		if (!GenericValidator.isLong(r3_shop_id)) {
			this.saveError(request, "errors.long", new String[] { r3_shop_id });
			return mapping.findForward("list");
		}
		KonkaR3Shop r3Shop = new KonkaR3Shop();
		r3Shop.setId(Long.valueOf(r3_shop_id));
		r3Shop.setIs_match(new Long(0));
		super.getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(r3Shop);
		KonkaR3MmtMatch r3MmtMatch = new KonkaR3MmtMatch();
		r3MmtMatch.setR3_shop_id(new Long(r3_shop_id));
		super.getFacade().getKonkaR3MmtMatchService().removeKonkaR3MmtMatch(r3MmtMatch);
		return this.list(mapping, form, request, response);
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (null == super.checkUserModPopeDom(form, request, "4")) {
			return super.checkPopedomInvalid(request, response);
		}

		DynaBean dynaBean = (DynaBean) form;
		String id = (String) dynaBean.get("id");
		String[] pks = (String[]) dynaBean.get("pks");

		if (!StringUtils.isBlank(id) && GenericValidator.isLong(id)) {
			
			PeProdUser ui = (PeProdUser) super.getSessionAttribute(request, Constants.USER_INFO);
			
			//插入停用记录表
			KonkaR3Shop kShop = new KonkaR3Shop();
			kShop.setId(new Long(id));
			kShop = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(kShop);
			
			if(null != kShop){
				KonkaStoreUserCInfo k = new KonkaStoreUserCInfo();
				k.setAdd_date(new Date());
				k.setAdd_user_id(ui.getId());
				k.setAdd_user_job_id(ui.getJob_id());
				k.setAdd_user_name(ui.getUser_name());
				k.setC_type(40);
				k.setChange_info("该客户被停用!");
				k.setSs_id(kShop.getId());
				k.setSs_name(kShop.getCustomer_name());
				super.getFacade().getKonkaStoreUserCInfoService().createKonkaStoreUserCInfo(k);
			}
			
			KonkaR3Shop entity = new KonkaR3Shop();
			entity.setId(new Long(id));
			entity.setIs_del(1l);
			getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(entity);

			// 停止用户信息
			String c_ids = id;
			JBasePartner jbp = new JBasePartner();
			jbp.setC_id(Long.valueOf(id));
			List<JBasePartner> jbpList = super.getFacade().getJBasePartnerService().getJBasePartnerList(jbp);
			if (jbpList.size() > 0) {
				for (JBasePartner jj : jbpList) {
					c_ids = c_ids + "," + jj.getPartner_c_id();
				}
			}
			
			PeProdUser pUser = new PeProdUser();
			// pUser.setCust_id(Long.valueOf(id));
			pUser.getMap().put("c_ids", c_ids);
			pUser.setIs_del(1);
			super.getFacade().getPeProdUserService().modifyPeProdUser(pUser);

			saveMessage(request, "konka.close.success");
		} else if (!ArrayUtils.isEmpty(pks)) {
			KonkaR3Shop entity = new KonkaR3Shop();
			entity.getMap().put("pks", pks);
			entity.setIs_del(1l);
			getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(entity);
			saveMessage(request, "konka.close.success");
		}
		// the line below is added for pagination
		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append(mapping.findForward("success").getPath());
		pathBuffer.append("&");
		pathBuffer.append(super.encodeSerializedQueryString(super.serialize(request, "id", "method")));
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end
		return forward;
	}

	public ActionForward reStart(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (null == super.checkUserModPopeDom(form, request, "4")) {
			return super.checkPopedomInvalid(request, response);
		}

		DynaBean dynaBean = (DynaBean) form;
		String id = (String) dynaBean.get("id");
		String[] pks = (String[]) dynaBean.get("pks");

		if (!StringUtils.isBlank(id) && GenericValidator.isLong(id)) {
			
			PeProdUser ui = (PeProdUser) super.getSessionAttribute(request, Constants.USER_INFO);
			
			//插入停用记录表
			KonkaR3Shop kShop = new KonkaR3Shop();
			kShop.setId(new Long(id));
			kShop = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(kShop);
			
			if(null != kShop){
				KonkaStoreUserCInfo k = new KonkaStoreUserCInfo();
				k.setAdd_date(new Date());
				k.setAdd_user_id(ui.getId());
				k.setAdd_user_job_id(ui.getJob_id());
				k.setAdd_user_name(ui.getUser_name());
				k.setC_type(40);
				k.setChange_info("该客户被启用!");
				k.setSs_id(kShop.getId());
				k.setSs_name(kShop.getCustomer_name());
				super.getFacade().getKonkaStoreUserCInfoService().createKonkaStoreUserCInfo(k);
			}
			
			KonkaR3Shop entity = new KonkaR3Shop();
			entity.setId(new Long(id));
			entity.setIs_del(0L);
			getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(entity);

			// 停止用户信息
			String c_ids = id;
			JBasePartner jbp = new JBasePartner();
			jbp.setC_id(Long.valueOf(id));
			List<JBasePartner> jbpList = super.getFacade().getJBasePartnerService().getJBasePartnerList(jbp);
			if (jbpList.size() > 0) {
				for (JBasePartner jj : jbpList) {
					c_ids = c_ids + "," + jj.getPartner_c_id();
				}
			}

			PeProdUser pUser = new PeProdUser();
			// pUser.setCust_id(Long.valueOf(id));
			pUser.getMap().put("c_ids", c_ids);
			pUser.setIs_del(0);
			super.getFacade().getPeProdUserService().modifyPeProdUser(pUser);
			saveMessage(request, "konka.restart.success");
		} else if (!ArrayUtils.isEmpty(pks)) {
			KonkaR3Shop entity = new KonkaR3Shop();
			entity.getMap().put("pks", pks);
			entity.setIs_del(0L);
			getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(entity);
			saveMessage(request, "konka.restart.success");
		}
		// the line below is added for pagination
		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append(mapping.findForward("success").getPath());
		pathBuffer.append("&");
		pathBuffer.append(super.encodeSerializedQueryString(super.serialize(request, "id", "method")));
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end
		return forward;
	}

	public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (null == super.checkUserModPopeDom(form, request, "1")) {
			return super.checkPopedomInvalid(request, response);
		}

		saveToken(request);
		setNaviStringToRequestScope(form, request);
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/user.jsp"));
	}

	public ActionForward validateName(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;

		String user_name = (String) dynaBean.get("user_name");
		UserInfo entity = new UserInfo();
		entity.setUser_name(user_name);
		entity.setUser_state(0);
		Long count = super.getFacade().getUserInfoService().getUserInfoCount(entity);
		if (0L == count) {
			super.renderText(response, "false");
		} else {
			super.renderText(response, "true");
		}
		return null;
	}

	public ActionForward toBind(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/toBind.jsp"));
	}

	// 同步R3客户
	public ActionForward tbBatch(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");

		Long count = super.getFacade().getKonkaR3ShopService().createKonkaR3ShopForTb();
		saveMessage(request, "prodadmin.md.tb.success", new String[] { count.toString() });

		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append(mapping.findForward("success").getPath());
		pathBuffer.append("&mod_id=" + mod_id);
		pathBuffer.append("&");
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end
		return forward;
	}

	public ActionForward locatInMap(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String id = (String) dynaBean.get("id");

		KonkaR3Shop entity = new KonkaR3Shop();
		entity.setId(Long.valueOf(id));

		entity = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(entity);
		if (null != entity) {
			request.setAttribute("shop", entity);
		}
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/locatInMap.jsp"));
	}

	// 跳转到指定同步参数的页面
	public ActionForward showR3ShopDataPage(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		List<KonkaDept> kdList = new LinkedList<KonkaDept>();
		if (request.getSession().getAttribute("kdList") == null) {
			// 分公司
			KonkaDept kd = new KonkaDept();
			kd.setDept_type(3);
			kd.getMap().put("order_by_dept_name", true);
			kdList = super.getFacade().getKonkaDeptService().getKonkaDeptList(kd);
			request.getSession().setAttribute("kdList", kdList);
		}

		String mod_id = (String) dynaBean.get("mod_id");
		dynaBean.set("mod_id", mod_id);
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/getR3ShopData.jsp"));
	}

	public ActionForward getR3ShopData(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		// get data from r3Interface
		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");
		dynaBean.set("mod_id", mod_id);
		String bukrs = (String) dynaBean.get("sales_dept");
		String kunnr = (String) dynaBean.get("r3_code");
		String in_date = (String) dynaBean.get("in_date");

		List<KNA1> entityList = new ArrayList<KNA1>();
		ReturnInfo<KNA1> info = new ReturnInfo<KNA1>();
		if (kunnr != null && kunnr.length() > 0) {
			info = super.getFacade().getR3WebInterfaceService().getCustomerList(in_date, bukrs,
					new String[] { kunnr });
			entityList = info.getDataResult();

		} else {

			// 根据分公司的编码查询该分公司及下属经办的销售组织
			KonkaSalesDept ksd = new KonkaSalesDept();
			ksd.setP_sales_org_code(bukrs);
			List<KonkaSalesDept> ksdList = super.getFacade().getKonkaSalesDeptService().getKonkaSalesDeptList(ksd);

			for (KonkaSalesDept t : ksdList) {

				// List<KNA1> list =
				// super.getFacade().getR3WebInterfaceService().getCustomerList(in_date,
				// t.getSales_org_code(), null);
				info = super.getFacade().getR3WebInterfaceService()
						.getCustomerList(in_date, t.getSales_org_code(), null);
				List<KNA1> list = info.getDataResult();

				if (list.size() > 0) {
					for (KNA1 temp : list) {
						entityList.add(temp);
					}
				}
			}

			// entityList =
			// super.getFacade().getR3WebInterfaceService().getCustomerList(in_date,
			// bukrs, null);
		}
		request.setAttribute("entityList", entityList);

		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/getR3ShopData.jsp"));

	}

	public ActionForward syncFromR3(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		// get data from r3Interface
		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");
		dynaBean.set("mod_id", mod_id);
		String bukrs = (String) dynaBean.get("sales_dept");
		String kunnrs = (String) dynaBean.get("kunnrs");
		String in_date = (String) dynaBean.get("in_date");
		String[] kunnr = null;
		StringBuffer sb = new StringBuffer(kunnrs);
		sb.deleteCharAt(sb.length() - 1);
		kunnr = sb.toString().split("-");

		super.getFacade().getKonkaR3ShopService().createKonkaR3ShopForTb2(bukrs, in_date, kunnr);

		saveMessage(request, "prodadmin.md.tb.success", new String(String.valueOf(kunnr.length)));
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/getR3ShopData.jsp"));
	}

	public ActionForward deleteFile(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;

		String id = (String) dynaBean.get("id");

		if (StringUtils.isNotBlank(id) && GenericValidator.isLong(id)) {
			Attachment entity = new Attachment();
			entity.setId(new Long(id));
			super.getFacade().getAttachmentService().removeAttachment(entity);
		}

		super.renderText(response, "success");
		return null;
	}

	public ActionForward plSdfEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;

		setNaviStringToRequestScope(form, request);
		String[] pks = (String[]) dynaBean.get("pks");

		super.encodeCharacterForGetMethod(dynaBean, request);
		dynaBean.set("category_id", -1);
		dynaBean.set("queryString", super.serialize(request, "id", "method"));
		KonkaR3Shop entity = new KonkaR3Shop();
		entity.getMap().put("selects", StringUtils.join(pks, ","));

		List<KonkaR3Shop> konkaR3ShopList = super.getFacade().getKonkaR3ShopService().getKonkaR3ShopList(entity);

		dynaBean.set("pks", pks);
		request.setAttribute("konkaR3ShopList", konkaR3ShopList);
		return new ActionForward(response.encodeRedirectURL("/admin/KonkaR3MmtMatch/sdf_form.jsp"));
	}

	public ActionForward sdfSave(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;

		setNaviStringToRequestScope(form, request);
		String str_pks = (String) dynaBean.get("str_pks");
		String mod_id = (String) dynaBean.get("mod_id");
		String shop_type = (String) dynaBean.get("shop_type");

		super.encodeCharacterForGetMethod(dynaBean, request);

		KonkaR3Shop entity = new KonkaR3Shop();
		String[] pks = str_pks.split(",");
		for (int i = 0; i < pks.length; i++) {
			entity.setId(Long.valueOf(pks[i]));
			entity.setIs_sdf(Integer.valueOf(shop_type));
			super.getFacade().getKonkaR3ShopService().modifyKonkaR3Shop(entity);
		}

		saveMessage(request, "entity.updated");
		
		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append(mapping.findForward("success").getPath());
		pathBuffer.append("&mod_id=" + mod_id);
		pathBuffer.append("&");
		pathBuffer.append(super.encodeSerializedQueryString(super.serialize(request, "id", "pks", "method")));
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end

		return forward;
	}

}