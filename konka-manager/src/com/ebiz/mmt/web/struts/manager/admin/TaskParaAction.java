package com.ebiz.mmt.web.struts.manager.admin;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.validator.GenericValidator;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ebiz.mmt.domain.ImportDataTypes;
import com.ebiz.mmt.domain.KonkaDept;
import com.ebiz.mmt.domain.KonkaR3Shop;
import com.ebiz.mmt.domain.PeProdUser;
import com.ebiz.mmt.domain.PeRoleUser;
import com.ebiz.mmt.domain.TaskPara;
import com.ebiz.mmt.web.Constants;
import com.ebiz.mmt.web.struts.BaseAction;
import com.ebiz.ssi.web.struts.bean.Pager;

/**
 * Code by AutoGenerated Builder AutoGenerated Builder Version 2.1
 * 
 * @author Gao,YongXiang
 * @datetime 2011-11-14 10:15:03
 */
public class TaskParaAction extends BaseAction {
	public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		return this.list(mapping, form, request, response);
	}

	public List<TaskPara> getTaskParaList(int year, String name) {
		List<TaskPara> taskParaList = new ArrayList<TaskPara>();
		TaskPara tp = new TaskPara();
		tp.setYear(year);
		tp.setTask_name(name);
		tp = getFacade().getTaskParaService().getTaskPara(tp);
		if (null == tp) {
			tp = new TaskPara();
			tp.setTask_name(name);
			tp.setYear(year);
		}
		taskParaList.add(tp);

		tp = new TaskPara();
		tp.setYear(year + 1);
		tp.setTask_name(name);
		tp = getFacade().getTaskParaService().getTaskPara(tp);
		if (null == tp) {
			tp = new TaskPara();
			tp.setTask_name(name);
			tp.setYear(year + 1);
		}
		taskParaList.add(tp);

		return taskParaList;
	}

	public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (null == super.checkUserModPopeDom(form, request, "0")) {
			return super.checkPopedomInvalid(request, response);
		}

		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		super.encodeCharacterForGetMethod(dynaBean, request);
		Pager pager = (Pager) dynaBean.get("pager");
		String customer_type = (String) dynaBean.get("customer_type");
		String key = (String) dynaBean.get("keyword");
		String handle_name = (String) dynaBean.get("handle_name");
		String branch_area_name_link = (String) dynaBean.get("branch_area_name_link");
		String branch_area_name = (String) dynaBean.get("branch_area_name_select");
		ImportDataTypes importDataTypes = new ImportDataTypes();
		importDataTypes.setPar_id(0);

		List<ImportDataTypes> idtList = super.getFacade().getImportDataTypesService().getImportDataTypesList(
				importDataTypes);

		request.setAttribute("idtList", idtList);

		if (null == customer_type) {
			customer_type = "1";
		}
		dynaBean.set("customer_type", customer_type);

		PeProdUser userInfo = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);
		PeRoleUser _peRoleUser = new PeRoleUser();
		_peRoleUser.setUser_id(userInfo.getId());
		List<PeRoleUser> peRoleUserList = this.getFacade().getPeRoleUserService().getPeRoleUserList(_peRoleUser);

		boolean role_id_eq_60 = false;
		boolean role_id_ge_20 = false;
		boolean role_id_ge_30 = false;
		for (PeRoleUser peRoleUser : peRoleUserList) {
			if (peRoleUser.getRole_id() == 60L) {
				role_id_eq_60 = true;
			}
			if (peRoleUser.getRole_id() >= 20L) {
				role_id_ge_20 = true;
			}
			if (peRoleUser.getRole_id() >= 30L) {
				role_id_ge_30 = true;
			}
		}

		KonkaR3Shop r3Shop = new KonkaR3Shop();
		r3Shop.setIs_del(0L);
		if (role_id_ge_30) {
			KonkaDept dept = new KonkaDept();
			dept.setDept_id(super.getSessionUserInfo(request).getDept_id());
			dept = getFacade().getKonkaDeptService().getKonkaDept(dept);
			if (dept.getDept_type() == 3) {// 分公司
				r3Shop.setBranch_area_name(dept.getDept_name());
				dynaBean.set("branch_area_name_select", dept.getDept_name());
				dynaBean.set("branch_area_name_link", dept.getDept_name());
			} else if (dept.getDept_type() == 4 || dept.getDept_type() == 5) {// 经营部
				r3Shop.setBranch_area_name(super.getSuperiorForDeptType(dept.getDept_id(), 3).getDept_name());
				dynaBean.set("branch_area_name_select", super.getSuperiorForDeptType(dept.getDept_id(), 3)
						.getDept_name());
				dynaBean
						.set("branch_area_name_link", super.getSuperiorForDeptType(dept.getDept_id(), 3).getDept_name());
			}
		}

		List<KonkaR3Shop> BranchList = getFacade().getKonkaR3ShopService().getKonkaR3ShopGroupByBranchAreaName(r3Shop);
		request.setAttribute("BranchList", BranchList);

		Calendar now = Calendar.getInstance();
		int year = now.get(Calendar.YEAR);

		KonkaR3Shop r3 = new KonkaR3Shop();
		KonkaDept dept = new KonkaDept();
		// ImportDataTypes idt = new ImportDataTypes();
		if ("1".equals(customer_type)) {
			if (StringUtils.isNotBlank(key)) {
				r3.getMap().put("r3_code_like", key);
			}
			if (role_id_ge_20) { // 不是系统管理员组全部要加上网点分配
				r3.getMap().put("dept_id", this.getSessionUserInfo(request).getDept_id());
				r3.getMap().put("user_id", this.getSessionUserInfo(request).getId());
			}
			if (role_id_eq_60) { // 业务员只能看到分配给自己的
				r3.getMap().put("dept_id", -1);
				r3.getMap().put("user_id", this.getSessionUserInfo(request).getId());
			}
			Long recordCount = getFacade().getKonkaR3ShopService().getKonkaR3ShopCount(r3);
			pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
			r3.getRow().setFirst(pager.getFirstRow());
			r3.getRow().setCount(pager.getRowCount());

			List<KonkaR3Shop> entityList = super.getFacade().getKonkaR3ShopService().getKonkaR3ShopPaginatedList(r3);

			for (KonkaR3Shop t : entityList) {
				t.getMap().put("id", t.getId());
				List<TaskPara> taskParaList = getTaskParaList(year, t.getCustomer_name());

				t.setTaskParaList(taskParaList);
			}
			request.setAttribute("entityList", entityList);
		}
		// else if ("2".equals(customer_type)) {
		// idt.setPar_id( 10);
		// idt.setData_type(Long.valueOf(customer_type));
		// if (StringUtils.isNotBlank(key)) {
		// idt.getMap().put("type_name_like", key);
		// }
		// Long recordCount =
		// getFacade().getImportDataTypesService().getImportDataTypesCount(idt);
		// pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
		// idt.getRow().setFirst(pager.getFirstRow());
		// idt.getRow().setCount(pager.getRowCount());
		//
		// List<ImportDataTypes> entityList =
		// super.getFacade().getImportDataTypesService()
		// .getImportDataTypesPaginatedList(idt);
		// for (ImportDataTypes t : entityList) {
		// t.getMap().put("id",t.getId() );
		// List<TaskPara> taskParaList= getTaskParaList(year,t.getType_name());
		//
		// t.setTaskParaList(taskParaList);
		// }
		// request.setAttribute("entityList", entityList);
		// }
		else if ("3".equals(customer_type)) {
			dept.setPar_id((long) 1);
			if (StringUtils.isNotBlank(branch_area_name)) {
				dept.getMap().put("dept_name_like", branch_area_name);
				dynaBean.set("branch_area_name_select", branch_area_name);
			}
			Long recordCount = getFacade().getKonkaDeptService().getKonkaDeptCount(dept);
			pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
			dept.getRow().setFirst(pager.getFirstRow());
			dept.getRow().setCount(pager.getRowCount());

			List<KonkaDept> entityList = super.getFacade().getKonkaDeptService().getKonkaDeptPaginatedList(dept);

			for (KonkaDept t : entityList) {
				t.getMap().put("id", t.getDept_id());
				List<TaskPara> taskParaList = getTaskParaList(year, t.getDept_name());

				t.setTaskParaList(taskParaList);
			}
			request.setAttribute("entityList", entityList);
		}
		// else if ("4".equals(customer_type)) {
		// idt.setPar_id(80);
		// idt.setData_type(Long.valueOf(customer_type));
		// Long recordCount =
		// getFacade().getImportDataTypesService().getImportDataTypesCount(idt);
		// pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
		// idt.getRow().setFirst(pager.getFirstRow());
		// idt.getRow().setCount(pager.getRowCount());
		// if (StringUtils.isNotBlank(key)) {
		// idt.getMap().put("type_name_like", key);
		// }
		// List<ImportDataTypes> entityList =
		// super.getFacade().getImportDataTypesService()
		// .getImportDataTypesPaginatedList(idt);
		// for (ImportDataTypes t : entityList) {
		// t.getMap().put("id",t.getId() );
		// List<TaskPara> taskParaList= getTaskParaList(year,t.getType_name());
		// t.setTaskParaList(taskParaList);
		// }
		// request.setAttribute("entityList", entityList);
		// }
		else if ("5".equals(customer_type)) {
			KonkaR3Shop konkar3Shop = new KonkaR3Shop();
			konkar3Shop.setIs_del(0L);
			if (StringUtils.isNotBlank(branch_area_name_link)) {
				konkar3Shop.setBranch_area_name(branch_area_name_link);
				dynaBean.set("branch_area_name_link", branch_area_name_link);
			}
			if (StringUtils.isNotBlank(handle_name)) {
				konkar3Shop.setHandle_name(handle_name);
				dynaBean.set("handle_name", handle_name);
			}

			List<KonkaR3Shop> handleList = getFacade().getKonkaR3ShopService().getKonkaR3ShopGroupByHandleName(
					konkar3Shop);
			logger.info("handList__________" + handleList.size());
			request.setAttribute("handleList", handleList);

			List<KonkaR3Shop> entityList = getFacade().getKonkaR3ShopService().getKonkaR3ShopGroupByHandleName(
					konkar3Shop);
			logger.info("entityList___________" + entityList.size());
			for (KonkaR3Shop t : entityList) {
				t.getMap().put("id", t.getId());
				List<TaskPara> taskParaList = getTaskParaList(year, t.getHandle_name());

				t.setTaskParaList(taskParaList);
			}
			request.setAttribute("entityList", entityList);
		}

		return mapping.findForward("list");
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);

		DynaBean dynaBean = (DynaBean) form;
		String customer_type = (String) dynaBean.get("customer_type");
		String task_id = (String) dynaBean.get("task_id");
		String id = (String) dynaBean.get("id");
		String task_year = (String) dynaBean.get("year");

		if (!GenericValidator.isLong(task_id) || !GenericValidator.isLong(task_year)) {
			this.saveError(request, "errors.long", new String[] { task_id });
			return mapping.findForward("list");
		}
		if (GenericValidator.isLong(id)) {
			TaskPara entity = new TaskPara();
			entity.setId(Long.valueOf(id));
			entity = super.getFacade().getTaskParaService().getTaskPara(entity);
			if (null != entity) {
				super.copyProperties(form, entity);
				entity.setQueryString(super.serialize(request, "method"));
			}
		}

		// 这里要针对不同情况处理
		if (Long.valueOf(customer_type) == 1) {
			KonkaR3Shop konkaR3Shop = new KonkaR3Shop();
			konkaR3Shop.setId(Long.valueOf(task_id));
			konkaR3Shop = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(konkaR3Shop);
			if (null == konkaR3Shop) {
				this.saveError(request, "errors.long", new String[] { task_id });
				return mapping.findForward("list");
			}

			dynaBean.set("task_name", konkaR3Shop.getCustomer_name());
		}
		if (Long.valueOf(customer_type) == 2) {
			ImportDataTypes importDataTypes = new ImportDataTypes();
			importDataTypes.setId(Long.valueOf(task_id));
			importDataTypes = super.getFacade().getImportDataTypesService().getImportDataTypes(importDataTypes);
			if (null == importDataTypes) {
				this.saveError(request, "errors.long", new String[] { task_id });
				return mapping.findForward("list");
			}

			dynaBean.set("task_name", importDataTypes.getType_name());
		}
		if (Long.valueOf(customer_type) == 3) {
			KonkaDept konkaDept = new KonkaDept();
			konkaDept.setDept_id(Long.valueOf(task_id));
			konkaDept = super.getFacade().getKonkaDeptService().getKonkaDept(konkaDept);
			if (null == konkaDept) {
				this.saveError(request, "errors.long", new String[] { task_id });
				return mapping.findForward("list");
			}

			dynaBean.set("task_name", konkaDept.getDept_name());
		}
		if (Long.valueOf(customer_type) == 4) {
			ImportDataTypes importDataTypes = new ImportDataTypes();
			importDataTypes.setId(Long.valueOf(task_id));
			importDataTypes = super.getFacade().getImportDataTypesService().getImportDataTypes(importDataTypes);
			if (null == importDataTypes) {
				this.saveError(request, "errors.long", new String[] { task_id });
				return mapping.findForward("list");
			}

			dynaBean.set("task_name", importDataTypes.getType_name());
		}
		if (Long.valueOf(customer_type) == 5) {

			KonkaR3Shop r3 = new KonkaR3Shop();
			r3.setId(Long.valueOf(task_id));
			List<KonkaR3Shop> r3List = getFacade().getKonkaR3ShopService().getKonkaR3ShopGroupByHandleName(r3);

			if (0 == r3List.size()) {
				this.saveError(request, "errors.long", new String[] { task_id });
				return mapping.findForward("list");
			}
			dynaBean.set("task_name", r3List.get(0).getHandle_name());
		}
		return mapping.findForward("input");
	}

	public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);

		if (isCancelled(request)) {
			return list(mapping, form, request, response);
		}
		if (!isTokenValid(request)) {
			saveError(request, "errors.token");
			return list(mapping, form, request, response);
		}
		resetToken(request);

		DynaBean dynaBean = (DynaBean) form;
		PeProdUser ui = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);

		// String mod_id = (String) dynaBean.get("mod_id");
		String id = (String) dynaBean.get("id");
		// String customer_type = (String) dynaBean.get("customer_type");

		TaskPara entity = new TaskPara();

		super.copyProperties(entity, form);

		entity.setAdd_uid(ui.getId());

		if (StringUtils.isBlank(id)) {// insert
			super.getFacade().getTaskParaService().createTaskPara(entity);
		} else {// update
			super.getFacade().getTaskParaService().modifyTaskPara(entity);
		}

		//
		// if (name_id != null && Long.valueOf(type) == 3) {
		// KonkaDept entity = new KonkaDept();
		// entity.setDept_id(Long.valueOf(name_id));
		// entity =
		// super.getFacade().getKonkaDeptService().getKonkaDept(entity);
		//
		// entity1.setTask_name(entity.getDept_name());
		// entity1 =
		// super.getFacade().getTaskParaService().getTaskPara(entity1);
		//
		// entity2.setTask_name(entity.getDept_name());
		// entity2.setYear(new Integer(year));
		//
		// if (entity1 == null) {// insert
		//
		// super.getFacade().getTaskParaService().createTaskPara(entity2);
		// saveMessage(request, "entity.inserted");
		// } else if (null != entity1) {// update
		// getFacade().getTaskParaService().modifyTaskPara(entity2);
		// saveMessage(request, "entity.updated");
		// }
		//
		// }
		// if (name_id != null && Long.valueOf(type) == 2) {
		// ImportDataTypes entity = new ImportDataTypes();
		// entity.setId(Long.valueOf(name_id));
		// entity =
		// super.getFacade().getImportDataTypesService().getImportDataTypes(entity);
		//
		// entity1.setTask_name(entity.getType_name());
		// entity1 =
		// super.getFacade().getTaskParaService().getTaskPara(entity1);
		//
		// entity2.setTask_name(entity.getType_name());
		// entity2.setYear(new Integer(year));
		//
		// if (entity1 == null) {// insert
		//
		// super.getFacade().getTaskParaService().createTaskPara(entity2);
		// saveMessage(request, "entity.inserted");
		// } else if (null != entity1) {// update
		// getFacade().getTaskParaService().modifyTaskPara(entity2);
		// saveMessage(request, "entity.updated");
		// }
		// }
		// if (name_id != null && Long.valueOf(type) == 1) {
		// KonkaR3Shop entity = new KonkaR3Shop();
		// entity.setId(Long.valueOf(name_id));
		// entity =
		// super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(entity);
		//
		// entity1.setTask_name(entity.getCustomer_name());
		// entity1 =
		// super.getFacade().getTaskParaService().getTaskPara(entity1);
		//
		// entity2.setTask_name(entity.getCustomer_name());
		// entity2.setYear(new Integer(year));
		//
		// if (entity1 == null) {// insert
		//
		// super.getFacade().getTaskParaService().createTaskPara(entity2);
		// saveMessage(request, "entity.inserted");
		// } else if (null != entity1) {// update
		// getFacade().getTaskParaService().modifyTaskPara(entity2);
		// saveMessage(request, "entity.updated");
		// }
		// }
		// if (name_id != null && Long.valueOf(type) == 4) {
		// ImportDataTypes entity = new ImportDataTypes();
		// entity.setId(Long.valueOf(name_id));
		// entity =
		// super.getFacade().getImportDataTypesService().getImportDataTypes(entity);
		//
		// entity1.setTask_name(entity.getType_name());
		// entity1 =
		// super.getFacade().getTaskParaService().getTaskPara(entity1);
		//
		// entity2.setTask_name(entity.getType_name());
		// entity2.setYear(new Integer(year));
		//
		// if (entity1 == null) {// insert
		//
		// super.getFacade().getTaskParaService().createTaskPara(entity2);
		// saveMessage(request, "entity.inserted");
		// } else if (null != entity1) {// update
		// getFacade().getTaskParaService().modifyTaskPara(entity2);
		// saveMessage(request, "entity.updated");
		// }
		// }

		// the line below is added for pagination
		// StringBuffer pathBuffer = new StringBuffer();
		// pathBuffer.append("/admin/TaskPara.do?method=list");
		// pathBuffer.append("&mod_id=").append(mod_id).append("&customer_type=");
		// pathBuffer.append(customer_type);
		// pathBuffer.append(super.encodeSerializedQueryString(entity.getQueryString()));
		// ActionForward forward = new ActionForward(pathBuffer.toString(),
		// true);
		// // end
		// return forward;
		return this.list(mapping, form, request, response);
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;

		String id = (String) dynaBean.get("id");
		String[] pks = (String[]) dynaBean.get("pks");
		// String mod_code = (String) dynaBean.get("mod_code");

		if (!StringUtils.isBlank(id) && GenericValidator.isLong(id)) {
			TaskPara entity = new TaskPara();
			entity.setId(new Long(id));
			super.getFacade().getTaskParaService().removeTaskPara(entity);
			saveMessage(request, "entity.deleted");
		} else if (!ArrayUtils.isEmpty(pks)) {
			TaskPara entity = new TaskPara();
			entity.getMap().put("pks", pks);
			super.getFacade().getTaskParaService().removeTaskPara(entity);
			saveMessage(request, "entity.deleted");
		}
		//
		// // the line below is added for pagination
		// StringBuffer pathBuffer = new StringBuffer();
		// pathBuffer.append(mapping.findForward("success").getPath());
		// pathBuffer.append("&mod_code=" + mod_code);
		// pathBuffer.append("&");
		// pathBuffer.append(super.encodeSerializedQueryString(super.serialize(request,
		// "id", "pks", "method")));
		// ActionForward forward = new ActionForward(pathBuffer.toString(),
		// true);
		// // end
		//
		// return forward;
		return this.list(mapping, form, request, response);
	}
}