package com.ebiz.mmt.service.impl;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.ebiz.mmt.dao.ChannelDataImportDao;
import com.ebiz.mmt.domain.ChannelDataImport;
import com.ebiz.mmt.r3.SOXX;
import com.ebiz.mmt.r3.helper.R3Dao;
import com.ebiz.mmt.service.ChannelDataImportService;

/**
 * Code by AutoGenerated Builder AutoGenerated Builder Version 2.1
 * 
 * @author Hui,Gang
 * @datetime 2011-11-07 15:52:25
 */
@Service
public class ChannelDataImportServiceImpl implements ChannelDataImportService {

	@Resource
	private ChannelDataImportDao channelDataImportDao;

	@Resource
	private R3Dao r3Dao;

	@Override
	public Long createChannelDataImport(ChannelDataImport t) {
		return this.channelDataImportDao.insertEntity(t);
	}

	@Override
	public ChannelDataImport getChannelDataImport(ChannelDataImport t) {
		return this.channelDataImportDao.selectEntity(t);
	}

	@Override
	public Long getChannelDataImportCount(ChannelDataImport t) {
		return this.channelDataImportDao.selectEntityCount(t);
	}

	@Override
	public List<ChannelDataImport> getChannelDataImportList(ChannelDataImport t) {
		return this.channelDataImportDao.selectEntityList(t);
	}

	@Override
	public int modifyChannelDataImport(ChannelDataImport t) {
		return this.channelDataImportDao.updateEntity(t);
	}

	@Override
	public int removeChannelDataImport(ChannelDataImport t) {
		return this.channelDataImportDao.deleteEntity(t);
	}

	@Override
	public List<ChannelDataImport> getChannelDataImportPaginatedList(ChannelDataImport t) {
		return this.channelDataImportDao.selectEntityPaginatedList(t);
	}

	/**
	 * @author Wang,Yang
	 * @version 2011-11-10
	 */
	@Override
	public java.math.BigDecimal getChannelDataSumByPdId(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataSumByPdId(t);
	}

	@Override
	public List<ChannelDataImport> getChannelDataImportPaginatedListForStat(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportPaginatedListForStat(t);
	}

	@Override
	public List<ChannelDataImport> getChannelDataImportPaginatedListForModel(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportPaginatedListForModel(t);
	}

	@Override
	public List<ChannelDataImport> getChannelDataListByPdId(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataListByPdId(t);
	}

	@Override
	public Long getChannelDataImportForSum(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportForSum(t);
	}

	@Override
	public List<ChannelDataImport> getChannelDataImportListForStatistics(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportListForStatistics(t);
	}

	@Override
	public HashMap<BigDecimal, BigDecimal> getChannelDataImportAllCountAndAllMoney(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportAllCountAndAllMoney(t);
	}

	@Override
	public void createChannelDataImportList(List<ChannelDataImport> t) {
		if (0 != t.size()) {
			for (ChannelDataImport i : t) {
				this.channelDataImportDao.insertEntity(i);
			}
		}
	}

	@Override
	public void modifyChannelDataImportList(List<ChannelDataImport> t) {
		if (0 != t.size()) {
			for (ChannelDataImport i : t) {
				this.channelDataImportDao.updateEntity(i);
			}
		}
	}

	@Override
	public Date selectTheMaxImportDate(ChannelDataImport t) {
		return this.channelDataImportDao.selectTheMaxImportDate(t);
	}

	@Override
	public HashMap<String, Long> createOrModifySyncChannelDataForfgsTj(Set<String> syncVkorgList, String v_vtweg,
			String v_spart, String v_audat_begin, String v_audat_end, String v_kunnr) throws SQLException {

		Map<String, Long> map = new HashMap<String, Long>();
		Long isize = 0l;
		Long msize = 0l;

		// 一个销售组织提交一次
		for (String korg : syncVkorgList) {
			List<SOXX> DataList = new ArrayList<SOXX>();
			List<ChannelDataImport> insertList = new ArrayList<ChannelDataImport>();

			// 1.从接口取数据回来
			DataList = r3Dao.getSoxxTj(korg, v_vtweg, v_spart, v_audat_begin, v_audat_end, v_kunnr);

			String startDate = null;
			String endDate = null;
			// 2.删除相关数据
			if (DataList.size() > 0) {
				startDate = v_audat_begin + " 00:00:00";
				endDate = v_audat_end + " 23:59:59";
				ChannelDataImport cdi = new ChannelDataImport();
				cdi.setColumn_25(korg);
				cdi.setColumn_1(v_kunnr);
				// yyyy-MM-dd hh24:mi:ss R3订单时间
				cdi.getMap().put("startDate", startDate);
				// yyyy-MM-dd hh24:mi:ss R3订单时间
				cdi.getMap().put("endDate", endDate);
				// 不作更新,会把相应的数据先删除再作插入
				channelDataImportDao.deleteEntity(cdi);
			}
			Date import_date = new Date();
			// 3.封装插入数据列表
			for (SOXX s : DataList) {
				ChannelDataImport im = new ChannelDataImport();
				im.setImport_date(import_date);
				im.setImport_uid(1l); // 系统管理员的id
				im.setColumn_1(s.getKUNNR());// 售达方
				im.setColumn_4("");// 名称(售)
				// im.setColumn_2(column_1);// 分
				// im.setColumn_3(column_1);// 地域类别
				im.setColumn_5(s.getWEKUNNR());// 送达方
				im.setColumn_6("");// column_6送达方 名
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
				try {
					if (!(s.getERDAT().equals(""))) {
						im.setColumn_7(sdf2.parse(s.getERDAT()));
					} else {
						im.setColumn_7(null);
					}
				} catch (ParseException e) {
					e.printStackTrace();
				} // 创建日期 订单在r/3创建的时间

				try {
					if (!("".equals(s.getAUDAT()))) {
						im.setColumn_26(sdf2.parse(s.getAUDAT()));
					} else {
						im.setColumn_26(null);
					}
				} catch (ParseException e) {
					e.printStackTrace();
				} // 订单r/3凭证日期

				im.setColumn_8(s.getVBELN());// 销售单号
				im.setColumn_11(s.getMATNR());// 机型

				// 由于业务需要做出别扭调整 column_27-->column_12
				// 交货单数量
				im.setColumn_12(s.getJWMENG());
				// 单价(含税)
				im.setColumn_13(new BigDecimal(Double.valueOf(s.getCMPRE0())));

				// 总金额（含税）算已交货的
				im.setColumn_14(new BigDecimal(s.getKZWI6()));

				im.setColumn_9(s.getAUART());// 订单类型 zfor zfgc zfre..
				im.setColumn_10(s.getPOSNR());// column_10 项目号

				im.setColumn_15(new BigDecimal(s.getK007()));
				im.setColumn_16(new BigDecimal(s.getRB00()));

				// 总净值金额(含税)
				im.setColumn_17(new BigDecimal(s.getKZWI1()));

				// 用于统计的接口没有这几个值
				// im.setColumn_19(s.getVBELN_L());// KF交货单
				// im.setColumn_20(s.getVBELN_LES());// 物流交货单
				// im.setColumn_21(s.getLGORT_L());// KF发货仓位
				// im.setColumn_22(s.getBSTNK());// 采购订单编号
				// 客户采购订单日期 暂时不用

				im.setColumn_23(s.getMATKL());// 物料组
				im.setColumn_24(s.getVKBUR());// 办事处
				im.setColumn_25(s.getVKORG());// 销售组织

				// 每一订单行机型数量
				im.setColumn_27(new BigDecimal(s.getKWMENG()));
				// 已发货数量
				im.setColumn_28(new BigDecimal(s.getMWMENG()));
				// 已开发票数量
				im.setColumn_29(new BigDecimal(s.getRWMENG()));
				// 总金额（含税）
				im.setColumn_30(new BigDecimal(s.getKZWI6()));

				insertList.add(im);

			}
			// 4.批量提交待插入数据
			// throws exception
			if (insertList.size() > 0) {
				this.channelDataImportDao.insertChannelDataImportBatch(insertList);
			}

			// 累加
			isize += DataList.size();
			// msize += msize;
			insertList = null;
			DataList = null;
		}

		map.put("isize", isize);
		map.put("msize", msize);
		return (HashMap<String, Long>) map;
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-09-14
	 * @desc 分公司业绩排名
	 */
	@Override
	public List<ChannelDataImport> getChannelDataImportForFgsTop(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportForFgsTop(t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-09-15
	 * @desc 经办业绩排名
	 */
	@Override
	public List<ChannelDataImport> getChannelDataImportForJybTop(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportForJybTop(t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-09-22
	 * @desc 任务完成分析
	 */
	@Override
	public List<ChannelDataImport> getChannelDataImportListToMonth(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportListToMonth(t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-09-22
	 * @desc 任务完成分析
	 */
	@Override
	public List<ChannelDataImport> getChannelDataImportListToSeason(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportListToSeason(t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-09-22
	 * @desc 任务完成分析
	 */
	@Override
	public List<ChannelDataImport> getChannelDataImportListToAll(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportListToAll(t);
	}

	/**
	 * @author Xing,XiuDong
	 * @version 2013-12-23
	 */
	@Override
	public List<ChannelDataImport> getGroupByPdStatList(ChannelDataImport t){
		return this.channelDataImportDao.selectGroupByPdStatList(t);
	}
	
	/**
	 * @author Hu,Hao
	 * @version 2013-11-14
	 * @desc 分公司业绩排名（回款）
	 */
	@Override
	public List<ChannelDataImport> getChannelDataImportForFgsHkTop(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportForFgsHkTop(t);
	}

	/**
	 * @author Hu,Hao
	 * @version 2013-12-18
	 * @desc 分公司业绩排名（其他）
	 */
	@Override
	public List<ChannelDataImport> getChannelDataImportForFgsHkQt(ChannelDataImport t) {
		return this.channelDataImportDao.selectChannelDataImportForFgsHkQt(t);
	}

	@Override
	public Long getR3codeIsJs(ChannelDataImport cd) {
		return this.channelDataImportDao.selectR3codeIsJs(cd);
	}
}