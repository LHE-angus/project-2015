<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="J_STOCKS_SUMMARY">

	<typeAlias alias="jStocksSummary" type="com.ebiz.mmt.domain.JStocksSummary" />

	<cacheModel id="oneDayCache" type="OSCACHE">
		<flushInterval hours="24" />
		<flushOnExecute statement="insertJStocksSummary" />
		<flushOnExecute statement="updateJStocksSummary" />
		<flushOnExecute statement="deleteJStocksSummary" />
	</cacheModel>

	<resultMap id="jStocksSummaryResultForList" class="jStocksSummary">
		<result column="ID" property="id" jdbcType="BIGINT" />
		<result column="C_ID" property="c_id" jdbcType="BIGINT" />
		<result column="R3_CODE" property="r3_code" jdbcType="VARCHAR" />
		<result column="CUSTOMER_NAME" property="customer_name" jdbcType="VARCHAR" />
		<result column="GOODS_ID" property="goods_id" jdbcType="BIGINT" />
		<result column="GOODS_NAME" property="goods_name" jdbcType="VARCHAR" />
		<result column="OPR_DATE" property="opr_date" jdbcType="TIMESTAMP" />
		<result column="INIT_NUM" property="init_num" jdbcType="DECIMAL" />
		<result column="COME_NUM" property="come_num" jdbcType="DECIMAL" />
		<result column="COME_MONEY" property="come_money" jdbcType="DECIMAL" />
		<result column="OUT_NUM" property="out_num" jdbcType="DECIMAL" />
		<result column="OUT_MONEY" property="out_money" jdbcType="DECIMAL" />
		<result column="ADD_DATE" property="add_date" jdbcType="TIMESTAMP" />
		<result column="TYPE" property="type" jdbcType="SMALLINT" />
		<result column="INIT_MONEY" property="init_money" jdbcType="DECIMAL" />
		<result column="SALE_COST" property="sale_cost" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="jStocksSummaryResult" class="jStocksSummary" extends="jStocksSummaryResultForList">
	</resultMap>
	
	<resultMap id="jStocksSummaryResultForR3Shop" class="jStocksSummary" extends="jStocksSummaryResultForList">
		<result column="DEPT_NAME" property="map.dept_name" jdbcType="VARCHAR" />
		<result column="PAR_CUSTOMER_TYPE_NAME" property="map.par_cust_type_name" jdbcType="VARCHAR" />
		<result column="CUSTOMER_TYPE_NAME" property="map.cust_type_name" jdbcType="VARCHAR" />
		<result column="HANDLE_NAME" property="map.handle_name" jdbcType="VARCHAR" />
		<result column="cur_num" property="map.cur_num" jdbcType="DECIMAL" />
	</resultMap>
	
	<resultMap id="jStocksSummaryResultForR3ShopNew" class="jStocksSummary" extends="jStocksSummaryResultForList">
		<result column="DEPT_NAME" property="map.dept_name" jdbcType="VARCHAR" />
		<result column="PAR_CUSTOMER_TYPE_NAME" property="map.par_cust_type_name" jdbcType="VARCHAR" />
		<result column="CUSTOMER_TYPE_NAME" property="map.cust_type_name" jdbcType="VARCHAR" />
		<result column="HANDLE_NAME" property="map.handle_name" jdbcType="VARCHAR" />
		<result column="cur_num" property="map.cur_num" jdbcType="DECIMAL" />
		<result column="area_name" property="map.area_name" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="sf-jStocksSummary">
		<isNotEmpty prepend=" and " property="id">a.ID = #id:BIGINT#</isNotEmpty>
		<isNotEmpty prepend=" and " property="c_id">a.C_ID = #c_id:BIGINT#</isNotEmpty>
		<isNotEmpty prepend=" and " property="r3_code">a.R3_CODE = #r3_code:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="customer_name">a.CUSTOMER_NAME = #customer_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="goods_id">a.GOODS_ID = #goods_id:BIGINT#</isNotEmpty>
		<isNotEmpty prepend=" and " property="goods_name">a.GOODS_NAME = #goods_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="opr_date">a.OPR_DATE = #opr_date:TIMESTAMP#</isNotEmpty>
		<isNotEmpty prepend=" and " property="init_num">a.INIT_NUM = #init_num:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="come_num">a.COME_NUM = #come_num:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="come_money">a.COME_MONEY = #come_money:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="out_num">a.OUT_NUM = #out_num:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="out_money">a.OUT_MONEY = #out_money:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="add_date">a.ADD_DATE = #add_date:TIMESTAMP#</isNotEmpty>
		<isNotEmpty prepend=" and " property="type">a.TYPE = #type:SMALLINT#</isNotEmpty>
		<isNotEmpty prepend=" and " property="init_money">INIT_MONEY = #init_money:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="sale_cost">SALE_COST = #sale_cost:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.add_date_s"><![CDATA[a.ADD_DATE >= to_date(#map.add_date_s#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.add_date_e"><![CDATA[a.ADD_DATE <= to_date(#map.add_date_e#,'yyyy-MM-dd hh24:mi:ss')]]></isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.customer_name_like">a.CUSTOMER_NAME like '%' || #map.customer_name_like:VARCHAR# || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.r3_code_like">UPPER(a.r3_code) like '%' || UPPER(#map.r3_code_like:VARCHAR#) || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.goods_name_like">UPPER(a.goods_name) like '%' || UPPER(#map.goods_name_like:VARCHAR#) || '%'</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.dept_sn">b.BRANCH_AREA_NAME_2 = #map.dept_sn:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.handle_name_like">b.handle_name like '%' || #map.handle_name_like:VARCHAR# || '%'</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.handle_name_like_1">cust_all.L5_DEPT_NAME like '%' || #map.handle_name_like_1:VARCHAR# || '%'</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.cur_min_num"><![CDATA[ (a.INIT_NUM+a.COME_NUM-a.OUT_NUM) >= #map.cur_min_num:DECIMAL#]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.cur_max_num"><![CDATA[ (a.INIT_NUM+a.COME_NUM-a.OUT_NUM) <= #map.cur_max_num:DECIMAL#]]></isNotEmpty>
		<isNotEmpty prepend=" and " property="map.cus_type1">d.PAR_CUSTOMER_TYPE = #map.cus_type1:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.cus_type2">d.CUSTOMER_TYPE = #map.cus_type2:DECIMAL#</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.dept_id_start">
			(c.user_id is not null and c.user_id in (
				select id from konka_pe_prod_user u
						where u.dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
			)
		</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
			c.user_id = #map.filter_by_ywy_id_eq#
		</isNotEmpty>
	</sql>

	<select id="selectJStocksSummary" resultMap="jStocksSummaryResult" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		select a.* from J_STOCKS_SUMMARY a where 1 = 1
		<include refid="sf-jStocksSummary" />
	</select>

	<select id="selectJStocksSummaryList" resultMap="jStocksSummaryResultForList" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select a.* from J_STOCKS_SUMMARY a where 1 = 1
		<include refid="sf-jStocksSummary" />
		<!-- order by ID asc -->
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>

	<select id="selectJStocksSummaryCount" resultClass="long" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		select count(*) from J_STOCKS_SUMMARY a where 1 = 1
		<include refid="sf-jStocksSummary" />
	</select>

	<select id="selectJStocksSummaryPaginatedList" resultMap="jStocksSummaryResult" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select a.* from J_STOCKS_SUMMARY a where 1 = 1
		<include refid="sf-jStocksSummary" />
		<!-- order by ID asc -->
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<select id="selectJStocksSummaryForR3ShopList" resultMap="jStocksSummaryResultForR3Shop" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select a.*,b.BRANCH_AREA_NAME AS DEPT_NAME,cust_all.CUR_DEPT_NAME as handle_name,d.PAR_CUSTOMER_TYPE_NAME,d.CUSTOMER_TYPE_NAME,(a.INIT_NUM+a.COME_NUM-a.OUT_NUM) as cur_num,
		b.handle_name
		  from J_STOCKS_SUMMARY a 
		 left join konka_r3_shop b on a.c_id = b.id
	     left join BRANCH_ASSIGN c on a.c_id = c.KONKA_R3_ID
	     left join MV_ORG_OF_CUSTOMER_ALL cust_all on b.r3_code=cust_all.r3_code
	     left join (
	     SELECT shop.R3_CODE,
		       shop.CUSTOMER_NAME,
		       cust_type.C_COMM as PAR_CUSTOMER_TYPE_NAME,
		       cust_type.C_NAME as CUSTOMER_TYPE_NAME,
           cust_type.PAR_INDEX as PAR_CUSTOMER_TYPE,
           cust_type.C_INDEX as CUSTOMER_TYPE
		       FROM    KONKA_R3_SHOP shop
		       LEFT JOIN
		          KONKA_CATEGORY cust_type
		       ON shop.CUSTOMER_TYPE = cust_type.C_INDEX AND cust_type.C_TYPE = 10
	     ) d on a.R3_CODE=d.R3_CODE
	     where 1 = 1
		<include refid="sf-jStocksSummary" />
		<isNotEmpty prepend=" and " property="map.area_name">
		    b.area_name = #map.area_name#
		</isNotEmpty>
		<!-- order by ID asc -->
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>

	<select id="selectJStocksSummaryForR3ShopCount" resultClass="long" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		select count(*) from J_STOCKS_SUMMARY a 
		 left join konka_r3_shop b on a.c_id = b.id
	     left join BRANCH_ASSIGN c on a.c_id = c.KONKA_R3_ID
	     left join (
	     SELECT shop.R3_CODE,
		       shop.CUSTOMER_NAME,
		       cust_type.C_COMM as PAR_CUSTOMER_TYPE_NAME,
		       cust_type.C_NAME as CUSTOMER_TYPE_NAME,
           cust_type.PAR_INDEX as PAR_CUSTOMER_TYPE,
           cust_type.C_INDEX as CUSTOMER_TYPE
		       FROM    KONKA_R3_SHOP shop
		       LEFT JOIN
		          KONKA_CATEGORY cust_type
		       ON shop.CUSTOMER_TYPE = cust_type.C_INDEX AND cust_type.C_TYPE = 10
	     ) d on a.R3_CODE=d.R3_CODE
	     left join MV_ORG_OF_CUSTOMER_ALL cust_all
          on a.R3_CODE=cust_all.R3_CODE
	     where 1 = 1
		<include refid="sf-jStocksSummary" />
		<isNotEmpty prepend=" and " property="map.area_name">
		    b.area_name = #map.area_name#
		</isNotEmpty>
	</select>

	<select id="selectJStocksSummaryForR3ShopPaginatedList" resultMap="jStocksSummaryResultForR3ShopNew" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select a.*,b.BRANCH_AREA_NAME AS DEPT_NAME,d.PAR_CUSTOMER_TYPE_NAME,d.CUSTOMER_TYPE_NAME,(a.INIT_NUM+a.COME_NUM-a.OUT_NUM) as cur_num,
		cust_all.CUR_DEPT_NAME as handle_name, b.area_name
		 from J_STOCKS_SUMMARY a  
		 left join konka_r3_shop b on a.c_id = b.id
	     left join BRANCH_ASSIGN c on a.c_id = c.KONKA_R3_ID
	     left join (
	     SELECT shop.R3_CODE,
		       shop.CUSTOMER_NAME,
		       cust_type.C_COMM as PAR_CUSTOMER_TYPE_NAME,
		       cust_type.C_NAME as CUSTOMER_TYPE_NAME,
           cust_type.PAR_INDEX as PAR_CUSTOMER_TYPE,
           cust_type.C_INDEX as CUSTOMER_TYPE
		       FROM    KONKA_R3_SHOP shop
		       LEFT JOIN
		          KONKA_CATEGORY cust_type
		       ON shop.CUSTOMER_TYPE = cust_type.C_INDEX AND cust_type.C_TYPE = 10
	     ) d on a.R3_CODE=d.R3_CODE
	      left join MV_ORG_OF_CUSTOMER_ALL cust_all
          on a.R3_CODE=cust_all.R3_CODE
	     where 1 = 1
		<include refid="sf-jStocksSummary" />
		<isNotEmpty prepend=" and " property="map.area_name">
		    b.area_name = #map.area_name#
		</isNotEmpty>
		<!-- order by ID asc -->
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
    <!--	重点客户库存周转 金额用现款价计算-->
   <select id="selectjcfxzdkhListList" resultMap="jStocksSummaryResultForR3Shop" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		SELECT kk.ID,
		       kk.C_ID,
		       kk.R3_CODE,
		       kk.CUSTOMER_NAME,
		       kk.GOODS_ID,
		       kk.GOODS_NAME,
		       kk.OPR_DATE,
		       kk.INIT_NUM,
		       kk.COME_NUM,
		       kk.OUT_NUM,
		       kk.ADD_DATE,
		       kk.TYPE,
		       kk.SALE_COST,
		       kk.DEPT_NAME,
		       kk.PAR_CUSTOMER_TYPE_NAME,
		       kk.CUSTOMER_TYPE_NAME,
		       kk.CUR_NUM,
		       kk.HANDLE_NAME,
		       kk.CASH_PRICE,
		       (nvl(kk.INIT_NUM,0) * nvl(kk.cash_price,0)) AS INIT_MONEY,
		       (nvl(kk.COME_NUM,0) * nvl(kk.cash_price,0)) AS COME_MONEY,
		       (nvl(kk.OUT_NUM,0) * nvl(kk.cash_price,0)) AS OUT_MONEY
		  FROM (SELECT a.*,
		               b.BRANCH_AREA_NAME AS DEPT_NAME,
		               d.PAR_CUSTOMER_TYPE_NAME,
		               d.CUSTOMER_TYPE_NAME,
		               (a.INIT_NUM + a.COME_NUM - a.OUT_NUM) AS cur_num,
		               cust_all.CUR_DEPT_NAME AS handle_name,
		               (SELECT CASH_PRICE
		                     FROM KONKA_PD_MODEL_PRICES
		                    WHERE     PD_NAME = a.goods_name
                           <isNotEmpty prepend=" and " property="map.cur_month">price_month = #map.cur_month:VARCHAR#</isNotEmpty>
		                          <![CDATA[ AND rownum < 2 ]]>)
		             FROM  <isNotEmpty prepend=" " property="map.is_cur_month">
				              (SELECT rank () OVER (ORDER BY a1.opr_date DESC) rn, a1.*
		                        FROM J_STOCKS_SUMMARY a1
		                       WHERE 1 = 1 AND a1.type = 0
		                       ) a
		                   </isNotEmpty>
		                   <isEmpty prepend=" " property="map.is_cur_month">
				              (SELECT rank () OVER (ORDER BY a1.opr_date DESC) rn, a1.*
								  FROM J_STOCKS_SUMMARY a1
								 WHERE a1.TYPE = 1 
								  <isNotEmpty prepend=" and " property="map.cur_month">to_char (a1.opr_date, 'YYYYMM') = #map.cur_month:VARCHAR#</isNotEmpty>
								 ) a
		                   </isEmpty>
		               LEFT JOIN konka_r3_shop b
		                  ON a.c_id = b.id
		               LEFT JOIN BRANCH_ASSIGN c
		                  ON a.c_id = c.KONKA_R3_ID
		               LEFT JOIN (SELECT shop.R3_CODE,
		                                 shop.CUSTOMER_NAME,
		                                 cust_type.C_COMM AS PAR_CUSTOMER_TYPE_NAME,
		                                 cust_type.C_NAME AS CUSTOMER_TYPE_NAME,
		                                 cust_type.PAR_INDEX AS PAR_CUSTOMER_TYPE,
		                                 cust_type.C_INDEX AS CUSTOMER_TYPE
		                            FROM    KONKA_R3_SHOP shop
		                                 LEFT JOIN
		                                    KONKA_CATEGORY cust_type
		                                 ON shop.CUSTOMER_TYPE = cust_type.C_INDEX
		                                    AND cust_type.C_TYPE = 10) d
		                  ON a.R3_CODE = d.R3_CODE
		               LEFT JOIN MV_ORG_OF_CUSTOMER_ALL cust_all
		                  ON a.R3_CODE = cust_all.R3_CODE
		         WHERE 1 = 1
		         <include refid="sf-jStocksSummary" />
		         ) kk 
		<!-- order by ID asc -->
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
    <!--\剩余库存总数-->
    <select id="selectJStocksSummaryForR3ShopSumCount" resultClass="long" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		select sum((a.INIT_NUM+a.COME_NUM-a.OUT_NUM)) as total_num from J_STOCKS_SUMMARY a  
		 left join konka_r3_shop b on a.c_id = b.id
	     left join BRANCH_ASSIGN c on a.c_id = c.KONKA_R3_ID
	     left join MV_ORG_OF_CUSTOMER d on a.R3_CODE=d.R3_CODE
	     where 1 = 1
		<include refid="sf-jStocksSummary" />
	</select>
	
     <!--客户大类 库存周转率-->
	<select id="selectJcfxParkhList" resultClass="HashMap" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		     SELECT 
		       type.PAR_INDEX,
		       type.C_COMM,
		       max(data.ADD_DATE)ADD_DATE,
		       SUM (NVL (data.INIT_MONEY, 0)) / 10000 INIT_MONEY,
		       SUM (NVL (data.COME_MONEY, 0)) / 10000 COME_MONEY,
		       SUM (NVL (data.OUT_MONEY, 0)) / 10000 OUT_MONEY,
		       SUM (NVL (data.INIT_MONEY, 0) + NVL (data.COME_MONEY, 0) - NVL (data.OUT_MONEY, 0))
		       / 10000
		          END_MONEY,
		           (case 
		              when  (SUM (NVL (data.OUT_MONEY, 0)))!=0
		              then
		                  30*((SUM (NVL(data.INIT_MONEY,0)) / 10000*0.5)
		                          + SUM (NVL(data.INIT_MONEY,0) + NVL(data.COME_MONEY,0) - NVL(data.OUT_MONEY,0))/ 10000*0.5)/(SUM (NVL (data.OUT_MONEY,0)) / 10000)
		              ELSE
		              0
		          end) CUR_DAY,
		          45 as TARGET_DAY
		  FROM    (SELECT shop.CUSTOMER_TYPE,
		                  shop.R3_CODE,
		                  shop.BRANCH_AREA_NAME_2,
		                  summary.INIT_MONEY,
		                  summary.COME_MONEY,
		                  summary.OUT_MONEY,
		                  summary.ADD_DATE
		             FROM <isNotEmpty prepend=" " property="map.is_cur_month">
				              (SELECT rank () OVER (ORDER BY a.opr_date DESC) rn, a.*
		                        FROM J_STOCKS_SUMMARY a
		                       WHERE 1 = 1 AND type = 0) summary
		                   </isNotEmpty>
		                   <isEmpty prepend=" " property="map.is_cur_month">
				              (SELECT rank () OVER (ORDER BY a.opr_date DESC) rn, a.*
								  FROM J_STOCKS_SUMMARY a
								 WHERE a.TYPE = 1 
								  <isNotEmpty prepend=" and " property="map.cur_month">to_char (a.opr_date, 'YYYYMM') = #map.cur_month:VARCHAR#</isNotEmpty>
								 ) summary
		                   </isEmpty>
		                  LEFT JOIN  KONKA_R3_SHOP shop
		                     ON summary.R3_CODE = shop.R3_CODE
		            WHERE 1 = 1 
		             <isNotEmpty prepend=" and " property="map.branch_area_name_2">shop.BRANCH_AREA_NAME_2 = #map.branch_area_name_2:VARCHAR#</isNotEmpty>
		            ) data
		       left JOIN
		          (SELECT *
		             FROM KONKA_CATEGORY
		            WHERE C_TYPE = 10) type
		       ON data.CUSTOMER_TYPE = type.C_INDEX
		       where data.CUSTOMER_TYPE is not null
		GROUP BY  type.PAR_INDEX,type.C_COMM
	</select>
	
	  <!--客户小类 库存周转率-->
	<select id="selectJcfxKhList" resultClass="HashMap" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		  SELECT  type.C_INDEX,
		       type.C_NAME,
		       max(data.ADD_DATE)ADD_DATE,
		       SUM (NVL (data.INIT_MONEY, 0)) / 10000 INIT_MONEY,
		       SUM (NVL (data.COME_MONEY, 0)) / 10000 COME_MONEY,
		       SUM (NVL (data.OUT_MONEY, 0)) / 10000 OUT_MONEY,
		       SUM (NVL (data.INIT_MONEY, 0) + NVL (data.COME_MONEY, 0) - NVL (data.OUT_MONEY, 0))
		       / 10000
		          END_MONEY,
		           (case 
		              when  (SUM (NVL (data.OUT_MONEY, 0)))!=0
		              then
		                  30*((SUM (NVL(data.INIT_MONEY,0)) / 10000*0.5)
		                          + SUM (NVL(data.INIT_MONEY,0) + NVL(data.COME_MONEY,0) - NVL(data.OUT_MONEY,0))/ 10000*0.5)/(SUM (NVL (data.OUT_MONEY,0)) / 10000)
		              ELSE
		              0
		          end) CUR_DAY,
		          45 as TARGET_DAY
		      FROM (SELECT shop.CUSTOMER_TYPE,
		                  shop.R3_CODE,
		                  shop.BRANCH_AREA_NAME_2,
		                  summary.INIT_MONEY,
		                  summary.COME_MONEY,
		                  summary.OUT_MONEY,
		                  summary.ADD_DATE,
		                  (SELECT CASH_PRICE
		                     FROM KONKA_PD_MODEL_PRICES
		                    WHERE     PD_NAME = summary.goods_name
<!--		                          AND price_month = '201312'-->
                           <isNotEmpty prepend=" and " property="map.cur_month">price_month = #map.cur_month:VARCHAR#</isNotEmpty>
		                          <![CDATA[ AND rownum < 2 ]]>)
		                     cash_price
		             FROM <isNotEmpty prepend=" " property="map.is_cur_month">
				              (SELECT rank () OVER (ORDER BY a.opr_date DESC) rn, a.*
		                        FROM J_STOCKS_SUMMARY a
		                       WHERE 1 = 1 AND type = 0) summary
		                   </isNotEmpty>
		                   <isEmpty prepend=" " property="map.is_cur_month">
				              (SELECT *
								  FROM J_STOCKS_SUMMARY a
								 WHERE a.TYPE = 1 
								  <isNotEmpty prepend=" and " property="map.cur_month">to_char (a.opr_date, 'YYYYMM') = #map.cur_month:VARCHAR#</isNotEmpty>
								 ) summary
		                   </isEmpty>
		                  LEFT JOIN  KONKA_R3_SHOP shop
		                     ON summary.R3_CODE = shop.R3_CODE
		            WHERE 1 = 1 
		             <isNotEmpty prepend=" and " property="map.branch_area_name_2">shop.BRANCH_AREA_NAME_2 = #map.branch_area_name_2:VARCHAR#</isNotEmpty>
		             ) data
		       left JOIN
		          (SELECT *
		             FROM KONKA_CATEGORY
		            WHERE C_TYPE = 10 
		            ) type
		       ON data.CUSTOMER_TYPE = type.C_INDEX
		       where data.CUSTOMER_TYPE is not null
		       <isNotEmpty prepend=" and " property="map.par_index">
						type.PAR_INDEX = #map.par_index#
			   </isNotEmpty>
		GROUP BY type.C_INDEX, type.C_NAME
	</select>
	<!--客户 库存周转率-->
	<select id="selectJcfxCustList" resultClass="HashMap" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		 SELECT data.R3_CODE,data.CUSTOMER_NAME,
		       max(type.C_NAME) cust_type,
		       max(data.ADD_DATE)ADD_DATE,
		       SUM (NVL (data.INIT_NUM, 0)* data.cash_price) / 10000 INIT_MONEY,
		       SUM (NVL (data.COME_NUM, 0)* data.cash_price) / 10000 COME_MONEY,
		       SUM (NVL (data.OUT_NUM, 0)* data.cash_price) / 10000 OUT_MONEY,
		       (SUM (NVL (data.INIT_NUM, 0)* data.cash_price)  + SUM (NVL (data.COME_NUM, 0)* data.cash_price) - SUM (NVL (data.OUT_NUM, 0)* data.cash_price))
		       / 10000
		          END_MONEY,
		          
		          decode(SUM (NVL (data.OUT_NUM, 0)* data.cash_price),0,0,
		          	30*(SUM (NVL (data.INIT_NUM, 0)* data.cash_price)  + SUM (NVL (data.COME_NUM, 0)* data.cash_price)) / (2*SUM (NVL (data.OUT_NUM, 0)* data.cash_price))
		          
		         	 ) as CUR_DAY,
		          45 as TARGET_DAY
		  FROM    (SELECT shop.CUSTOMER_TYPE,
		                  shop.R3_CODE,
		                  shop.CUSTOMER_NAME,
		                  summary.INIT_NUM ,
		                  summary.COME_NUM,
		                  summary.OUT_NUM,
		                  summary.ADD_DATE,
		                  (SELECT CASH_PRICE
		                     FROM KONKA_PD_MODEL_PRICES
		                    WHERE     PD_NAME = summary.goods_name
<!--		                          AND price_month = '201312'-->
                           <isNotEmpty prepend=" and " property="map.cur_month">price_month = #map.cur_month:VARCHAR#</isNotEmpty>
		                          <![CDATA[ AND rownum < 2 ]]>)
		                     cash_price
		             FROM <isNotEmpty prepend=" " property="map.is_cur_month">
				              (SELECT rank () OVER (ORDER BY a.opr_date DESC) rn, a.*
		                        FROM J_STOCKS_SUMMARY a
		                       WHERE 1 = 1 AND type = 0) summary
		                   </isNotEmpty>
		                   <isEmpty prepend=" " property="map.is_cur_month">
				              (SELECT *
								  FROM J_STOCKS_SUMMARY a
								 WHERE a.TYPE = 1 
								  <isNotEmpty prepend=" and " property="map.cur_month">to_char (a.opr_date, 'YYYYMM') = #map.cur_month:VARCHAR#</isNotEmpty>
								 ) summary
		                   </isEmpty>
		                  LEFT JOIN  KONKA_R3_SHOP shop
		                     ON summary.R3_CODE = shop.R3_CODE
		            WHERE 1 = 1 
		             <isNotEmpty prepend=" and " property="map.branch_area_name_2">shop.BRANCH_AREA_NAME_2 = #map.branch_area_name_2:VARCHAR#</isNotEmpty>
		             <isNotEmpty prepend=" and " property="map.c_index">
						shop.CUSTOMER_TYPE = #map.c_index#
					</isNotEmpty>
					) data
		       left JOIN
		          (SELECT *
		             FROM KONKA_CATEGORY
		            WHERE C_TYPE = 10 
		            <isNotEmpty prepend=" and " property="map.c_index">
						C_INDEX = #map.c_index#
					</isNotEmpty>
		            ) type
		       ON data.CUSTOMER_TYPE = type.C_INDEX
		       where data.CUSTOMER_TYPE is not null
		GROUP BY data.R3_CODE,data.CUSTOMER_NAME
	</select>
	
	<!-- 传入年月的字符串，查询月末库存 -->
	<select id="selectJStocksSummaryLastStocks" resultClass="long" parameterClass="jStocksSummary" cacheModel="oneDayCache">
	  select sum(init_num+come_num+out_num) from J_STOCKS_SUMMARY a where 
		1=1
		<include refid="sf-jStocksSummary"/>
		<isNotEmpty prepend=" and " property="map.year_month" >
		 to_char(add_date,'yyyy-mm')=#map.year_month#
		</isNotEmpty>
	</select>
	
	<!--	客户库存预警-->
	<select id="selectCustRepertoryReportCount" resultClass="long" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		 SELECT count(*)
					  FROM    (SELECT max(b.DEPT_ID)AS DEPT_ID,
					                  max(b.DEPT_NAME)AS DEPT_NAME,
					                  max(b.L4_DEPT_ID)AS L4_DEPT_ID,
					                  max(b.L4_DEPT_NAME)AS L4_DEPT_NAME,
					                  max(b.CUR_DEPT_ID)AS CUR_DEPT_ID,
					                  max(b.CUR_DEPT_NAME)AS CUR_DEPT_NAME,
					                  max (b.PAR_CUSTOMER_TYPE) AS PAR_CUSTOMER_TYPE,
					                  max (b.PAR_CUSTOMER_TYPE_NAME) AS PAR_CUSTOMER_TYPE_NAME,
					                  max (b.CUSTOMER_TYPE) AS CUSTOMER_TYPE,
					                  max (b.CUSTOMER_TYPE_NAME) AS CUSTOMER_TYPE_NAME,
					                  max(b.USER_ID) AS USER_ID,
					                  max(b.YWY_USER_NAME)as YWY_USER_NAME,
					                  max (c.GOODS_NAME_TYPE) AS GOODS_NAME_TYPE,
					                  max (c.IS_LOCKED) AS IS_LOCKED,
					                  max (c.IS_DEL) AS IS_DEL,
					                  max(b.CUSTOMER_NAME)as CUSTOMER_NAME,
					                  b.R3_CODE,
					                  a.GOODS_NAME,
					                  nvl(sum (a.INIT_NUM + a.COME_NUM - a.OUT_NUM),0) AS TOTLE_CUR_NUM
					             FROM J_STOCKS_SUMMARY a
					                  LEFT JOIN MV_ORG_OF_CUSTOMER_ALL b
					                     ON b.R3_CODE = a.R3_CODE
					                  LEFT JOIN KONKA_PE_PD_MODEL c
					                     ON a.GOODS_NAME = c.MD_NAME
					            WHERE a.TYPE = 0 
<!--						        <isNotEmpty prepend=" and " property="map.weekNum"><![CDATA[a.OPR_DATE > sysdate - (#map.weekNum:DECIMAL#)*7 ]]></isNotEmpty>-->
					           GROUP BY b.R3_CODE, a.GOODS_NAME) baseMsg
					       LEFT JOIN
					          (SELECT a.CUSTOMER_R3_CODE, a.MODEL_NAME, sum (nvl (a.NUM, 0)) total_num
					           <isNotEmpty prepend=" , " property="map.weekNum"><![CDATA[(sum (nvl (a.NUM, 0)) / #map.weekNum:DECIMAL#) avg_num]]></isNotEmpty>
								  FROM KONKA_MOBILE_SAIL_DATA a
								 WHERE 1=1 
								  <isNotEmpty prepend=" and " property="map.weekNum"><![CDATA[a.SALE_DATE > sysdate - ((#map.weekNum:DECIMAL#)*7+1) ]]></isNotEmpty>
								GROUP BY a.CUSTOMER_R3_CODE, a.MODEL_NAME) baseMsgAvg
					       ON baseMsgAvg.CUSTOMER_R3_CODE = baseMsg.R3_CODE
					          AND baseMsg.GOODS_NAME = baseMsgAvg.MODEL_NAME
					 WHERE 1 = 1
					 <isNotEmpty prepend=" and " property="map.dept_id_start">
							(baseMsg.DEPT_ID is not null and  baseMsg.DEPT_ID in (
										select dept_id from konka_dept start with dept_id in (
										SELECT DISTINCT (dept_id)
						  							FROM KONKA_ROLE_DATA_LEVEL
						 							WHERE role_id IN (SELECT role_id
						                     			FROM KONKA_PE_ROLE_USER
						                    			WHERE user_id = #map.session_user_id:DECIMAL#)
										) or dept_id = #map.dept_id_start# 
										connect by prior dept_id = par_id 
									)
							)
					  </isNotEmpty>
					  <isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
							baseMsg.USER_ID = #map.filter_by_ywy_id_eq#
					  </isNotEmpty>
					 <isNotEmpty prepend=" and " property="map.dept_id"> baseMsg.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.l4_dept_id">baseMsg.L4_DEPT_ID = #map.l4_dept_id:DECIMAL#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.l5_dept_id">baseMsg.CUR_DEPT_ID = #map.l5_dept_id:DECIMAL#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.r3_code_like">UPPER(baseMsg.r3_code) like '%' || UPPER(#map.r3_code_like:VARCHAR#) || '%'</isNotEmpty>
	                <isNotEmpty prepend=" and " property="map.customer_name_like">UPPER(baseMsg.CUSTOMER_NAME)like '%' || UPPER(#map.customer_name_like:VARCHAR#) || '%'</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.cus_type1">baseMsg.PAR_CUSTOMER_TYPE = #map.cus_type1:DECIMAL#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.cus_type2">baseMsg.CUSTOMER_TYPE = #map.cus_type2:DECIMAL#</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.ywy_user_name_like">baseMsg.YWY_USER_NAME like '%' || #map.ywy_user_name_like:VARCHAR# || '%'</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.goods_name_type">baseMsg.GOODS_NAME_TYPE = #map.goods_name_type:DECIMAL#</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.goods_name_like">UPPER(baseMsg.goods_name) like '%' || UPPER(#map.goods_name_like:VARCHAR#) || '%'</isNotEmpty>
             <!-- 预警状态 超出-->
			 <isNotEmpty prepend=" and " property="map.downAvg"><![CDATA[nvl(baseMsg.totle_cur_num,0) < nvl(baseMsgAvg.avg_num,0)]]> </isNotEmpty>
            <!--预警状态 短缺-->
			 <isNotEmpty prepend=" and " property="map.upAvg"><![CDATA[nvl(baseMsg.totle_cur_num,0) > nvl(baseMsgAvg.avg_num,0)]]></isNotEmpty>
	</select>
	
<!--	客户库存预警-->
	<select id="selectCustRepertoryReportList" resultClass="HashMap" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		        SELECT baseMsg.*, nvl(baseMsgAvg.TOTAL_NUM,0) as TOTAL_NUM, nvl(baseMsgAvg.AVG_NUM,0) as AVG_NUM
					  FROM    (SELECT max(b.DEPT_ID)AS DEPT_ID,
					                  max(b.DEPT_NAME)AS DEPT_NAME,
					                  max(b.L4_DEPT_ID)AS L4_DEPT_ID,
					                  max(b.L4_DEPT_NAME)AS L4_DEPT_NAME,
					                  max(b.CUR_DEPT_ID)AS CUR_DEPT_ID,
					                  max(b.CUR_DEPT_NAME)AS CUR_DEPT_NAME,
					                  max (b.PAR_CUSTOMER_TYPE) AS PAR_CUSTOMER_TYPE,
					                  max (b.PAR_CUSTOMER_TYPE_NAME) AS PAR_CUSTOMER_TYPE_NAME,
					                  max (b.CUSTOMER_TYPE) AS CUSTOMER_TYPE,
					                  max (b.CUSTOMER_TYPE_NAME) AS CUSTOMER_TYPE_NAME,
					                  max(b.USER_ID) AS USER_ID,
					                  max(b.YWY_USER_NAME)as YWY_USER_NAME,
					                  max (c.GOODS_NAME_TYPE) AS GOODS_NAME_TYPE,
					                  max (c.IS_LOCKED) AS IS_LOCKED,
					                  max (c.IS_DEL) AS IS_DEL,
					                  max(b.CUSTOMER_NAME)as CUSTOMER_NAME,
					                  b.R3_CODE,
					                  a.GOODS_NAME,
					                  nvl(sum (a.INIT_NUM + a.COME_NUM - a.OUT_NUM),0) AS TOTLE_CUR_NUM
					             FROM J_STOCKS_SUMMARY a
					                  LEFT JOIN MV_ORG_OF_CUSTOMER_ALL b
					                     ON b.R3_CODE = a.R3_CODE
					                  LEFT JOIN KONKA_PE_PD_MODEL c
					                     ON a.GOODS_NAME = c.MD_NAME
					            WHERE a.TYPE = 0 
<!--						        <isNotEmpty prepend=" and " property="map.weekNum"><![CDATA[a.OPR_DATE > sysdate - (#map.weekNum:DECIMAL#)*7 ]]></isNotEmpty>-->
					           GROUP BY b.R3_CODE, a.GOODS_NAME) baseMsg
					       LEFT JOIN
					          (SELECT a.CUSTOMER_R3_CODE, a.MODEL_NAME, sum (nvl (a.NUM, 0)) total_num
					           <isNotEmpty prepend=" , " property="map.weekNum"><![CDATA[(sum (nvl (a.NUM, 0)) / #map.weekNum:DECIMAL#) avg_num]]></isNotEmpty>
								  FROM KONKA_MOBILE_SAIL_DATA a
								 WHERE 1=1 
								  <isNotEmpty prepend=" and " property="map.weekNum"><![CDATA[a.SALE_DATE > sysdate - ((#map.weekNum:DECIMAL#)*7+1) ]]></isNotEmpty>
								GROUP BY a.CUSTOMER_R3_CODE, a.MODEL_NAME) baseMsgAvg
					       ON baseMsgAvg.CUSTOMER_R3_CODE = baseMsg.R3_CODE
					          AND baseMsg.GOODS_NAME = baseMsgAvg.MODEL_NAME
					 WHERE 1 = 1
					 <isNotEmpty prepend=" and " property="map.dept_id_start">
							(baseMsg.DEPT_ID is not null and  baseMsg.DEPT_ID in (
										select dept_id from konka_dept start with dept_id in (
										SELECT DISTINCT (dept_id)
						  							FROM KONKA_ROLE_DATA_LEVEL
						 							WHERE role_id IN (SELECT role_id
						                     			FROM KONKA_PE_ROLE_USER
						                    			WHERE user_id = #map.session_user_id:DECIMAL#)
										) or dept_id = #map.dept_id_start# 
										connect by prior dept_id = par_id 
									)
							)
					  </isNotEmpty>
					  <isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
							baseMsg.USER_ID = #map.filter_by_ywy_id_eq#
					  </isNotEmpty>
					<isNotEmpty prepend=" and " property="map.dept_id"> baseMsg.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.l4_dept_id">baseMsg.L4_DEPT_ID = #map.l4_dept_id:DECIMAL#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.l5_dept_id">baseMsg.CUR_DEPT_ID = #map.l5_dept_id:DECIMAL#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.r3_code_like">UPPER(baseMsg.r3_code) like '%' || UPPER(#map.r3_code_like:VARCHAR#) || '%'</isNotEmpty>
	                <isNotEmpty prepend=" and " property="map.customer_name_like">UPPER(baseMsg.CUSTOMER_NAME)like '%' || UPPER(#map.customer_name_like:VARCHAR#) || '%'</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.cus_type1">baseMsg.PAR_CUSTOMER_TYPE = #map.cus_type1:DECIMAL#</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.cus_type2">baseMsg.CUSTOMER_TYPE = #map.cus_type2:DECIMAL#</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.ywy_user_name_like">baseMsg.YWY_USER_NAME like '%' || #map.ywy_user_name_like:VARCHAR# || '%'</isNotEmpty>
                    <isNotEmpty prepend=" and " property="map.goods_name_type">baseMsg.GOODS_NAME_TYPE = #map.goods_name_type:DECIMAL#</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.goods_name_like">UPPER(baseMsg.goods_name) like '%' || UPPER(#map.goods_name_like:VARCHAR#) || '%'</isNotEmpty>
             <!-- 预警状态 超出-->
			 <isNotEmpty prepend=" and " property="map.downAvg"><![CDATA[nvl(baseMsg.totle_cur_num,0) < nvl(baseMsgAvg.avg_num ,0)]]> </isNotEmpty>
            <!--预警状态 短缺-->
			 <isNotEmpty prepend=" and " property="map.upAvg"><![CDATA[nvl(baseMsg.totle_cur_num,0) > nvl(baseMsgAvg.avg_num ,0)]]></isNotEmpty>
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	<!-- 客户 型号统计报表 -->
	<select id="selectCustGoodsNameReportCount" resultClass="long" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		 SELECT count(*)
		  FROM (SELECT b.R3_CODE,
               b.CUSTOMER_NAME,
               b.CUSTOMER_TYPE,
               b.CUSTOMER_TYPE_NAME,
               b.PAR_CUSTOMER_TYPE,
               b.PAR_CUSTOMER_TYPE_NAME,
               b.DEPT_ID,
               b.DEPT_NAME,
               b.USER_ID,
               b.YWY_USER_NAME,
               a.C_ID,
               a.GOODS_ID,
               a.GOODS_NAME,
              (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
	                  (SELECT sum(nvl(init_num,0))
		                  FROM J_STOCKS_SUMMARY b
		                 WHERE b.TYPE = 1
                       <isNotEmpty prepend=" and " property="map.init_begin_time"><![CDATA[ b.add_date >= to_date(#map.init_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.init_end_time"><![CDATA[ b.add_date <= to_date(#map.init_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                  </isNotEmpty>
               
                  <isNotEmpty prepend=" + " property="map.isCurrMonth">
                   <isNotEmpty prepend="" property="map.dynamic_init_begin_time">
	                  (SELECT sum(nvl(init_num,0))
		                  FROM J_STOCKS_SUMMARY b
		                 WHERE b.TYPE = 0
	                      <isNotEmpty prepend=" and " property="map.dynamic_init_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_init_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		                  <isNotEmpty prepend=" and " property="map.dynamic_init_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_init_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
	                      AND b.goods_id = a.GOODS_ID
	                      AND b.c_id = a.c_id)
                   </isNotEmpty>
                 </isNotEmpty>
                )
                  AS init_num,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                   (SELECT sum(nvl(INIT_MONEY,0))
                  FROM J_STOCKS_SUMMARY b
                 WHERE b.TYPE = 1
                  <isNotEmpty prepend=" and " property="map.init_begin_time"><![CDATA[ b.add_date >= to_date(#map.init_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.init_end_time"><![CDATA[ b.add_date <= to_date(#map.init_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                  </isNotEmpty>
               
                <isNotEmpty prepend=" + " property="map.isCurrMonth">
                  <isNotEmpty prepend="" property="map.dynamic_init_begin_time">
                  	(SELECT sum(nvl(INIT_MONEY,0))
	                  FROM J_STOCKS_SUMMARY b
	                 WHERE b.TYPE = 0
                       <isNotEmpty prepend=" and " property="map.dynamic_init_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_init_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.dynamic_init_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_init_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                   </isNotEmpty>
               </isNotEmpty>
                )
                  AS INIT_MONEY,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                   (SELECT sum (nvl(come_num,0))
                    FROM J_STOCKS_SUMMARY b
                   WHERE b.TYPE = 1
                       <isNotEmpty prepend=" and " property="map.come_begin_time"><![CDATA[ b.add_date >= to_date(#map.come_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.come_end_time"><![CDATA[ b.add_date <= to_date(#map.come_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                         AND b.goods_id = a.GOODS_ID
                         AND b.c_id = a.c_id)
                  </isNotEmpty>
                  
                  <isNotEmpty prepend=" + " property="map.isCurrMonth">
	                  (SELECT sum (nvl(come_num,0))
	                    FROM J_STOCKS_SUMMARY b
	                   WHERE b.TYPE = 0
	                       <isNotEmpty prepend=" and " property="map.dynamic_come_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_come_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
			               <isNotEmpty prepend=" and " property="map.dynamic_come_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_come_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
	                         AND b.goods_id = a.GOODS_ID
	                         AND b.c_id = a.c_id)
                  </isNotEmpty>
               )
                  AS come_num,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                    (SELECT sum (nvl(COME_MONEY,0))
                    FROM J_STOCKS_SUMMARY b
                   WHERE b.TYPE = 1
                    <isNotEmpty prepend=" and " property="map.come_begin_time"><![CDATA[ b.add_date >= to_date(#map.come_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.come_end_time"><![CDATA[ b.add_date <= to_date(#map.come_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                         AND b.goods_id = a.GOODS_ID
                         AND b.c_id = a.c_id)
                </isNotEmpty> 
               
                <isNotEmpty prepend=" + " property="map.isCurrMonth">
	                  (SELECT sum (nvl(COME_MONEY,0))
	                    FROM J_STOCKS_SUMMARY b
	                   WHERE b.TYPE = 0
	                    <isNotEmpty prepend=" and " property="map.dynamic_come_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_come_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		                <isNotEmpty prepend=" and " property="map.dynamic_come_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_come_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                         AND b.goods_id = a.GOODS_ID
                         AND b.c_id = a.c_id)
                  </isNotEmpty>          
               )
                  AS COME_MONEY,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                  (SELECT sum (nvl(out_num,0))
                  FROM J_STOCKS_SUMMARY b
                 WHERE b.TYPE = 1
                       <isNotEmpty prepend=" and " property="map.out_begin_time"><![CDATA[ b.add_date >= to_date(#map.out_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.out_end_time"><![CDATA[ b.add_date <= to_date(#map.out_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                </isNotEmpty> 
               
                <isNotEmpty prepend=" + " property="map.isCurrMonth">
	                 (SELECT sum (nvl(out_num,0))
		                  FROM J_STOCKS_SUMMARY b
		                 WHERE b.TYPE = 0
                       <isNotEmpty prepend=" and " property="map.dynamic_out_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_out_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.dynamic_out_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_out_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                  </isNotEmpty>  
                )
                  AS out_num,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                  (SELECT sum (nvl(OUT_MONEY,0))
                  FROM J_STOCKS_SUMMARY b
                 WHERE b.TYPE = 1
                       <isNotEmpty prepend=" and " property="map.out_begin_time"><![CDATA[ b.add_date >= to_date(#map.out_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.out_end_time"><![CDATA[ b.add_date <= to_date(#map.out_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                </isNotEmpty> 
               <isNotEmpty prepend=" + " property="map.isCurrMonth">
	              (SELECT sum (nvl(OUT_MONEY,0))
	                FROM J_STOCKS_SUMMARY b
	               WHERE b.TYPE = 0
	                   <isNotEmpty prepend=" and " property="map.dynamic_out_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_out_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
	                   <isNotEmpty prepend=" and " property="map.dynamic_out_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_out_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
	                   AND b.goods_id = a.GOODS_ID
	                   AND b.c_id = a.c_id)
              </isNotEmpty> 
               )
               AS OUT_MONEY
          FROM    J_BASE_GOODS a
               LEFT JOIN
                  MV_ORG_OF_CUSTOMER_ALL b
               ON a.C_ID = b.KONKA_R3_ID
         WHERE 1=1
             <isNotEmpty prepend=" and " property="map.dept_id_start">
					(b.cur_dept_id is not null and  b.cur_dept_id in (
								select dept_id from konka_dept start with dept_id in (
								SELECT DISTINCT (dept_id)
				  							FROM KONKA_ROLE_DATA_LEVEL
				 							WHERE role_id IN (SELECT role_id
				                     			FROM KONKA_PE_ROLE_USER
				                    			WHERE user_id = #map.session_user_id:DECIMAL#)
								) or dept_id = #map.dept_id_start# 
								connect by prior dept_id = par_id 
							)
					)
			  </isNotEmpty>
			  <isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
					b.user_id = #map.filter_by_ywy_id_eq#
			  </isNotEmpty>
              <isNotEmpty prepend=" and " property="map.dept_id">b.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.cus_type1">b.PAR_CUSTOMER_TYPE = #map.cus_type1:DECIMAL#</isNotEmpty>
		      <isNotEmpty prepend=" and " property="map.cus_type2">b.CUSTOMER_TYPE = #map.cus_type2:DECIMAL#</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.customer_name_like">b.CUSTOMER_NAME like '%' || #map.customer_name_like:VARCHAR# || '%'</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.r3_code_like">b.R3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.goods_name_like">a.GOODS_NAME like '%' || #map.goods_name_like:VARCHAR# || '%'</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.user_name_like">b.YWY_USER_NAME like '%' || #map.user_name_like:VARCHAR# || '%'</isNotEmpty>
               ) c
	</select>
	<!--客户型号统计报表-->
	<select id="selectCustGoodsNameReportList" resultClass="HashMap" parameterClass="jStocksSummary" cacheModel="oneDayCache">
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		        SELECT c.*,
		       (nvl (c.INIT_NUM, 0) + nvl (c.COME_NUM, 0) - nvl (c.OUT_NUM, 0))
		          AS last_num,
		          (nvl (c.INIT_MONEY, 0) + nvl (c.COME_MONEY, 0) - nvl (c.OUT_MONEY, 0))
                  AS last_money,
		       (CASE
		           WHEN nvl (c.OUT_NUM, 0) != 0
		           THEN
		               (#map.total_num:DECIMAL#
		                *(NVL (c.INIT_NUM, 0) * 0.5
		                 + (  nvl (c.init_num, 0)
		                    + nvl (c.COME_NUM, 0)
		                    - nvl (c.OUT_NUM, 0))
		                   * 0.5)
		              / c.OUT_NUM)
		           ELSE
		              0
		        END)
		          AS day_num,
		       (CASE
		           WHEN nvl (c.OUT_MONEY, 0) != 0
		           THEN
		              (#map.total_num:DECIMAL#
		              * (NVL (c.INIT_MONEY, 0) * 0.5
		                 + (  nvl (c.INIT_MONEY, 0)
		                    + nvl (c.COME_MONEY, 0)
		                    - nvl (c.OUT_MONEY, 0))
		                   * 0.5)
		              / c.OUT_MONEY)
		           ELSE
		              0
		        END)
		          AS day_money
		  FROM (SELECT b.R3_CODE,
               b.CUSTOMER_NAME,
               b.CUSTOMER_TYPE,
               b.CUSTOMER_TYPE_NAME,
               b.PAR_CUSTOMER_TYPE,
               b.PAR_CUSTOMER_TYPE_NAME,
               b.DEPT_ID,
               b.DEPT_NAME,
               b.USER_ID,
               b.YWY_USER_NAME,
               a.C_ID,
               a.GOODS_ID,
               a.GOODS_NAME,
                (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
	                  (SELECT sum(nvl(init_num,0))
		                  FROM J_STOCKS_SUMMARY b
		                 WHERE b.TYPE = 1
                       <isNotEmpty prepend=" and " property="map.init_begin_time"><![CDATA[ b.add_date >= to_date(#map.init_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.init_end_time"><![CDATA[ b.add_date <= to_date(#map.init_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                  </isNotEmpty>
               
                  <isNotEmpty prepend=" + " property="map.isCurrMonth">
                   <isNotEmpty prepend="" property="map.dynamic_init_begin_time">
	                  (SELECT sum(nvl(init_num,0))
		                  FROM J_STOCKS_SUMMARY b
		                 WHERE b.TYPE = 0
	                      <isNotEmpty prepend=" and " property="map.dynamic_init_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_init_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		                  <isNotEmpty prepend=" and " property="map.dynamic_init_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_init_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
	                      AND b.goods_id = a.GOODS_ID
	                      AND b.c_id = a.c_id)
                   </isNotEmpty>
                 </isNotEmpty>
                )
                  AS init_num,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                   (SELECT sum(nvl(INIT_MONEY,0))
                  FROM J_STOCKS_SUMMARY b
                 WHERE b.TYPE = 1
                  <isNotEmpty prepend=" and " property="map.init_begin_time"><![CDATA[ b.add_date >= to_date(#map.init_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.init_end_time"><![CDATA[ b.add_date <= to_date(#map.init_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                  </isNotEmpty>
               
                <isNotEmpty prepend=" + " property="map.isCurrMonth">
                  <isNotEmpty prepend="" property="map.dynamic_init_begin_time">
                  	(SELECT sum(nvl(INIT_MONEY,0))
	                  FROM J_STOCKS_SUMMARY b
	                 WHERE b.TYPE = 0
                       <isNotEmpty prepend=" and " property="map.dynamic_init_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_init_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.dynamic_init_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_init_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                   </isNotEmpty>
               </isNotEmpty>
                )
                  AS INIT_MONEY,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                   (SELECT sum (nvl(come_num,0))
                    FROM J_STOCKS_SUMMARY b
                   WHERE b.TYPE = 1
                       <isNotEmpty prepend=" and " property="map.come_begin_time"><![CDATA[ b.add_date >= to_date(#map.come_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.come_end_time"><![CDATA[ b.add_date <= to_date(#map.come_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                         AND b.goods_id = a.GOODS_ID
                         AND b.c_id = a.c_id)
                  </isNotEmpty>
                  
                  <isNotEmpty prepend=" + " property="map.isCurrMonth">
	                  (SELECT sum (nvl(come_num,0))
	                    FROM J_STOCKS_SUMMARY b
	                   WHERE b.TYPE = 0
	                       <isNotEmpty prepend=" and " property="map.dynamic_come_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_come_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
			               <isNotEmpty prepend=" and " property="map.dynamic_come_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_come_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
	                         AND b.goods_id = a.GOODS_ID
	                         AND b.c_id = a.c_id)
                  </isNotEmpty>
               )
                  AS come_num,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                    (SELECT sum (nvl(COME_MONEY,0))
                    FROM J_STOCKS_SUMMARY b
                   WHERE b.TYPE = 1
                    <isNotEmpty prepend=" and " property="map.come_begin_time"><![CDATA[ b.add_date >= to_date(#map.come_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.come_end_time"><![CDATA[ b.add_date <= to_date(#map.come_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                         AND b.goods_id = a.GOODS_ID
                         AND b.c_id = a.c_id)
                </isNotEmpty> 
               
                <isNotEmpty prepend=" + " property="map.isCurrMonth">
	                  (SELECT sum (nvl(COME_MONEY,0))
	                    FROM J_STOCKS_SUMMARY b
	                   WHERE b.TYPE = 0
	                    <isNotEmpty prepend=" and " property="map.dynamic_come_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_come_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		                <isNotEmpty prepend=" and " property="map.dynamic_come_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_come_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                         AND b.goods_id = a.GOODS_ID
                         AND b.c_id = a.c_id)
                  </isNotEmpty>          
               )
                  AS COME_MONEY,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                  (SELECT sum (nvl(out_num,0))
                  FROM J_STOCKS_SUMMARY b
                 WHERE b.TYPE = 1
                       <isNotEmpty prepend=" and " property="map.out_begin_time"><![CDATA[ b.add_date >= to_date(#map.out_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.out_end_time"><![CDATA[ b.add_date <= to_date(#map.out_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                </isNotEmpty> 
               
                <isNotEmpty prepend=" + " property="map.isCurrMonth">
	                 (SELECT sum (nvl(out_num,0))
		                  FROM J_STOCKS_SUMMARY b
		                 WHERE b.TYPE = 0
                       <isNotEmpty prepend=" and " property="map.dynamic_out_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_out_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.dynamic_out_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_out_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                  </isNotEmpty>  
                )
                  AS out_num,
               (0
                 <isNotEmpty prepend=" + " property="map.isNotCurrMonth">
                  (SELECT sum (nvl(OUT_MONEY,0))
                  FROM J_STOCKS_SUMMARY b
                 WHERE b.TYPE = 1
                       <isNotEmpty prepend=" and " property="map.out_begin_time"><![CDATA[ b.add_date >= to_date(#map.out_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
		               <isNotEmpty prepend=" and " property="map.out_end_time"><![CDATA[ b.add_date <= to_date(#map.out_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
                       AND b.goods_id = a.GOODS_ID
                       AND b.c_id = a.c_id)
                </isNotEmpty> 
               <isNotEmpty prepend=" + " property="map.isCurrMonth">
	              (SELECT sum (nvl(OUT_MONEY,0))
	                FROM J_STOCKS_SUMMARY b
	               WHERE b.TYPE = 0
	                   <isNotEmpty prepend=" and " property="map.dynamic_out_begin_time"><![CDATA[ b.add_date >= to_date(#map.dynamic_out_begin_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
	                   <isNotEmpty prepend=" and " property="map.dynamic_out_end_time"><![CDATA[ b.add_date <= to_date(#map.dynamic_out_end_time#,'yyyy-MM-dd hh24:mi:ss') ]]></isNotEmpty>
	                   AND b.goods_id = a.GOODS_ID
	                   AND b.c_id = a.c_id)
              </isNotEmpty> 
               )
               AS OUT_MONEY
          FROM    J_BASE_GOODS a
               LEFT JOIN
                  MV_ORG_OF_CUSTOMER_ALL b
               ON a.C_ID = b.KONKA_R3_ID
         WHERE 1=1
		        <isNotEmpty prepend=" and " property="map.dept_id_start">
					(b.cur_dept_id is not null and  b.cur_dept_id in (
								select dept_id from konka_dept start with dept_id in (
								SELECT DISTINCT (dept_id)
				  							FROM KONKA_ROLE_DATA_LEVEL
				 							WHERE role_id IN (SELECT role_id
				                     			FROM KONKA_PE_ROLE_USER
				                    			WHERE user_id = #map.session_user_id:DECIMAL#)
								) or dept_id = #map.dept_id_start# 
								connect by prior dept_id = par_id 
							)
					)
			  </isNotEmpty>
			  <isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
					b.user_id = #map.filter_by_ywy_id_eq#
			  </isNotEmpty>
              <isNotEmpty prepend=" and " property="map.dept_id">b.DEPT_ID = #map.dept_id:DECIMAL#</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.cus_type1">b.PAR_CUSTOMER_TYPE = #map.cus_type1:DECIMAL#</isNotEmpty>
		      <isNotEmpty prepend=" and " property="map.cus_type2">b.CUSTOMER_TYPE = #map.cus_type2:DECIMAL#</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.customer_name_like">b.CUSTOMER_NAME like '%' || #map.customer_name_like:VARCHAR# || '%'</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.r3_code_like">b.R3_CODE like '%' || #map.r3_code_like:VARCHAR# || '%'</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.goods_name_like">a.GOODS_NAME like '%' || #map.goods_name_like:VARCHAR# || '%'</isNotEmpty>
              <isNotEmpty prepend=" and " property="map.user_name_like">b.YWY_USER_NAME like '%' || #map.user_name_like:VARCHAR# || '%'</isNotEmpty>
               ) c
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>
	
	
	<insert id="insertJStocksSummary" parameterClass="jStocksSummary">
		<selectKey resultClass="long" keyProperty="id">select SEQ_J_STOCKS_SUMMARY_ID.nextval as id from dual </selectKey>
		<![CDATA[insert into J_STOCKS_SUMMARY (]]>
		<dynamic prepend=" ">
			<isNotNull prepend="," property="id">ID</isNotNull>	
			<isNotNull prepend="," property="c_id">C_ID</isNotNull>	
			<isNotNull prepend="," property="r3_code">R3_CODE</isNotNull>	
			<isNotNull prepend="," property="customer_name">CUSTOMER_NAME</isNotNull>	
			<isNotNull prepend="," property="goods_id">GOODS_ID</isNotNull>	
			<isNotNull prepend="," property="goods_name">GOODS_NAME</isNotNull>	
			<isNotNull prepend="," property="opr_date">OPR_DATE</isNotNull>	
			<isNotNull prepend="," property="init_num">INIT_NUM</isNotNull>	
			<isNotNull prepend="," property="come_num">COME_NUM</isNotNull>	
			<isNotNull prepend="," property="come_money">COME_MONEY</isNotNull>	
			<isNotNull prepend="," property="out_num">OUT_NUM</isNotNull>	
			<isNotNull prepend="," property="out_money">OUT_MONEY</isNotNull>	
			<isNotNull prepend="," property="add_date">ADD_DATE</isNotNull>	
			<isNotNull prepend="," property="type">TYPE</isNotNull>		
			<isNotNull prepend="," property="init_money">INIT_MONEY</isNotNull>	
			<isNotNull prepend="," property="sale_cost">SALE_COST</isNotNull>
		</dynamic>
		<![CDATA[) values (]]>
		<dynamic prepend=" ">
			<isNotNull prepend="," property="id">#id:BIGINT#</isNotNull>
			<isNotNull prepend="," property="c_id">#c_id:BIGINT#</isNotNull>
			<isNotNull prepend="," property="r3_code">#r3_code:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_name">#customer_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="goods_id">#goods_id:BIGINT#</isNotNull>
			<isNotNull prepend="," property="goods_name">#goods_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="opr_date">#opr_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="init_num">#init_num:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="come_num">#come_num:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="come_money">#come_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="out_num">#out_num:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="out_money">#out_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="add_date">#add_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="type">#type:SMALLINT#</isNotNull>
			<isNotNull prepend="," property="init_money">#init_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="sale_cost">#sale_cost:DECIMAL#</isNotNull>
		</dynamic>
		<![CDATA[)]]>
	</insert>

	<update id="updateJStocksSummary" parameterClass="JStocksSummary">
		update J_STOCKS_SUMMARY
		<dynamic prepend="set">
			<isNotNull prepend="," property="id">ID = #id:BIGINT#</isNotNull>
			<isNotNull prepend="," property="c_id">C_ID = #c_id:BIGINT#</isNotNull>
			<isNotNull prepend="," property="r3_code">R3_CODE = #r3_code:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_name">CUSTOMER_NAME = #customer_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="goods_id">GOODS_ID = #goods_id:BIGINT#</isNotNull>
			<isNotNull prepend="," property="goods_name">GOODS_NAME = #goods_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="opr_date">OPR_DATE = #opr_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="init_num">INIT_NUM = #init_num:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="come_num">COME_NUM = #come_num:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="come_money">COME_MONEY = #come_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="out_num">OUT_NUM = #out_num:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="out_money">OUT_MONEY = #out_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="add_date">ADD_DATE = #add_date:TIMESTAMP#</isNotNull>
			<isNotNull prepend="," property="type">TYPE = #type:SMALLINT#</isNotNull>
			<isNotNull prepend="," property="init_money">INIT_MONEY = #init_money:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="sale_cost">SALE_COST = #sale_cost:DECIMAL#</isNotNull>
		</dynamic>
		where
		<isNotEmpty prepend=" " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</update>

	<delete id="deleteJStocksSummary" parameterClass="JStocksSummary">
		delete from J_STOCKS_SUMMARY where
		<isNotEmpty prepend=" " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
			<isNotEmpty prepend=" " property="type">TYPE = #type#</isNotEmpty>
		</isEmpty>
	</delete>

</sqlMap>