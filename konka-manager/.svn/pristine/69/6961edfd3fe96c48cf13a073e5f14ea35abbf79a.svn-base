package com.ebiz.mmt.web.struts.manager.chengduoa;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.validator.GenericValidator;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ebiz.mmt.domain.KonkaDept;
import com.ebiz.mmt.domain.KonkaExpenseClaims;
import com.ebiz.mmt.domain.KonkaOaModuleType;
import com.ebiz.mmt.domain.KonkaPeAttachments;
import com.ebiz.mmt.domain.KonkaR3Shop;
import com.ebiz.mmt.domain.KonkaoaCategory;
import com.ebiz.mmt.domain.KonkaoaFiles;
import com.ebiz.mmt.domain.KonkaoaFilesAuditNode;
import com.ebiz.mmt.domain.KonkaoaFilesProperty;
import com.ebiz.mmt.domain.KonkaoaFilesRecipient;
import com.ebiz.mmt.domain.PeProdUser;
import com.ebiz.mmt.domain.PeRoleUser;
import com.ebiz.mmt.web.Constants;
import com.ebiz.mmt.web.struts.MmtFilePathConfig;
import com.ebiz.ssi.web.struts.bean.Pager;
import com.ebiz.ssi.web.struts.bean.UploadFile;

/**
 * Code by AutoGenerated Builder AutoGenerated Builder Version 2.1
 * 
 * @author Hui,Gang
 * @datetime 2011-12-01 09:21:56
 */
public class ExpenseClaimsAction extends BaseMmtoaAction {
	@Override
	public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		return this.list(mapping, form, request, response);
	}


	public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);
		// super.getModPopeDom(form, request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		PeProdUser ui = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);
		KonkaDept konkaDept = new KonkaDept();
		konkaDept.setDept_id(ui.getDept_id());
		konkaDept = super.getFacade().getKonkaDeptService().getKonkaDept(konkaDept);
		dynaBean.set("submit_dept", konkaDept.getDept_name());// 申请部门
		dynaBean.set("submit_user", ui.getUser_name());// 申请人
		request.setAttribute("submit_user", ui.getReal_name());// 申请人
		request.setAttribute("submit_dept", konkaDept.getDept_name());// 申请部门
		request.setAttribute("submit_datetime", new Date());// 申请时间
		dynaBean.set("is_node", dynaBean.get("is_node"));
		// 分公司取得
		if (null != konkaDept.getDept_type() && konkaDept.getDept_type() > 2) {
			KonkaDept fgs_dept = super.getSuperiorForDeptType(ui.getDept_id(), 3);
			dynaBean.set("fgs_dept_name", fgs_dept.getDept_name());
		}

		// 获取当前用户所属部门的管辖的网点列表
		KonkaR3Shop shop = getKonkaR3ShopForSelect(mapping, form, request, response, ui.getDept_id());// 获取当前用户相关联的直营网点分页列表
        shop.getRow().setFirst(0);
        shop.getRow().setCount(100);
		List<KonkaR3Shop> r3ShopList = super.getFacade().getKonkaR3ShopService().getKonkaR3ShopList(shop);

		request.setAttribute("r3ShopList", r3ShopList);

		dynaBean.set("yymm", this.getNowYearAndMonth());

		KonkaoaCategory category = new KonkaoaCategory();
		category.setIs_del(0);
		category.setC_type(0);// 获取费用申请的费用类别信息表
		request.setAttribute("categoryList", super.getFacade().getKonkaoaCategoryService()
				.getKonkaoaCategoryListForFiles(category));

		KonkaDept kDept = getKonkaDeptForFgs(ui.getDept_id());
		
		// 审批流程
		KonkaoaFilesAuditNode filesAuditNode = new KonkaoaFilesAuditNode();
		filesAuditNode.setAudit_level(1l);
		filesAuditNode.setAudit_type(2);
		filesAuditNode.setNode_type(1);
		if (kDept != null) {
			filesAuditNode.setDept_id(kDept.getDept_id());
		} else {
			filesAuditNode.setDept_id(0L);
		}
		List<KonkaoaFilesAuditNode> filesAuditNodeList = super.getFacade().getKonkaoaFilesAuditNodeService()
				.getKonkaoaFilesAuditNodeList(filesAuditNode);
		if (null != filesAuditNodeList) {
			request.setAttribute("KonkaoaFilesAuditNodeList", filesAuditNodeList);
		}

		// 模板
		KonkaOaModuleType konkaOaModuleType = new KonkaOaModuleType();
		konkaOaModuleType.setIs_del(0);
		if (kDept != null) {
			konkaOaModuleType.setDept_id(kDept.getDept_id());
		} else {
			konkaOaModuleType.setDept_id(0L);
		}
		List<KonkaOaModuleType> konkaOaModuleTypeList = super.getFacade().getKonkaOaModuleTypeService()
				.getKonkaOaModuleTypeList(konkaOaModuleType);

		if (null != konkaOaModuleTypeList && konkaOaModuleTypeList.size() > 0) {
			request.setAttribute("konkaOaModuleTypeList", konkaOaModuleTypeList);
		}
        request.setAttribute("is_add", "2");// ADD
		return mapping.findForward("input");
	}

	public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (null == super.checkUserModPopeDom(form, request, "0")) {
			return super.checkPopedomInvalid(request, response);
		}

		setNaviStringToRequestScope(form, request);

		DynaBean dynaBean = (DynaBean) form;
		super.encodeCharacterForGetMethod(dynaBean, request);
		String r3_code = (String) dynaBean.get("r3_code");
		String customer_name = (String) dynaBean.get("customer_name");

		Pager pager = (Pager) dynaBean.get("pager");

		KonkaExpenseClaims entity = new KonkaExpenseClaims();
		// super.copyProperties(entity, form);

		PeProdUser ui = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);

		String map_file_status = (String) dynaBean.get("map_file_status");

		entity.getMap().put("file_title_like", dynaBean.get("file_title_like"));
		entity.getMap().put("st_submit_datetime", dynaBean.get("st_submit_datetime"));
		entity.getMap().put("en_submit_datetime", dynaBean.get("en_submit_datetime"));
		if (StringUtils.isNotBlank(r3_code)) {
			entity.getMap().put("r3_code", r3_code);
			entity.getMap().put("selectR3Shop", 1);
		}
		if (StringUtils.isNotBlank(customer_name)) {
			entity.getMap().put("customer_name", customer_name);
			entity.getMap().put("selectR3Shop", 1);
		}
		entity.getMap().put("map_file_status", map_file_status);
		entity.getMap().put("file_no", dynaBean.get("file_no"));
		entity.getMap().put("submit_user_id", ui.getId());
		// entity.getMap().put("submit_user", ui.getReal_name());

		Long recordCount = getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaimsCount(entity);
		pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
		entity.getRow().setFirst(pager.getFirstRow());
		entity.getRow().setCount(pager.getRowCount());
		List<KonkaExpenseClaims> entityList = getFacade().getKonkaExpenseClaimsService()
				.getKonkaExpenseClaimsPaginatedList(entity);

		for (KonkaExpenseClaims t : entityList) {
			KonkaR3Shop r3Shop = new KonkaR3Shop();
			if (t.getR3_shop_id() != null) {
				r3Shop.setId(t.getR3_shop_id());
				r3Shop = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(r3Shop);
				if (null != r3Shop) {
					t.getMap().put("r3_code", r3Shop.getR3_code());
					t.getMap().put("r3_shop_name", r3Shop.getCustomer_name());
				}
			}
		}

		request.setAttribute("entityList", entityList);

        // 下发的用户群组 费用暂时不做下发
        // OaUserGroupH oh = new OaUserGroupH();
        // String dept_id = String.valueOf(ui.getDept_id());
        // oh.setDept_id(Integer.valueOf(dept_id));
        // List<OaUserGroupH> OaUserGroupHList =
        // getFacade().getOaUserGroupHService().getOaUserGroupHList(oh);
        // request.setAttribute("OaUserGroupHList", OaUserGroupHList);

		return mapping.findForward("list");
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);

		PeProdUser ui = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);
		DynaBean dynaBean = (DynaBean) form;
		String file_id = (String) dynaBean.get("file_id");

		if (!GenericValidator.isLong(file_id)) {
			this.saveError(request, "errors.long", new String[] { file_id });
			return mapping.findForward("list");
		}

		KonkaExpenseClaims entity = new KonkaExpenseClaims();
		entity.setFile_id(Long.valueOf(file_id));
		entity = super.getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaims(entity);

		if (null == entity) {
			saveMessage(request, "entity.missing");
			return mapping.findForward("list");
		}

		entity.setQueryString(super.serialize(request, "file_id", "method"));

		super.copyProperties(form, entity);

		request.setAttribute("konkaExpenseClaims", entity);

		// 获取当前用户所选的网点
		KonkaR3Shop shop = new KonkaR3Shop();
		if (null != entity.getR3_shop_id()) {
			shop.setId(entity.getR3_shop_id());
		} else {
			shop.setId(-1l);
		}
		shop = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(shop);
		if (null != shop) {
			request.setAttribute("customer_name", shop.getCustomer_name());
		}

		KonkaoaFiles file = new KonkaoaFiles();
		file.setId(entity.getFile_id());
		file = super.getFacade().getKonkaoaFilesService().getKonkaoaFilesForExpenseClaims(file);

		request.setAttribute("submit_datetime", file.getSubmit_datetime());
		request.setAttribute("submit_user", file.getSubmit_user());
		request.setAttribute("submit_dept", file.getSubmit_dept());
		request.setAttribute("apply_user_name", file.getApply_user_name());
		request.setAttribute("apply_user_tel", file.getApply_user_tel());

		super.copyProperties(form, file);

		// 文件属性
		// 0,选择多种费用类别
		KonkaoaFilesProperty filesProperty = new KonkaoaFilesProperty();
		filesProperty.setLink_id(entity.getFile_id());
		filesProperty.setC_type(0); // 文件添加的最初类型
		List<KonkaoaFilesProperty> filesPropertyList = super.getFacade().getKonkaoaFilesPropertyService()
				.getKonkaoaFilesPropertyList(filesProperty);
		for (KonkaoaFilesProperty konkaoaFilesProperty : filesPropertyList) {
			KonkaoaCategory category = new KonkaoaCategory();
			category.setC_index(konkaoaFilesProperty.getC_index());
			category = super.getFacade().getKonkaoaCategoryService().getKonkaoaCategory(category);
			if (category != null) {
				konkaoaFilesProperty.getMap().put("c_name", category.getC_name());
			}
		}
		request.setAttribute("filesPropertyList", filesPropertyList);

		// 下发范围
		KonkaoaFilesRecipient fr = new KonkaoaFilesRecipient();
		fr.setLink_id(entity.getFile_id());
		List<KonkaoaFilesRecipient> filesRecipientList = super.getFacade().getKonkaoaFilesRecipientService()
				.getKonkaoaFilesRecipientList(fr);
		if (null != filesRecipientList) {
			String fa_ids = "", fa_names = "", dept_ids = "", dept_names = "";
			for (KonkaoaFilesRecipient _fr : filesRecipientList) {
				switch (_fr.getReceive_user_type()) {
				case 0:
					fa_ids = fa_ids.concat(_fr.getReceive_id().toString()).concat(",");
					fa_names = fa_names.concat(_fr.getReceive_user().toString()).concat(",");
					break;
				case 1:
					dept_ids = dept_ids.concat(_fr.getReceive_id().toString()).concat(",");
					dept_names = dept_names.concat(_fr.getReceive_user().toString()).concat(",");
					break;
				}

			}
			dynaBean.set("fa_ids", fa_ids);
			dynaBean.set("fa_names", StringUtils.substringBeforeLast(fa_names, ","));
			dynaBean.set("dept_ids", dept_ids);
			dynaBean.set("dept_names", StringUtils.substringBeforeLast(dept_names, ","));
		}

		// 附件
		KonkaPeAttachments attachment = new KonkaPeAttachments();
		attachment.setLink_id(entity.getFile_id());
		attachment.setLink_tab("FILES");
		attachment.setIs_del(0l);
		request.setAttribute("attachmentList", super.getFacade().getKonkaPeAttachmentsService()
				.getKonkaPeAttachmentsList(attachment));

		KonkaoaFilesAuditNode fan = new KonkaoaFilesAuditNode();
		fan.setLink_id(entity.getFile_id());
		fan.setAudit_type(0);
		request.setAttribute("filesAuditNodeList", super.getFacade().getKonkaoaFilesAuditNodeService()
				.getKonkaoaFilesAuditNodeList(fan));

		// //模板
		// PeProdUser ui = (PeProdUser)
		// request.getSession().getAttribute(Constants.USER_INFO);
		// KonkaOaModuleType konkaOaModuleType = new KonkaOaModuleType();
		// konkaOaModuleType.setIs_del(0);
		// konkaOaModuleType.setDept_id(ui.getDept_id());
		// List<KonkaOaModuleType> konkaOaModuleTypeList =
		// super.getFacade().getKonkaOaModuleTypeService().getKonkaOaModuleTypeList(konkaOaModuleType);
		//		
		// if(null != konkaOaModuleTypeList && konkaOaModuleTypeList.size() >
		// 0){
		// request.setAttribute("konkaOaModuleTypeList", konkaOaModuleTypeList);
		// }

		KonkaDept kDept = getKonkaDeptForFgs(ui.getDept_id());
		
		// 审批流程
		KonkaoaFilesAuditNode filesAuditNode = new KonkaoaFilesAuditNode();
		filesAuditNode.setAudit_level(1l);
		filesAuditNode.setAudit_type(2);
		filesAuditNode.setNode_type(1);
		if (kDept != null) {
			filesAuditNode.setDept_id(kDept.getDept_id());
		} else {
			filesAuditNode.setDept_id(0L);
		}
		List<KonkaoaFilesAuditNode> filesAuditNodeList = super.getFacade().getKonkaoaFilesAuditNodeService()
				.getKonkaoaFilesAuditNodeList(filesAuditNode);

		if (null != filesAuditNodeList) {
			request.setAttribute("KonkaoaFilesAuditNodeList", filesAuditNodeList);
		}

		return mapping.findForward("input");
	}

	public ActionForward copy(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);

		DynaBean dynaBean = (DynaBean) form;
		String file_id = (String) dynaBean.get("file_id");

		if (!GenericValidator.isLong(file_id)) {
			this.saveError(request, "errors.long", new String[] { file_id });
			return mapping.findForward("list");
		}

		KonkaExpenseClaims entity = new KonkaExpenseClaims();
		entity.setFile_id(Long.valueOf(file_id));
		entity = super.getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaims(entity);

		PeProdUser ui = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);
		
		KonkaDept kDept = getKonkaDeptForFgs(ui.getDept_id());
		if (null == entity) {
			saveMessage(request, "entity.missing");
			return mapping.findForward("list");
		}

		entity.setQueryString(super.serialize(request, "file_id", "method"));

		request.setAttribute("konkaExpenseClaims", entity);

		// 获取当前用户所选的网点
		KonkaR3Shop shop = new KonkaR3Shop();
		if (null != entity.getR3_shop_id()) {
			shop.setId(entity.getR3_shop_id());
		} else {
			shop.setId(-1l);
		}
		shop = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(shop);
		if (null != shop) {
			request.setAttribute("customer_name", shop.getCustomer_name());
		}

		KonkaoaFiles file = new KonkaoaFiles();
		file.setId(entity.getFile_id());
		file = super.getFacade().getKonkaoaFilesService().getKonkaoaFilesForExpenseClaims(file);

		request.setAttribute("submit_datetime", file.getSubmit_datetime());
		request.setAttribute("submit_user", file.getSubmit_user());
		request.setAttribute("submit_dept", file.getSubmit_dept());
		request.setAttribute("apply_user_name", file.getApply_user_name());
		request.setAttribute("apply_user_tel", file.getApply_user_tel());

		// 文件属性
		// 0,选择多种费用类别
		KonkaoaFilesProperty filesProperty = new KonkaoaFilesProperty();
		filesProperty.setLink_id(entity.getFile_id());
		filesProperty.setC_type(0); // 文件添加的最初类型
		List<KonkaoaFilesProperty> filesPropertyList = super.getFacade().getKonkaoaFilesPropertyService()
				.getKonkaoaFilesPropertyList(filesProperty);
		for (KonkaoaFilesProperty konkaoaFilesProperty : filesPropertyList) {
			KonkaoaCategory category = new KonkaoaCategory();
			category.setC_index(konkaoaFilesProperty.getC_index());
			category = super.getFacade().getKonkaoaCategoryService().getKonkaoaCategory(category);
			if (category != null) {
				konkaoaFilesProperty.getMap().put("c_name", category.getC_name());
			}
		}
		request.setAttribute("filesPropertyList", filesPropertyList);

		// 附件
		KonkaPeAttachments attachment = new KonkaPeAttachments();
		attachment.setLink_id(entity.getFile_id());
		attachment.setLink_tab("FILES");
		attachment.setIs_del(0l);
		request.setAttribute("attachmentList", super.getFacade().getKonkaPeAttachmentsService()
				.getKonkaPeAttachmentsList(attachment));

		KonkaoaFilesAuditNode fan = new KonkaoaFilesAuditNode();
		fan.setLink_id(entity.getFile_id());
		fan.setAudit_type(0);
		request.setAttribute("filesAuditNodeList", super.getFacade().getKonkaoaFilesAuditNodeService()
				.getKonkaoaFilesAuditNodeList(fan));

		file.setId(null);
		file.setFile_no(null);
		entity.setFile_id(null);
		super.copyProperties(form, entity);
		super.copyProperties(form, file);

		dynaBean.set("yymm", this.getNowYearAndMonth());
		request.setAttribute("submit_datetime", new Date());

		KonkaoaFilesAuditNode filesAuditNode = new KonkaoaFilesAuditNode();
		filesAuditNode.setAudit_level(1l);
		filesAuditNode.setAudit_type(2);
		filesAuditNode.setNode_type(1);
		if (kDept != null) {
			filesAuditNode.setDept_id(kDept.getDept_id());
		} else {
			filesAuditNode.setDept_id(0L);
		}
		List<KonkaoaFilesAuditNode> filesAuditNodeList = super.getFacade().getKonkaoaFilesAuditNodeService()
				.getKonkaoaFilesAuditNodeList(filesAuditNode);

		if (null != filesAuditNodeList) {
			request.setAttribute("KonkaoaFilesAuditNodeList", filesAuditNodeList);
		}

		return mapping.findForward("input");
	}

	public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (isCancelled(request)) {
			return list(mapping, form, request, response);
		}
		if (!isTokenValid(request)) {
			saveError(request, "errors.token");
			return list(mapping, form, request, response);
		}
		resetToken(request);

		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");

		String[] c_index_array = request.getParameterValues("c_index");
		String[] c_desc_array = request.getParameterValues("c_desc");
		String[] amount_array = request.getParameterValues("amount");
		String[] cost_array = request.getParameterValues("cost");
		String[] copy_file_id = request.getParameterValues("copy_file_id");

        // 是保存还是直接提交审批,区别是单据保存时,单据状态为0,还是1
        String send_to_process = (String) dynaBean.get("send_to_process");



		KonkaExpenseClaims _entity = new KonkaExpenseClaims();
		super.copyProperties(_entity, form);

		KonkaoaFiles entity = new KonkaoaFiles();
		super.copyProperties(entity, form);

		// String audit_user_id = (String) dynaBean.get("audit_user_id");
		// String audit_user_name = (String) dynaBean.get("audit_user_name");
		//
		// if (StringUtils.isBlank(audit_user_id) ||
		// StringUtils.isBlank(audit_user_name)) {
		// saveError(request, "errors.token");
		// return list(mapping, form, request, response);
		// }

		String audit_node_id = (String) dynaBean.get("audit_node_id");

		if (StringUtils.isBlank(audit_node_id)) {
			saveError(request, "errors.token");
			return list(mapping, form, request, response);
		}

		List<KonkaoaFilesProperty> filesPropertyList = new ArrayList<KonkaoaFilesProperty>();

		entity.setFilesPropertyList(filesPropertyList);
		entity.setAudit_node_id(Long.parseLong(audit_node_id));

		// 费用类别 category0，插入多条记录，即选择多个费用类别
		// String[] categorys = request.getParameterValues("category_checkbox");
		if (null != c_index_array) {
			for (int i = 0; i < c_index_array.length; i++) {
				KonkaoaFilesProperty fp = new KonkaoaFilesProperty();
				fp.setC_type(0);
				if (StringUtils.isNotBlank(c_index_array[i])) {
					fp.setC_index(Long.parseLong(c_index_array[i]));
					if (StringUtils.isNotBlank(c_desc_array[i])) {
						fp.setC_desc(c_desc_array[i]);
					}
					if (StringUtils.isNotBlank(cost_array[i])) {
						fp.setCost(new BigDecimal(cost_array[i]));
					}
					if (StringUtils.isNotBlank(amount_array[i])) {
						fp.setAmount(new BigDecimal(amount_array[i]));
					}
					fp.setAdd_user_id(super.getSessionUserInfo(request).getId());
					fp.setAdd_dept_id(super.getSessionUserInfo(request).getDept_id());
					fp.setAdd_date(new Date());
					fp.setAdd_type(0l);
					filesPropertyList.add(fp);
				}
			}
		}

		entity.setFilesPropertyList(filesPropertyList);

		// 是否下发
		if (entity.getIs_forward() == 1) {
            // 处理不同类型的下发接收者
			entity.setFilesRecipientList(getFilesProperty(form, request, entity.getId()).getFilesRecipientList());
		}

		PeProdUser ui = (PeProdUser) request.getSession().getAttribute(Constants.USER_INFO);

		// 附件
		List<UploadFile> uploadFileList = super.uploadFile(form, MmtFilePathConfig.OTHERS_PATH, true, 0,
				new int[] { 240 });
		List<KonkaPeAttachments> attachmentList = new ArrayList<KonkaPeAttachments>();
		KonkaPeAttachments attachment = null;
		for (UploadFile uploadFile : uploadFileList) {
			attachment = new KonkaPeAttachments();
			attachment.setFile_name(uploadFile.getFileName());
			attachment.setFile_type(uploadFile.getContentType());
			attachment.setFile_size(new Long(uploadFile.getFileSize()));
			attachment.setSave_path(uploadFile.getFileSavePath());
			attachment.setSave_name(uploadFile.getFileSaveName());
			attachment.setIs_del(0l);
			attachment.setLink_tab("FILES");
			attachment.setAdd_user_name(ui.getUser_name());
			attachment.setAdd_user_id(ui.getId());
			attachmentList.add(attachment);
		}
		if (null != copy_file_id && null == _entity.getFile_id()) {
			for (int i = 0; i < copy_file_id.length; i++) {
				attachment = new KonkaPeAttachments();

				KonkaPeAttachments kpa = new KonkaPeAttachments();
				kpa.setId(Long.valueOf(copy_file_id[i]));
				attachment = super.getFacade().getKonkaPeAttachmentsService().getKonkaPeAttachments(kpa);
				attachment.setId(null);
				attachmentList.add(attachment);
			}
		}
		entity.setAttachmentList(attachmentList);

		// // 审批结点
		// List<KonkaoaFilesAuditNode> filesAuditNodeList = new
		// ArrayList<KonkaoaFilesAuditNode>();
		//
		// // 审批人
		// KonkaoaFilesAuditNode _fan = new KonkaoaFilesAuditNode();
		// _fan.setAudit_level(new Long(1));
		// _fan.setAudit_user_id(new Long(audit_user_id));
		// _fan.setAudit_user(audit_user_name);
		// _fan.setAudit_type(0);

		// 审批结点
		List<KonkaoaFilesAuditNode> filesAuditNodeList = new ArrayList<KonkaoaFilesAuditNode>();

		// 审批人
		KonkaoaFilesAuditNode _fan = new KonkaoaFilesAuditNode();
		_fan.setLink_id(Long.parseLong(audit_node_id));
		_fan.setAudit_type(2);
		List<KonkaoaFilesAuditNode> auditNodeList = super.getFacade().getKonkaoaFilesAuditNodeService()
				.getKonkaoaFilesAuditNodeList(_fan);

		if (null != auditNodeList) {
			for (int i = 0; i < auditNodeList.size(); i++) {
				Long user_id = new Long(auditNodeList.get(i).getAudit_user_id());
				if (null != user_id) {
					KonkaoaFilesAuditNode fau = new KonkaoaFilesAuditNode();
					fau.setAudit_level(new Long(i + 1));
					fau.setAudit_user_id(user_id);
					fau.setAudit_user(auditNodeList.get(i).getAudit_user());
					fau.setAudit_type(0);
					filesAuditNodeList.add(fau);
				}
			}
		} else {
			saveError(request, "errors.token");
			return list(mapping, form, request, response);
		}

        // 渠道的konkaoafiles.audit_type 只会是0.因为不做会签.另外刚保存时,状态为未提交也就是0
        int audit_type = 0, file_status = 0;


		// long cur_audit_user_id = _fan.getAudit_user_id();
		long cur_audit_user_id = auditNodeList.get(0).getAudit_user_id();


		entity.setCur_audit_user_id(cur_audit_user_id);

		// filesAuditNodeList.add(_fan);

		entity.setFilesAuditNodeList(filesAuditNodeList);
		entity.setAudit_type(audit_type);
		entity.setFile_type(1);// 将文件类别设置为1，表示添加的是费用申请--审批表

		KonkaDept konkaDept = new KonkaDept();
		konkaDept.setDept_id(ui.getDept_id());
		KonkaDept kd = super.getFacade().getKonkaDeptService().getKonkaDept(konkaDept);

		if (null == _entity.getFile_id()) {// insert
            //
            if (send_to_process != null && "send_to_process".equals(send_to_process)) {
                // 提交到流程上
                file_status = 1;
            }
			entity.setSubmit_dept_id(ui.getDept_id());
			entity.setSubmit_dept(kd.getDept_name());
			entity.setSubmit_user_id(ui.getId());

			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String submit_datetime = (String) dynaBean.get("submit_datetime");
			entity.setSubmit_datetime(df.parse(submit_datetime));

			// 登录用户所在部门的提交文件编号最大值
			String file_no_lm = dynaBean.get("file_no_left") + "" + dynaBean.get("file_no_middle");
			entity.setFile_no(getFilesMaxNo(file_no_lm));

			entity.setFile_status(file_status);
			entity.setIs_del(0);

			_entity.setFiles(entity);
			_entity.setColumn_1("0");
			super.getFacade().getKonkaExpenseClaimsService().createKonkaExpenseClaims(_entity);
			saveMessage(request, "entity.inserted");

			// the line below is added for pagination
			StringBuffer pathBuffer = new StringBuffer();
			pathBuffer.append(mapping.findForward("success").getPath());
			pathBuffer.append("&mod_id=" + mod_id);
			pathBuffer.append("&");
			pathBuffer.append(super.encodeSerializedQueryString(entity.getQueryString()));
			ActionForward forward = new ActionForward(pathBuffer.toString(), true);
			// end
			return forward;
		} else if (null != _entity.getFile_id()) {// update
            //
            if (send_to_process != null && "send_to_process".equals(send_to_process)) {
                // 提交到流程上
                file_status = 1;
            }

			KonkaoaFiles _f = new KonkaoaFiles();
			_f.setId(_entity.getFile_id());
			_f = super.getFacade().getKonkaoaFilesService().getKonkaoaFiles(_f);
			KonkaExpenseClaims ec = new KonkaExpenseClaims();
			ec.setFile_id(_entity.getFile_id());
			ec = super.getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaims(ec);
			if (null == ec) {
				saveError(request, "errors.param");
				return list(mapping, form, request, response);
			}
            entity.setFile_status(file_status);
			entity.setSubmit_datetime(null);
			entity.setSubmit_dept(kd.getDept_name());
			entity.setId(_entity.getFile_id());
			_entity.setFiles(entity);
			super.copyProperties(_entity, form);
			super.getFacade().getKonkaExpenseClaimsService().modifyKonkaExpenseClaims(_entity);
			saveMessage(request, "entity.updated");
		}

		// the line below is added for pagination
		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append(mapping.findForward("success").getPath());
		pathBuffer.append("&mod_id=" + mod_id);
		pathBuffer.append("&");
		pathBuffer.append(super.encodeSerializedQueryString(entity.getQueryString()));
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end
		return forward;
	}

	public ActionForward view(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);

		super.getModPopeDom(form, request);
		setNaviStringToRequestScope(form, request);

		DynaBean dynaBean = (DynaBean) form;

		String file_id = (String) dynaBean.get("file_id");
		if (!GenericValidator.isLong(file_id)) {
			saveError(request, "errors.long", file_id);
			return mapping.findForward("list");
		}

		KonkaExpenseClaims kec = new KonkaExpenseClaims();
		kec.setFile_id(new Long(file_id));
		kec = super.getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaims(kec);

		if (null == kec) {
			saveMessage(request, "entity.missing");
			return mapping.findForward("list");
		}

		KonkaoaFiles files = new KonkaoaFiles();
		files.setId(kec.getFile_id());
		files = super.getFacade().getKonkaoaFilesService().getKonkaoaFiles(files);

		super.copyProperties(form, kec);
		super.copyProperties(form, files);

		super.setCategoryListToRequestScope(request);

		KonkaoaCategory category = new KonkaoaCategory();
		category.setIs_del(0);
		category.setC_type(0);// 获取费用申请的费用类别信息表
		request.setAttribute("categoryList", super.getFacade().getKonkaoaCategoryService()
				.getKonkaoaCategoryListForFiles(category));

		// 文件属性
		// 0,选择多种费用类别
		KonkaoaFilesProperty filesProperty = new KonkaoaFilesProperty();
		filesProperty.setLink_id(kec.getFile_id());
		filesProperty.setC_type(0);
		List<KonkaoaFilesProperty> filesPropertyList = super.getFacade().getKonkaoaFilesPropertyService()
				.getKonkaoaFilesPropertyList(filesProperty);
		request.setAttribute("filesPropertyList", filesPropertyList);

		// 下发范围
		KonkaoaFilesRecipient fr = new KonkaoaFilesRecipient();
		fr.setLink_id(files.getId());
		List<KonkaoaFilesRecipient> filesRecipientList = super.getFacade().getKonkaoaFilesRecipientService()
				.getKonkaoaFilesRecipientList(fr);
		if (null != filesRecipientList) {
			String fa_ids = "", fa_names = "", dept_ids = "", dept_names = "";
			for (KonkaoaFilesRecipient _fr : filesRecipientList) {
				switch (_fr.getReceive_user_type()) {
				case 0:
					fa_ids = fa_ids.concat(_fr.getReceive_id().toString()).concat(",");
					fa_names = fa_names.concat(_fr.getReceive_user().toString()).concat(",");
					break;
				case 1:
					dept_ids = dept_ids.concat(_fr.getReceive_id().toString()).concat(",");
					dept_names = dept_names.concat(_fr.getReceive_user().toString()).concat(",");
					break;
				}

			}
			dynaBean.set("fa_ids", fa_ids);
			dynaBean.set("fa_names", StringUtils.substringBeforeLast(fa_names, ","));
			dynaBean.set("dept_ids", dept_ids);
			dynaBean.set("dept_names", StringUtils.substringBeforeLast(dept_names, ","));
		}

		// 附件
		KonkaPeAttachments attachment = new KonkaPeAttachments();
		attachment.setLink_id(files.getId());
		attachment.setLink_tab("FILES");
		attachment.setIs_del(0l);
		request.setAttribute("attachmentList", super.getFacade().getKonkaPeAttachmentsService()
				.getKonkaPeAttachmentsList(attachment));

		// if (files.getFile_status() > -1) {
		// 审批记录显示
		KonkaoaFilesAuditNode fan = new KonkaoaFilesAuditNode();
		fan.setLink_id(files.getId());
		fan.setAudit_type(0);
		request.setAttribute("filesAuditNodeList", super.getFacade().getKonkaoaFilesAuditNodeService()
				.getKonkaoaFilesAuditNodeListForView(fan));


		request.setAttribute("konkaExpenseClaims", kec);

		return mapping.findForward("view");
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;

		String file_id = (String) dynaBean.get("file_id");
		String[] pks = (String[]) dynaBean.get("pks");
		String mod_id = (String) dynaBean.get("mod_id");

		if (!StringUtils.isBlank(file_id) && GenericValidator.isLong(file_id)) {
			KonkaExpenseClaims entity = new KonkaExpenseClaims();
			entity.setFile_id(new Long(file_id));
			super.getFacade().getKonkaExpenseClaimsService().removeKonkaExpenseClaims(entity);
			saveMessage(request, "entity.deleted");
		} else if (!ArrayUtils.isEmpty(pks)) {
			for (String pk : pks) {
				KonkaExpenseClaims _entity = new KonkaExpenseClaims();
				_entity.setFile_id(new Long(pk));
				super.getFacade().getKonkaExpenseClaimsService().removeKonkaExpenseClaims(_entity);
			}
			// KonkaExpenseClaims entity = new KonkaExpenseClaims();
			// entity.getMap().put("pks", pks);
			// super.getFacade().getKonkaExpenseClaimsService().removeKonkaExpenseClaims(entity);
			saveMessage(request, "entity.deleted");
		}

		// the line below is added for pagination
		StringBuffer pathBuffer = new StringBuffer();
		pathBuffer.append(mapping.findForward("success").getPath());
		pathBuffer.append("&mod_id=" + mod_id);
		pathBuffer.append("&");
		pathBuffer.append(super.encodeSerializedQueryString(super.serialize(request, "file_id", "pks", "method")));
		ActionForward forward = new ActionForward(pathBuffer.toString(), true);
		// end

		return forward;
	}

	public ActionForward deleteFile(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		DynaBean dynaBean = (DynaBean) form;

		String id = (String) dynaBean.get("id");

		if (StringUtils.isNotBlank(id) && GenericValidator.isLong(id)) {
			KonkaPeAttachments entity = new KonkaPeAttachments();
			entity.setId(new Long(id));
			getFacade().getKonkaPeAttachmentsService().removeKonkaPeAttachments(entity);
			saveMessage(request, "entity.deleted");
		}
		super.renderText(response, "success");
		return null;
	}

	// 费用统计

	public ActionForward countList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		if (null == super.checkUserModPopeDom(form, request, "0")) {
			return super.checkPopedomInvalid(request, response);
		}
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		super.encodeCharacterForGetMethod(dynaBean, request);
		Pager pager = (Pager) dynaBean.get("pager");
		KonkaExpenseClaims entity = new KonkaExpenseClaims();
		String dept_id = (String) dynaBean.get("dept_id");
		String l4_dept_id = (String) dynaBean.get("l4_dept_id");
		String l5_dept_id = (String) dynaBean.get("l5_dept_id");
		if (StringUtils.isNotBlank(dept_id)) {
			entity.getMap().put("dept_id", dept_id);
		}
		if (StringUtils.isNotBlank(l4_dept_id)) {
			entity.getMap().put("l4_dept_id", l4_dept_id);
		}
		if (StringUtils.isNotBlank(l5_dept_id)) {
			entity.getMap().put("l5_dept_id", l5_dept_id);
		}
		
		//权限判断
		HttpSession session = request.getSession();
		PeProdUser user = (PeProdUser) session.getAttribute(Constants.USER_INFO);
		if (null == user) {
			String msg = super.getMessage(request, "user.session.isEmpty");
			super.renderJavaScript(response, "window.onload=function(){alert('" + msg + "');history.back();}");
			return null;
		}
		PeRoleUser pUser = new PeRoleUser();
		pUser.setUser_id(user.getId());
		List<PeRoleUser> pUserList = super.getFacade().getPeRoleUserService().getPeRoleUserList(pUser);

		Boolean role_id_gt_30 = false;
		Boolean role_id_30_btw_60 = false;
		Boolean role_id_eq_30_or_34 = false;
		for (PeRoleUser p : pUserList) {
			if (p.getRole_id() < 30)
				role_id_gt_30 = true;
			if (p.getRole_id() > 30 && p.getRole_id() < 60 && p.getRole_id() != 34)
				role_id_30_btw_60 = true;
			if (p.getRole_id() == 30 || p.getRole_id() == 34)
				role_id_eq_30_or_34 = true;
		}
		if (role_id_gt_30) {
		} else if (role_id_eq_30_or_34) {
			entity.getMap().put("is_not_admin", true);
			entity.getMap().put("is_fgs_gly", true);

			KonkaDept kDept = super.getKonkaDeptForFgs(user.getDept_id());
			if (null == kDept) {
				super.renderText(response, "用户部门信息出错，请联系管理员！");
				return null;
			}
			entity.getMap().put("dept_value", kDept.getDept_id());
			entity.getMap().put("dept_sn", kDept.getDept_sn());

		} else if (role_id_30_btw_60) {
			entity.getMap().put("is_not_admin", true);
			entity.getMap().put("is_fgs_user", true);
			entity.getMap().put("fgs_dept_id", user.getDept_id());
			entity.getMap().put("fgs_user_id", user.getId());

			KonkaDept kDept = super.getKonkaDeptForFgs(user.getDept_id());
			if (null == kDept) {
				super.renderText(response, "用户部门信息出错，请联系管理员！");
				return null;
			}
			entity.getMap().put("dept_sn", kDept.getDept_sn());
			
		} else {
			super.renderText(response, "您没有权限查看，请联系管理员！");
			return null;
		}
		

		// 搜索
		String r3_code = (String) dynaBean.get("r3_code");
		String map_file_status = (String) dynaBean.get("map_file_status");
		entity.getMap().put("customer_name", dynaBean.get("customer_name"));
		entity.getMap().put("c_index", dynaBean.get("c_index"));
		// 客户R3编码
		entity.getMap().put("r3_code", r3_code);
		entity.getMap().put("st_submit_date", dynaBean.get("st_submit_datetime"));
		entity.getMap().put("en_submit_date", dynaBean.get("en_submit_datetime"));
		entity.getMap().put("map_file_status", map_file_status);
		entity.getMap().put("submit_user_id", dynaBean.get("submit_user_id"));


		String excel_all = (String) dynaBean.get("excel_all");
		// 处理聚类选项
		String selected01 = (String) dynaBean.get("selected01");
		if (StringUtils.isNotEmpty(selected01))
			entity.getMap().put("selected01", selected01);
		String selected02 = (String) dynaBean.get("selected02");
		if (StringUtils.isNotEmpty(selected02))
			entity.getMap().put("selected02", selected02);
		String selected03 = (String) dynaBean.get("selected03");
		if (StringUtils.isNotEmpty(selected03))
			entity.getMap().put("selected03", selected03);
		String selected04 = (String) dynaBean.get("selected04");
		if (StringUtils.isNotEmpty(selected04))
			entity.getMap().put("selected04", selected04);
		Long recordCount = getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaimsCountListCount(entity);
		pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
		entity.getRow().setFirst(pager.getFirstRow());
		entity.getRow().setCount(pager.getRowCount());
		List<HashMap<String, String>> entityList = new ArrayList<HashMap<String, String>>();
		entityList = getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaimsCountList(entity);
		// 导出
		if ("1".equals(excel_all)) {
			entity.getRow().setFirst(0);
			entity.getRow().setCount(recordCount.intValue());
			List<HashMap<String, String>> entityList1 = new ArrayList<HashMap<String, String>>();
			entityList1 = getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaimsCountList(entity);
			request.setAttribute("entityList1", entityList1);
		}
		// 合计
		BigDecimal sumCount = new BigDecimal(0);
		BigDecimal sumNum = new BigDecimal(0);
		BigDecimal sumAllPrice = new BigDecimal(0);
		List<HashMap<String, String>> entityList2 = new ArrayList<HashMap<String, String>>();
		entity.getRow().setFirst(0);
		entity.getRow().setCount(recordCount.intValue());
		entityList2 = getFacade().getKonkaExpenseClaimsService().getKonkaExpenseClaimsCountList(entity);
		for (Map map : entityList2) {
			Set ks = map.keySet(); // key-value
			for (Object obj : ks) {
				String key = (String) obj;
				if ("COUNT".equals(key.toUpperCase())) {
					if (null != map.get(key))
						sumCount = sumCount.add(BigDecimal.valueOf(Double.valueOf(map.get(key).toString())));
				}
				if ("NUM".equals(key.toUpperCase())) {
					if (null != map.get(key))
						sumNum = sumNum.add(BigDecimal.valueOf(Double.valueOf(map.get(key).toString())));
				}
				if ("ALL_PRICE".equals(key.toUpperCase())) {
					if (null != map.get(key))
						sumAllPrice = sumAllPrice.add(BigDecimal.valueOf(Double.valueOf(map.get(key).toString())));
				}
			}
		}
		request.setAttribute("sumCount", sumCount);
		request.setAttribute("sumNum", sumNum);
		request.setAttribute("sumAllPrice", sumAllPrice);
		request.setAttribute("entityList", entityList);
		return new ActionForward("/chengduoa/ExpenseClaims/countList.jsp");
	}

}