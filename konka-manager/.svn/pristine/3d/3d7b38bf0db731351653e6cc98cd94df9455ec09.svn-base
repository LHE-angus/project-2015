package com.ebiz.mmt.web.struts.manager.admin;

import java.io.PrintWriter;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;

import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.commons.validator.GenericValidator;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ebiz.mmt.domain.KonkaDept;
import com.ebiz.mmt.domain.KonkaOrderInfoDetails;
import com.ebiz.mmt.domain.KonkaOrderInfoTrans;
import com.ebiz.mmt.domain.KonkaOrderInfoTransDetails;
import com.ebiz.mmt.domain.KonkaOrderInfoTransEnsu;
import com.ebiz.mmt.domain.KonkaR3Shop;
import com.ebiz.mmt.domain.PeProdUser;
import com.ebiz.mmt.domain.PeRoleUser;
import com.ebiz.mmt.web.Constants;
import com.ebiz.mmt.web.struts.BaseAction;
import com.ebiz.mmt.web.util.DESPlus;
import com.ebiz.ssi.web.struts.bean.Pager;

/**
 * Code by AutoGenerated Builder AutoGenerated Builder Version 2.1
 * 
 * @author Xiao,GuoJian
 * @datetime 2014-05-23
 */
public class KonkaOrderInfoTransAction extends BaseAction {

	@Override
	public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		return this.listForFHD(mapping, form, request, response);
	}

	/**
	 * @authorXiao,GuoJian
	 * @date 2014-05-23
	 */
	public ActionForward listForFHD(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		super.getModPopeDom(form, request);
		DynaBean dynaBean = (DynaBean) form;
		Pager pager = (Pager) dynaBean.get("pager");
		pager.setPageSize(10);
		String dept_id = (String) dynaBean.get("dept_id");// 分 公 司
		String l4_dept_id = (String) dynaBean.get("l4_dept_id");// 分 公 司
		String l5_dept_id = (String) dynaBean.get("l5_dept_id");// 分 公 司
		String trans_ensu_status = (String) dynaBean.get("trans_ensu_status");// 签收状态
		String trans_ensu_type = (String) dynaBean.get("trans_ensu_type");// 签收方式
		String trans_index_like = (String) dynaBean.get("trans_index_like");// 发货单号
		String trans_index_detail_like = (String) dynaBean.get("trans_index_detail_like");// 发货单号
		String r3_vbedl_like = (String) dynaBean.get("r3_vbedl_like");// 3物流单号
		String trans_ensu_date_s = (String) dynaBean.get("trans_ensu_date_s");// 签收日期
		String trans_ensu_date_e = (String) dynaBean.get("trans_ensu_date_e");// 签收日期
		String customer_name_like = (String) dynaBean.get("customer_name_like");// 客户名称
		String r3_code_like = (String) dynaBean.get("r3_code_like");// R3客户编码
		String r3_code_sdf_like = (String) dynaBean.get("r3_code_sdf_like");// 送达方
		String trans_unit_like = (String) dynaBean.get("trans_unit_like");// 承运单位
		String link_name_like = (String) dynaBean.get("link_name_like");// 司机姓名
		String link_phone_like = (String) dynaBean.get("link_phone_like");// 司机电话
		String trans_mode = (String) dynaBean.get("trans_mode");// 配送方式
		String trans_recl_user_like = (String) dynaBean.get("trans_recl_user_like");// 收货人姓名
		String trans_recl_user_phone_like = (String) dynaBean.get("trans_recl_user_phone_like");// 收货人电话
		String trans_recl_addr_like = (String) dynaBean.get("trans_recl_addr_like");// 收货人地址
		String trans_detail_status = (String) dynaBean.get("trans_detail_status");// 发货状态
		String is_print = (String) dynaBean.get("is_print");// 打印状态

		PeProdUser userInfo = (PeProdUser) super.getSessionAttribute(request, Constants.USER_INFO);

		KonkaOrderInfoTrans entity = new KonkaOrderInfoTrans();

		if (StringUtils.isNotBlank(trans_ensu_status)) {
			entity.getMap().put("trans_ensu_status", trans_ensu_status);
		}
		if (StringUtils.isNotBlank(trans_ensu_type)) {
			entity.getMap().put("trans_ensu_type", trans_ensu_type);
		}
		if (StringUtils.isNotBlank(trans_index_like)) {
			entity.getMap().put("trans_index_like", trans_index_like);
		}
		if (StringUtils.isNotBlank(trans_index_detail_like)) {
			entity.getMap().put("trans_index_detail_like", trans_index_detail_like);
		}
		if (StringUtils.isNotBlank(r3_vbedl_like)) {
			entity.getMap().put("r3_vbedl_like", r3_vbedl_like);
		}
		if (StringUtils.isNotBlank(trans_ensu_date_s)) {
			entity.getMap().put("trans_ensu_date_s", trans_ensu_date_s);
		}
		if (StringUtils.isNotBlank(trans_ensu_date_e)) {
			entity.getMap().put("trans_ensu_date_e", trans_ensu_date_e);
		}
		if (StringUtils.isNotBlank(customer_name_like)) {
			entity.getMap().put("customer_name_like", customer_name_like);
		}
		if (StringUtils.isNotBlank(r3_code_like)) {
			entity.getMap().put("r3_code_like", r3_code_like);
		}
		if (StringUtils.isNotBlank(r3_code_sdf_like)) {
			entity.getMap().put("r3_code_sdf_like", r3_code_sdf_like);
		}
		if (StringUtils.isNotBlank(trans_unit_like)) {
			entity.getMap().put("trans_unit_like", trans_unit_like);
		}
		if (StringUtils.isNotBlank(link_name_like)) {
			entity.getMap().put("link_name_like", link_name_like);
		}
		if (StringUtils.isNotBlank(link_phone_like)) {
			entity.getMap().put("link_phone_like", link_phone_like);
		}
		if (StringUtils.isNotBlank(trans_mode)) {
			entity.getMap().put("trans_mode", trans_mode);
		}
		if (StringUtils.isNotBlank(trans_recl_user_like)) {
			entity.getMap().put("trans_recl_user_like", trans_recl_user_like);
		}
		if (StringUtils.isNotBlank(trans_recl_user_phone_like)) {
			entity.getMap().put("trans_recl_user_phone_like", trans_recl_user_phone_like);
		}
		if (StringUtils.isNotBlank(trans_recl_addr_like)) {
			entity.getMap().put("trans_recl_addr_like", trans_recl_addr_like);
		}
		if (StringUtils.isNotBlank(trans_detail_status)) {
			entity.getMap().put("trans_detail_status", trans_detail_status);
		}
		if (StringUtils.isNotBlank(is_print)) {
			entity.getMap().put("is_print", is_print);
		}
		// 分公司
		if (StringUtils.isNotBlank(l5_dept_id)) {
			entity.getMap().put("par_dept_id", l5_dept_id);
		} else if (StringUtils.isNotBlank(l4_dept_id)) {
			entity.getMap().put("par_dept_id", l4_dept_id);
		} else if (StringUtils.isNotBlank(dept_id)) {
			entity.getMap().put("par_dept_id", dept_id);
		}

		PeRoleUser roleUser = new PeRoleUser();
		roleUser.setUser_id(userInfo.getId());
		List<PeRoleUser> userList = super.getFacade().getPeRoleUserService().getPeRoleUserList(roleUser);
		boolean role_id_eq_10 = false; // 是否为系统管理员
		for (PeRoleUser peRoleUser : userList) {
			if (peRoleUser.getRole_id() >= 10L && peRoleUser.getRole_id() < 30L) {
				role_id_eq_10 = true;
			}
		}
		if (role_id_eq_10) {// 是系统管理员

		} else {// 非系统管理员
			// 数据级别判断开始
			Long __dept_id = userInfo.getDept_id(); // 默认为当前用户所在部门
			int max_dlevel = super.getMaxDLevel(userInfo.getId()); // 获取当前用户的最高可视部门级别
			request.setAttribute("max_dlevel", max_dlevel);
			logger.info("Max level : {}", max_dlevel);
			switch (max_dlevel) {
			case 9:
				// 集团及以下部门可见
				__dept_id = 0L; // 0表示部门根节点，即“多媒体事业本部”
				break;
			case 8:
				// 分公司及以下部门可见
				KonkaDept dept_fgs = super.getKonkaDeptForFgs(Long.valueOf(__dept_id)); // 查询部门分公司
				if (null != dept_fgs && null != dept_fgs.getDept_id()) {
					__dept_id = dept_fgs.getDept_id(); // 分公司部门ID
				}
				break;
			case 7:
				// 我所在的部门及以下部门可见
				__dept_id = userInfo.getDept_id(); // 默认为当前用户所在部门
				break;
			case 0:
				break;
			default:
				// 出错
			}
			// 数据级别判断结束
			entity.getMap().put("session_user_id", userInfo.getId());// 获取当前客户所查看的数据部门
			entity.getMap().put("par_or_children_dept_id", __dept_id);

			if (max_dlevel < 7) {
				entity.getMap().put("no_sys_man_user_id", userInfo.getId()); // 表示需要当前用户角色审核的订单
			}
		}

		Long recordCount = super.getFacade().getKonkaOrderInfoTransService().getKonkaOrderInfoTransForFHDCount(entity);
		pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
		entity.getRow().setCount(pager.getRowCount());
		entity.getRow().setFirst(pager.getFirstRow());

		List<KonkaOrderInfoTrans> entityList = super.getFacade().getKonkaOrderInfoTransService()
				.getKonkaOrderInfoTransForFHDPaginatedList(entity);
		request.setAttribute("entityList", entityList);
		return mapping.findForward("list");
	}

	/**
	 * @authorXiao,GuoJian
	 * @date 2014-05-23
	 */
	public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		super.getModPopeDom(form, request);
		DynaBean dynaBean = (DynaBean) form;
		Pager pager = (Pager) dynaBean.get("pager");
		pager.setPageSize(10);

		return mapping.findForward("input");
	}

	/**
	 * @method:保存发货单
	 * @method:修改发货单
	 * @method:保存发货单后转打印
	 * @author Wang,KunLin
	 */
	public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		resetToken(request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		KonkaOrderInfoTrans konkaOrderInfoTrans = new KonkaOrderInfoTrans();
		super.copyProperties(konkaOrderInfoTrans, form);
		List<KonkaOrderInfoTransDetails> detailsList = new ArrayList<KonkaOrderInfoTransDetails>();
		String trans_id = (String) dynaBean.get("trans_id");// 拿到修改时的trans_id.
		String mod_id = (String) dynaBean.get("mod_id");// mod_id

		String[] pks = request.getParameterValues("pks");// 详情的主键选中情况
		String[] ensu_id = request.getParameterValues("ensu_id");// 详情的主键选中情况
		String[] order_id = request.getParameterValues("order_id");// order_Info主键
		String[] r3_id = request.getParameterValues("r3_id");// r3单号
		String[] r3_vbedl = request.getParameterValues("r3_vbedl");// 物流单号
		String[] trade_index = request.getParameterValues("trade_index");// 流水号
		String[] r3_code = request.getParameterValues("r3_code");// r3客户编码
		String[] model_name = request.getParameterValues("model_name");// 型号
		String[] model_num = request.getParameterValues("model_num");// 总数量
		String[] have_trans_num = request.getParameterValues("have_trans_num");// 已发货数量
		String[] trans_num = request.getParameterValues("trans_num");// 本次发货数量
		String[] model_money = request.getParameterValues("model_money");// 发货总金额
		String[] trans_recl_addr = request.getParameterValues("trans_recl_addr");// 收货人地址
		String[] trans_recl_user = request.getParameterValues("trans_recl_user");// 收货人姓名
		String[] trans_recl_user_phone = request.getParameterValues("trans_recl_user_phone");// 收货人电话
		String[] r3_code_sdf = request.getParameterValues("r3_code_sdf");// 送达方编码

		Boolean is_update_flag = false;// fasle表示是添加
		if (StringUtils.isNotBlank(trans_id)) {
			is_update_flag = true;
		}
		String trans_index_s = generateTransIndex();
		if (null != r3_id && r3_id.length > 0) {
			for (int i = 0; i < r3_id.length; i++) {
				KonkaOrderInfoTransDetails kkitd = new KonkaOrderInfoTransDetails();
				if (StringUtils.isNotBlank(order_id[i])) {
					kkitd.setOrder_id(Long.valueOf(order_id[i]));// Konka_order_info订单ID
				}
				if (StringUtils.isNotBlank(ensu_id[i])) {
					kkitd.setEnsu_id(Long.valueOf(ensu_id[i]));// 修改
				}

				kkitd.setR3_id(Long.valueOf(r3_id[i]));// r3单号
				kkitd.setR3_vbedl(r3_vbedl[i]);// 物流单号
				kkitd.setTrade_index(trade_index[i]);// 流水号
				kkitd.setR3_code(r3_code[i]);// r3客户编码
				kkitd.setTrans_index_detail(trans_index_s + r3_id[i]);
				kkitd.setTrans_detail_status(0);
				kkitd.setIs_del(0);
				kkitd.setIs_print(0);
				kkitd.setModel_name(model_name[i]);// 型号
				kkitd.setModel_num(Long.valueOf(model_num[i]));// 总数量
				kkitd.getMap().put("have_trans_num", have_trans_num);// 已发货数量
				kkitd.setModel_money(new BigDecimal(model_money[i]));// 发货总金额
				kkitd.setTrans_num(Long.valueOf(trans_num[i]));// 本次发货数量
				kkitd.setTrans_ensu_status(0);
				kkitd.setTrans_recl_addr(trans_recl_addr[i]);// 收货人地址
				kkitd.setTrans_recl_user(trans_recl_user[i]);// 收货人姓名
				kkitd.setTrans_recl_user_phone(trans_recl_user_phone[i]);// 收货人电话
				kkitd.setR3_code_sdf(r3_code_sdf[i]);// 送达方编码
				if (null != pks && pks.length > 0) {
					for (String s : pks) {
						if (s.equals(String.valueOf(i + 1))) {
							detailsList.add(kkitd);
						}
					}
				}
			}
			konkaOrderInfoTrans.setKonkaOrderInfoTransDetailsList(detailsList);
		}
		if (!is_update_flag) {// 如果是false那就是添加
			konkaOrderInfoTrans.setIs_del(0);
			konkaOrderInfoTrans.setTrans_index(trans_index_s);
			super.getFacade().getKonkaOrderInfoTransService().createKonkaOrderInfoTransAndDetails(konkaOrderInfoTrans);
		} else {// 如果是true那就是修改
				// 修改订单
			konkaOrderInfoTrans.setTrans_id(Long.valueOf(trans_id));
			super.getFacade().getKonkaOrderInfoTransService().modifyKonkaOrderInfoTransAndDetails(konkaOrderInfoTrans);
			// //删除修改时中不再发货的记录（detailsListdelete）
			// if(detailsListdelete.size()>0){
			// for(KonkaOrderInfoTransDetails kktd:detailsListdelete){
			// super.getFacade().getKonkaOrderInfoTransDetailsService().removeKonkaOrderInfoTransDetails(kktd);
			// }
			//
			// }
		}
		// StringBuffer pathBuffer = new StringBuffer();
		// pathBuffer.append(mapping.findForward("success").getPath());
		// pathBuffer.append("&method=listForFHD");
		// ActionForward forward = new ActionForward(pathBuffer.toString(),
		// true);
		// // end
		// return forward;
		return new ActionForward("/../manager/admin/KonkaOrderInfoTrans.do?method=listForFHD&mod_id=" + mod_id, true);
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		// if (null == super.checkUserModPopeDom(form, request, "4")) {
		// return super.checkPopedomInvalid(request, response);
		// }
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");// mod_id
		String trans_id = (String) dynaBean.get("trans_id");
		String trans_index_detail = (String) dynaBean.get("trans_index_detail");
		String[] pks = (String[]) dynaBean.get("pks");
		PeProdUser ui = (PeProdUser) super.getSessionAttribute(request, Constants.USER_INFO);
		KonkaOrderInfoTrans entity = new KonkaOrderInfoTrans();

		if (!StringUtils.isBlank(trans_id) && GenericValidator.isLong(trans_id)) {
			KonkaOrderInfoTransEnsu ensu = new KonkaOrderInfoTransEnsu();
			ensu.getMap().put("trans_index_detail", trans_index_detail);
			super.getFacade().getKonkaOrderInfoTransEnsuService().removeKonkaOrderInfoTransEnsu(ensu);

			KonkaOrderInfoTransDetails details = new KonkaOrderInfoTransDetails();
			details.setTrans_index_detail(trans_index_detail);
			super.getFacade().getKonkaOrderInfoTransDetailsService().removeKonkaOrderInfoTransDetails(details);

			entity.getMap().put("trans_index_detail", trans_index_detail);
			getFacade().getKonkaOrderInfoTransService().removeKonkaOrderInfoTrans(entity);
			saveMessage(request, "konka.close.success");
		} else if (!ArrayUtils.isEmpty(pks)) {
			KonkaOrderInfoTransEnsu ensu = new KonkaOrderInfoTransEnsu();
			ensu.getMap().put("trans_index_detail_pks", pks);
			super.getFacade().getKonkaOrderInfoTransEnsuService().removeKonkaOrderInfoTransEnsu(ensu);

			KonkaOrderInfoTransDetails details = new KonkaOrderInfoTransDetails();
			details.getMap().put("trans_index_detail_pks", pks);
			super.getFacade().getKonkaOrderInfoTransDetailsService().removeKonkaOrderInfoTransDetails(details);

			entity.getMap().put("trans_index_detail_pks", pks);
			getFacade().getKonkaOrderInfoTransService().removeKonkaOrderInfoTrans(entity);
			saveMessage(request, "konka.close.success");
		}

		return new ActionForward("/../manager/admin/KonkaOrderInfoTrans.do", true);
	}

	/**
	 * @method:点击发货的功能
	 * @author Xiao,GuoJian
	 */
	public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String trade_index = (String) dynaBean.get("trade_index");
		String[] trade_index_pks = (String[]) dynaBean.get("pks");
		String mod_id = (String) dynaBean.get("mod_id");// mod_id
		KonkaOrderInfoDetails details = new KonkaOrderInfoDetails();
		if (StringUtils.isNotBlank(trade_index)) {
			details.getMap().put("trade_index", trade_index);
		} else if (!ArrayUtils.isEmpty(trade_index_pks)) {
			details.getMap().put("trade_index_pks", trade_index_pks);
		} else {
			return mapping.findForward("input");
		}
		List<KonkaOrderInfoTransDetails> transDetailsList = new ArrayList<KonkaOrderInfoTransDetails>();
		List<KonkaOrderInfoDetails> detailsList = super.getFacade().getKonkaOrderInfoDetailsService()
				.getKonkaOrderInfoDetailsForTrans(details);
		if (null != detailsList && detailsList.size() > 0) {
			for (KonkaOrderInfoDetails detail : detailsList) {
				KonkaOrderInfoTransDetails transDetails = new KonkaOrderInfoTransDetails();
				transDetails.setModel_money(detail.getGood_sum_price());
				transDetails.setModel_name(detail.getPd_name());
				transDetails.setModel_num((Integer.valueOf(detail.getGood_count()).longValue()));
				transDetails.setOrder_id((Long) detail.getMap().get("order_id"));
				transDetails.setR3_code((String) detail.getMap().get("kunnr"));
				transDetails.setR3_code_sdf((String) detail.getMap().get("we"));
				transDetails.setR3_id((Long) detail.getMap().get("r3_id"));
				transDetails.setR3_vbedl((String) detail.getMap().get("vbedl"));
				transDetails.setTrans_recl_user((String) detail.getMap().get("user_name"));
				transDetails.setTrans_recl_user_phone((String) detail.getMap().get("user_phone"));
				transDetails.setTrans_recl_addr((String) detail.getMap().get("user_addr"));
				transDetails.setTrade_index((String) detail.getMap().get("trade_index"));
				transDetails.getMap().put("save_date", detail.getMap().get("add_date"));
				transDetails.getMap().put("name1", detail.getMap().get("name1"));
				transDetails.getMap().put("ag", detail.getMap().get("ag"));

				// 获取已经发货数量
				KonkaOrderInfoTransDetails kkitd = new KonkaOrderInfoTransDetails();
				Long have_trans_num = 0L;// 已发货数量
				Long have_ensued_num = 0L;// 已签收数量

				kkitd.setR3_vbedl((String) detail.getMap().get("vbedl"));// 物流单号
				kkitd.setModel_name(detail.getPd_name());// 型号
				kkitd.setIs_del(0);
				// 拿这个物流号中这个型号的发货历史记录,遍历计算----为了能找出已发货数量和已签收数量
				List<KonkaOrderInfoTransDetails> konkaorderinfotransdetailsforcount = super.getFacade()
						.getKonkaOrderInfoTransDetailsService().getKonkaOrderInfoTransDetailsList(kkitd);

				if (null != konkaorderinfotransdetailsforcount && konkaorderinfotransdetailsforcount.size() > 0) {
					for (KonkaOrderInfoTransDetails kkk : konkaorderinfotransdetailsforcount) {
						if (null != kkk && null != kkk.getTrans_num()) {
							have_trans_num = have_trans_num + kkk.getTrans_num();
						}
						if (null != kkk && null != kkk.getTrans_ensured_num()) {
							have_ensued_num = have_ensued_num + kkk.getTrans_ensured_num();
						}
					}
				}
				transDetails.getMap().put("have_trans_num", have_trans_num);// 已发货数量
				transDetails.getMap().put("have_ensued_num", have_ensued_num);// 已签收数量

				transDetailsList.add(transDetails);
			}
		}

		// dynaBean.set("trans_date", new Date());
		dynaBean.set("express_name", "自有物流");
		dynaBean.set("mod_id", mod_id);

		request.setAttribute("entityList", transDetailsList);
		return mapping.findForward("input");
	}

	/**
	 * @method:根据订单流水号手动添加订单
	 * @author Xiao,GuoJian
	 */
	public ActionForward ajaxGetAdd(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;
		String trade_index = (String) dynaBean.get("trade_index");

		StringBuffer sb = new StringBuffer("{");
		if (StringUtils.isBlank(trade_index)) {
			sb = sb.append("}");
			super.renderJson(response, sb.toString());
			return null;
		}

		KonkaOrderInfoDetails details = new KonkaOrderInfoDetails();
		KonkaOrderInfoTransDetails entity = new KonkaOrderInfoTransDetails();
		if (StringUtils.isNotBlank(trade_index)) {
			details.getMap().put("trade_index", trade_index);
			entity.getMap().put("trade_index_like", trade_index);
		}

		// ------判断订单数量和R3发货数量的大小，以此判断此流水号是否可以发货------start-------
		Pager pager = new Pager();
		Long recordCount = super.getFacade().getKonkaOrderInfoTransDetailsService()
				.getKonkaOrderInfoTransDetailsPaginatedCountTZD(entity);
		pager.init(recordCount, pager.getPageSize(), pager.getRequestPage());
		entity.getRow().setCount(pager.getRowCount());
		entity.getRow().setFirst(pager.getFirstRow());
		List<KonkaOrderInfoTransDetails> entityList = super.getFacade().getKonkaOrderInfoTransDetailsService()
				.getKonkaOrderInfoTransDetailsPaginatedListTZD(entity);
		if (entityList != null && entityList.size() > 0) {
			entity = entityList.get(0);
			String good_count = entity.getMap().get("good_count") == null ? "0" : entity.getMap().get("good_count")
					.toString();
			String sum_trans_num = entity.getMap().get("trans_num") == null ? "0" : entity.getMap().get("trans_num")
					.toString();
			if (Integer.parseInt(good_count) <= Integer.parseInt(sum_trans_num)) {
				sb = sb.append("}");
				super.renderJson(response, sb.toString());
				return null;
			}
		} else {
			sb = sb.append("}");
			super.renderJson(response, sb.toString());
			return null;
		}
		// ------判断订单数量和R3发货数量的大小，以此判断此流水号是否可以发货------end-------

		sb = sb.append("\"list\":[");
		List<KonkaOrderInfoDetails> detailsList = super.getFacade().getKonkaOrderInfoDetailsService()
				.getKonkaOrderInfoDetailsForTrans(details);
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		if (null != detailsList && detailsList.size() > 0) {
			for (KonkaOrderInfoDetails detail : detailsList) {
				// 获取已经发货数量
				KonkaOrderInfoTransDetails kkitd = new KonkaOrderInfoTransDetails();
				Long have_trans_num = 0L;// 已发货数量
				Long have_ensued_num = 0L;// 已签收数量

				kkitd.setR3_vbedl((String) detail.getMap().get("vbedl"));// 物流单号
				kkitd.setModel_name(detail.getPd_name());// 型号
				// 拿这个物流号中这个型号的发货历史记录,遍历计算----为了能找出已发货数量和已签收数量
				List<KonkaOrderInfoTransDetails> konkaorderinfotransdetailsforcount = super.getFacade()
						.getKonkaOrderInfoTransDetailsService().getKonkaOrderInfoTransDetailsList(kkitd);

				if (null != konkaorderinfotransdetailsforcount && konkaorderinfotransdetailsforcount.size() > 0) {
					for (KonkaOrderInfoTransDetails kkk : konkaorderinfotransdetailsforcount) {
						if (null != kkk && null != kkk.getTrans_num()) {
							have_trans_num = have_trans_num + kkk.getTrans_num();
						}
						if (null != kkk && null != kkk.getTrans_ensured_num()) {
							have_ensued_num = have_ensued_num + kkk.getTrans_ensured_num();
						}
					}
				}

				sb = sb.append("{");
				sb = sb.append("\"order_id\":\"").append(detail.getMap().get("order_id")).append("\",");
				sb = sb.append("\"model_money\":\"").append(detail.getGood_sum_price()).append("\",");
				sb = sb.append("\"model_name\":\"").append(detail.getPd_name()).append("\",");
				sb = sb.append("\"model_num\":\"").append(detail.getGood_count()).append("\",");
				sb = sb.append("\"r3_code\":\"").append(detail.getMap().get("kunnr")).append("\",");
				sb = sb.append("\"r3_code_sdf\":\"").append(detail.getMap().get("we")).append("\",");
				sb = sb.append("\"r3_id\":\"").append(detail.getMap().get("r3_id")).append("\",");
				sb = sb.append("\"r3_vbedl\":\"").append(detail.getMap().get("vbedl")).append("\",");
				sb = sb.append("\"trade_index\":\"").append(detail.getMap().get("trade_index")).append("\",");
				sb = sb.append("\"save_date\":\"").append(sf.format(detail.getMap().get("add_date"))).append("\",");
				sb = sb.append("\"name1\":\"").append(detail.getMap().get("name1")).append("\",");
				sb = sb.append("\"ag\":\"").append(detail.getMap().get("ag")).append("\",");
				sb = sb.append("\"have_trans_num\":\"").append(have_trans_num).append("\",");
				sb = sb.append("\"have_ensued_num\":\"").append(have_ensued_num).append("\",");
				sb = sb.append("\"trans_recl_user\":\"").append(detail.getMap().get("user_name")).append("\",");
				sb = sb.append("\"trans_recl_user_phone\":\"").append(detail.getMap().get("user_phone")).append("\",");
				sb = sb.append("\"trans_recl_addr\":\"").append(detail.getMap().get("user_addr")).append("\"");
				sb = sb.append("},");
			}
		} else {
			if (detailsList == null) {
				sb = sb.append("}");
				super.renderJson(response, sb.toString());
				return null;
			}
		}
		String sb_str = StringUtils.removeEnd(sb.toString(), ",") + "]}";
		logger.info("sb_str {}", sb_str);
		super.renderJson(response, sb_str);
		return null;
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);

		DynaBean dynaBean = (DynaBean) form;
		String trans_index_detail = (String) dynaBean.get("trans_index_detail");
		String trans_id = (String) dynaBean.get("trans_id");
		String mod_id = (String) dynaBean.get("mod_id");// mod_id
		if (StringUtils.isBlank(trans_id)) {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		if (StringUtils.isBlank(trans_index_detail)) {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		KonkaOrderInfoTrans kkoit = new KonkaOrderInfoTrans();
		kkoit.setTrans_id(Long.valueOf(trans_id));
		kkoit = super.getFacade().getKonkaOrderInfoTransService().getKonkaOrderInfoTrans(kkoit);

		KonkaOrderInfoTransDetails konkaorderinfotransdetails = new KonkaOrderInfoTransDetails();
		List<KonkaOrderInfoTransDetails> konkaorderinfotransdetailslist = new ArrayList<KonkaOrderInfoTransDetails>();
		konkaorderinfotransdetails.setTrans_index_detail(trans_index_detail);
		konkaorderinfotransdetailslist = super.getFacade().getKonkaOrderInfoTransDetailsService()
				.getKonkaOrderInfoTransDetailsList(konkaorderinfotransdetails);
		KonkaOrderInfoTransDetails details = null;
		for (KonkaOrderInfoTransDetails kkit : konkaorderinfotransdetailslist) {
			details = new KonkaOrderInfoTransDetails();
			details.setR3_id(kkit.getR3_id());
			details.setModel_name(kkit.getModel_name());
			Long have_trans_num = super.getFacade().getKonkaOrderInfoTransDetailsService()
					.getKonkaOrderInfoTransDetailsForSumTransNum(details);
			if (have_trans_num == null) {
				super.renderJavaScript(response, "alert('数据异常！');history.back();");
				return null;
			}
			kkit.getMap().put("have_trans_num", have_trans_num - kkit.getTrans_num());
			kkit.getMap().put("save_date", kkit.getAdd_date());
			KonkaR3Shop konkar3shop = new KonkaR3Shop();
			konkar3shop.setR3_code(kkit.getR3_code());
			konkar3shop = super.getFacade().getKonkaR3ShopService().getKonkaR3Shop(konkar3shop);
			kkit.getMap().put("name1", konkar3shop.getCustomer_name());
			kkit.getMap().put("ag", kkit.getR3_code());
		}
		super.copyProperties(form, kkoit);
		request.setAttribute("entityList", konkaorderinfotransdetailslist);
		request.setAttribute("mod_id", mod_id);
		return mapping.findForward("input");
	}

	/**
	 * @method:完结
	 * @author Xiao,GuoJian
	 */
	public ActionForward over(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String trans_index_detail = (String) dynaBean.get("trans_index_detail");
		String[] pk = (String[]) dynaBean.get("pks");
		KonkaOrderInfoTransDetails entity = new KonkaOrderInfoTransDetails();
		if (StringUtils.isNotBlank(trans_index_detail)) {
			entity.setTrans_index_detail(trans_index_detail);
		} else if (ArrayUtils.isNotEmpty(pk)) {
			String[] pks = pk[0].split(",");
			entity.getMap().put("trans_index_detail_pks", pks);
		} else {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		List<KonkaOrderInfoTransDetails> entityList = super.getFacade().getKonkaOrderInfoTransDetailsService()
				.getKonkaOrderInfoTransDetailsListForOver(entity);

		request.setAttribute("entityList", entityList);
		return new ActionForward("/admin/KonkaOrderInfoTrans/over.jsp");
	}

	/**
	 * @method:完结的保存
	 * @author Xiao,GuoJian
	 */
	public ActionForward overSave(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		resetToken(request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String[] pks = (String[]) dynaBean.get("pks");

		KonkaOrderInfoTransDetails entity = new KonkaOrderInfoTransDetails();
		if (ArrayUtils.isNotEmpty(pks)) {
			entity.getMap().put("trans_index_detail_pks", pks);
		} else {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		entity.setTrans_detail_status(1);
		super.getFacade().getKonkaOrderInfoTransDetailsService().modifyKonkaOrderInfoTransDetails(entity);
		super.renderJavaScript(response,
				"alert('结案成功！');window.opener.location.href = window.opener.location.href; window.close();");
		return null;
	}

	/**
	 * @method:生成发货单编号
	 * @author Wang,KunLin
	 */
	protected String generateTransIndex() {
		return "FH" + DateFormatUtils.format(new Date(), "yyMMddHHmmss");
	}

	/**
	 * @method:确认
	 * @author Xiao,GuoJian
	 */
	public ActionForward confirm(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");// mod_id
		String trans_index_detail = (String) dynaBean.get("trans_index_detail");
		if (StringUtils.isBlank(trans_index_detail)) {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		PeProdUser ui = (PeProdUser) super.getSessionAttribute(request, Constants.USER_INFO);
		KonkaOrderInfoTransDetails entity = new KonkaOrderInfoTransDetails();
		if (StringUtils.isNotBlank(trans_index_detail)) {
			entity.setTrans_index_detail(trans_index_detail);
		}
		entity.setIs_del(0);
		List<KonkaOrderInfoTransDetails> entityList = super.getFacade().getKonkaOrderInfoTransDetailsService()
				.getKonkaOrderInfoTransDetailsForConfirmList(entity);
		request.setAttribute("entityList", entityList);
		request.setAttribute("mod_id", mod_id);
		request.setAttribute("trans_index_detail",trans_index_detail );
		if (null!=ui&&null!=ui.getId()&&null!=ui.getPass_word()) {
			request.setAttribute("user_id", ui.getId());
			request.setAttribute("password", ui.getPass_word());
		}
		return new ActionForward("/admin/KonkaOrderInfoTrans/confirm.jsp");
	}
	
	//手机签收页面
	/*public ActionForward mobileConfirm(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");// mod_id
		String param = (String) dynaBean.get("param");// mod_id
		String []paramArr=param.split(",");
		String trans_index_detail = paramArr[0];
		String userid = paramArr[1];// userid
		String password = paramArr[2];// password
		
		if (StringUtils.isBlank(trans_index_detail)) {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		PeProdUser ui = checkUser(userid, password);
		KonkaOrderInfoTransDetails entity = new KonkaOrderInfoTransDetails();
		if (StringUtils.isNotBlank(trans_index_detail)) {
			entity.setTrans_index_detail(trans_index_detail);
		}
		entity.setIs_del(0);
		List<KonkaOrderInfoTransDetails> entityList = super.getFacade().getKonkaOrderInfoTransDetailsService()
				.getKonkaOrderInfoTransDetailsForConfirmList(entity);
		request.setAttribute("entityList", entityList);
		request.setAttribute("mod_id", mod_id);
		request.setAttribute("ensu_id",trans_index_detail );
		if (null!=ui&&null!=ui.getId()&&null!=ui.getPass_word()) {
			request.setAttribute("userid", ui.getId());
			request.setAttribute("password", ui.getPass_word());
		}
		return new ActionForward("/admin/KonkaOrderInfoTrans/mobileConfirm.jsp");
		
		
		saveToken(request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String trans_index_detail = (String) dynaBean.get("trans_index_detail");
		HttpSession session = request.getSession();
		session.setAttribute("trans_index_detail",trans_index_detail);
		
		if (StringUtils.isBlank(trans_index_detail)) {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		return new ActionForward("/admin/KonkaOrderInfoTrans/mobileConfirm.jsp");
	}
	
	//手机端确认收货
	public ActionForward mobileDate(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		setNaviStringToRequestScope(form, request);
		Map<String, Object> allmap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String trans_index_detail = (String) session.getAttribute("trans_index_detail");
		if (StringUtils.isBlank(trans_index_detail)) {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		List<KonkaOrderInfoTransDetails> entityList=new ArrayList<KonkaOrderInfoTransDetails>();
		KonkaOrderInfoTransDetails entity = new KonkaOrderInfoTransDetails();
		if (StringUtils.isNotBlank(trans_index_detail)) {
			entity.setTrans_index_detail(trans_index_detail);
			entity.setIs_del(0);
		    entityList = super.getFacade().getKonkaOrderInfoTransDetailsService()
					.getKonkaOrderInfoTransDetailsForConfirmList(entity);
			for (KonkaOrderInfoTransDetails konkaOrderInfoTransDetails : entityList) {
				konkaOrderInfoTransDetails.getMap().put("add_date", df.format(konkaOrderInfoTransDetails.getAdd_date()));
			}
		}
		
	    allmap.put("trans_index_detail", trans_index_detail);
		allmap.put("entityList", entityList);
		JSONArray jsonArray = JSONArray.fromObject(allmap);
		int start = jsonArray.toString().indexOf("[");
		int end = jsonArray.toString().lastIndexOf("}");
		String jsonStr = jsonArray.toString().substring(start + 1, end + 1);
		response.setContentType("application/json;charset=UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = response.getWriter();
		out.print(jsonStr);
		out.flush();
		out.close();
		return null;
	}*/
	/**
	 * @method:动态手动添加确认
	 * @author Xiao,GuoJian
	 */
	public ActionForward ajaxSetTransDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		DynaBean dynaBean = (DynaBean) form;
		String trans_index_detail = (String) dynaBean.get("trans_index_detail");
		StringBuffer sb = new StringBuffer("{");
		if (StringUtils.isBlank(trans_index_detail)) {
			sb = sb.append("}");
			super.renderJson(response, sb.toString());
			return null;
		}

		sb = sb.append("\"list\":[");
		KonkaOrderInfoTransDetails transDetails = new KonkaOrderInfoTransDetails();
		transDetails.setTrans_index_detail(trans_index_detail);
		transDetails.setIs_del(0);

		List<KonkaOrderInfoTransDetails> transDetailsList = super.getFacade().getKonkaOrderInfoTransDetailsService()
				.getKonkaOrderInfoTransDetailsForConfirmList(transDetails);
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		if (null != transDetailsList && transDetailsList.size() > 0) {
			for (KonkaOrderInfoTransDetails temp : transDetailsList) {
				if (null != temp) {
					sb = sb.append("{");
					sb = sb.append("\"ensu_id\":\"").append(temp.getEnsu_id()).append("\",");
					sb = sb.append("\"r3_vbedl\":\"").append(temp.getR3_vbedl()).append("\",");
					sb = sb.append("\"trade_index\":\"").append(temp.getTrade_index()).append("\",");
					sb = sb.append("\"trans_index_detail\":\"").append(temp.getTrans_index_detail()).append("\",");
					sb = sb.append("\"add_date\":\"").append(sf.format(temp.getAdd_date())).append("\",");
					sb = sb.append("\"customer_name\":\"").append(temp.getMap().get("customer_name")).append("\",");
					sb = sb.append("\"model_name\":\"").append(temp.getModel_name()).append("\",");
					sb = sb.append("\"model_num\":\"").append(temp.getModel_num()).append("\",");
					sb = sb.append("\"trans_num\":\"").append(temp.getTrans_num()).append("\",");
					sb = sb.append("\"trans_ensured_num\":\"")
							.append(temp.getTrans_ensured_num() == null ? 0 : temp.getTrans_ensured_num())
							.append("\",");
					sb = sb.append("\"result_num\":\"")
							.append(temp.getTrans_num()
									- (temp.getTrans_ensured_num() == null ? 0 : temp.getTrans_ensured_num()))
							.append("\",");
					sb = sb.append("\"model_num\":\"").append(temp.getModel_num()).append("\"");
					sb = sb.append("},");
				}
			}
		}
		String sb_str = StringUtils.removeEnd(sb.toString(), ",") + "]}";
		logger.info("sb_str {}", sb_str);
		super.renderJson(response, sb_str);
		return null;
	}

	/**
	 * @method:确认的保存
	 * @author Xiao,GuoJian
	 */
	public ActionForward confirmSave(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		resetToken(request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String mod_id = (String) dynaBean.get("mod_id");// mod_id
		String trans_id = (String) dynaBean.get("trans_id");
		String trans_ensu_user = (String) dynaBean.get("trans_ensu_user");
		String trans_ensu_user_phone = (String) dynaBean.get("trans_ensu_user_phone");
		String trans_ensu_date = (String) dynaBean.get("trans_ensu_date");
		String[] ensu_ids = request.getParameterValues("ensu_id");// Details中ID
		String[] trans_unensu_nums = request.getParameterValues("trans_unensu_num");// 未签收数量
		String[] trans_ensu_nums = request.getParameterValues("trans_ensu_num");// 本次签收数量
		String[] trans_ensu_descs = request.getParameterValues("trans_ensu_desc");// 签收说明

		PeProdUser ui = (PeProdUser) super.getSessionAttribute(request, Constants.USER_INFO);
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		List<KonkaOrderInfoTransDetails> detailsList = new ArrayList<KonkaOrderInfoTransDetails>();
		if (null != ensu_ids) {
			for (int i = 0; i < ensu_ids.length; i++) {
				KonkaOrderInfoTransDetails details = new KonkaOrderInfoTransDetails();
				if (StringUtils.isNotBlank(ensu_ids[i])) {
					details.setEnsu_id(Long.parseLong(ensu_ids[i]));
				}
				if (StringUtils.isNotBlank(trans_ensu_nums[i]) && StringUtils.isNotEmpty(trans_unensu_nums[i])) {
					// 判断已签收数量和未签收数量的大小 来判定签收状态
					details.setTrans_ensu_num(Long.parseLong(trans_ensu_nums[i]));
					if (Long.parseLong(trans_unensu_nums[i]) == Long.parseLong(trans_ensu_nums[i])) {// 未签收和本次签收相等的情况下
																										// 确认收货
						details.setTrans_ensu_status(2);
					} else if (Long.parseLong(trans_unensu_nums[i]) > Long.parseLong(trans_ensu_nums[i])) {// 未签收大于本次签收的情况下
																											// 部分签收
						details.setTrans_ensu_status(1);
					} else if (Long.parseLong(trans_ensu_nums[i]) == 0) {// 本次签收0的情况下
																			// 全部拒收
						details.setTrans_ensu_status(3);
					}
				}
				details.setTrans_ensu_desc(trans_ensu_descs[i]);
				details.setTrans_ensu_user_phone(trans_ensu_user_phone);
				details.setTrans_ensu_user(trans_ensu_user);
				details.setTrans_ensu_type(1);
				details.setTrans_ensu_date(format.parse(trans_ensu_date));
				detailsList.add(details);
			}
		}
		KonkaOrderInfoTrans konkaOrderInfoTrans = new KonkaOrderInfoTrans();
		// if(StringUtils.isNotBlank(trans_id)){
		// konkaOrderInfoTrans.setTrans_id(Long.parseLong(trans_id));
		// konkaOrderInfoTrans.set
		super.getFacade().getKonkaOrderInfoTransDetailsService()
				.modifyKonkaOrderInfoTransDetailsForEnsu(detailsList, konkaOrderInfoTrans);
		// }
		return new ActionForward("/../manager/admin/KonkaOrderInfoTrans.do?mod_id=" + mod_id, true);
	}

	/**
	 * @method:打印发货单
	 * @author Xiao,GuoJian
	 */
	public ActionForward print(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		saveToken(request);
		DynaBean dynaBean = (DynaBean) form;
		setNaviStringToRequestScope(form, request);
		String trans_index_detail = (String) dynaBean.get("trans_index_detail");
		String[] pk = (String[]) dynaBean.get("pks");
		PeProdUser ui = (PeProdUser) super.getSessionAttribute(request, Constants.USER_INFO);
		
		List<KonkaOrderInfoTrans> entityList = new ArrayList<KonkaOrderInfoTrans>();
		if (StringUtils.isNotBlank(trans_index_detail)) {// 单个打印
			KonkaOrderInfoTransDetails konkaorderinfotransdetails = new KonkaOrderInfoTransDetails();
			List<KonkaOrderInfoTransDetails> konkaOrderInfoTransDetailsList = new ArrayList<KonkaOrderInfoTransDetails>();
			konkaorderinfotransdetails.setTrans_index_detail(trans_index_detail);
			konkaorderinfotransdetails.setIs_del(0);
			konkaOrderInfoTransDetailsList = super.getFacade().getKonkaOrderInfoTransDetailsService()
					.getKonkaOrderInfoTransDetailsList(konkaorderinfotransdetails);
			if (null != konkaOrderInfoTransDetailsList && konkaOrderInfoTransDetailsList.size() > 0) {
				KonkaOrderInfoTransDetails backdetails = konkaOrderInfoTransDetailsList.get(0);
				KonkaOrderInfoTrans kkoit = new KonkaOrderInfoTrans();
				kkoit.setTrans_id(backdetails.getTrans_id());
				kkoit = super.getFacade().getKonkaOrderInfoTransService().getKonkaOrderInfoTrans(kkoit);
				kkoit.getMap().put("trans_recl_addr", backdetails.getTrans_recl_addr());
				kkoit.getMap().put("trans_other_ensu_user", backdetails.getTrans_other_ensu_user());
				kkoit.getMap().put("trans_recl_user_phone", backdetails.getTrans_recl_user_phone());
				kkoit.getMap().put("r3_code", backdetails.getR3_code());
				kkoit.getMap().put("trans_index_detail", backdetails.getTrans_index_detail());
				kkoit.setKonkaOrderInfoTransDetailsList(konkaOrderInfoTransDetailsList);
				entityList.add(kkoit);
			}
		} else if (!ArrayUtils.isEmpty(pk)) {
			String[] pks = pk[0].split(",");
			for (String index_detail : pks) {
				KonkaOrderInfoTransDetails konkaorderinfotransdetails = new KonkaOrderInfoTransDetails();
				List<KonkaOrderInfoTransDetails> konkaOrderInfoTransDetailsList = new ArrayList<KonkaOrderInfoTransDetails>();
				konkaorderinfotransdetails.setTrans_index_detail(index_detail);
				konkaorderinfotransdetails.setIs_del(0);
				konkaOrderInfoTransDetailsList = super.getFacade().getKonkaOrderInfoTransDetailsService()
						.getKonkaOrderInfoTransDetailsList(konkaorderinfotransdetails);
				if (null != konkaOrderInfoTransDetailsList && konkaOrderInfoTransDetailsList.size() > 0) {
					KonkaOrderInfoTransDetails backdetails = konkaOrderInfoTransDetailsList.get(0);
					KonkaOrderInfoTrans kkoit = new KonkaOrderInfoTrans();
					kkoit.setTrans_id(backdetails.getTrans_id());
					kkoit = super.getFacade().getKonkaOrderInfoTransService().getKonkaOrderInfoTrans(kkoit);
					kkoit.getMap().put("trans_recl_addr", backdetails.getTrans_recl_addr());
					kkoit.getMap().put("trans_other_ensu_user", backdetails.getTrans_other_ensu_user());
					kkoit.getMap().put("trans_recl_user_phone", backdetails.getTrans_other_ensu_user());
					kkoit.getMap().put("r3_code", backdetails.getR3_code());
					kkoit.getMap().put("trans_index_detail", backdetails.getTrans_index_detail());
					kkoit.setKonkaOrderInfoTransDetailsList(konkaOrderInfoTransDetailsList);
					entityList.add(kkoit);
				}
			}
		} else {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}
		request.setAttribute("entityList", entityList);
		
		request.setAttribute("trans_index_detail",trans_index_detail );
		if (null!=ui&&null!=ui.getId()&&null!=ui.getPass_word()) {
			request.setAttribute("user_id", ui.getId());
			request.setAttribute("password", ui.getPass_word());
		}
		
		return new ActionForward("/admin/KonkaOrderInfoTrans/print.jsp");
	}

	/**
	 * @method:打印发货单更新
	 * @author Xiao,GuoJian
	 */
	public ActionForward printSave(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		resetToken(request);
		setNaviStringToRequestScope(form, request);
		DynaBean dynaBean = (DynaBean) form;
		String[] trans_index_detail_pks = (String[]) dynaBean.get("pks");
		PeProdUser ui = (PeProdUser) super.getSessionAttribute(request, Constants.USER_INFO);
		if (ArrayUtils.isEmpty(trans_index_detail_pks)) {
			super.renderJavaScript(response, "alert('数据丢失！');history.back();");
			return null;
		}

		KonkaOrderInfoTransDetails konkaOrderInfoTransDetails = new KonkaOrderInfoTransDetails();
		konkaOrderInfoTransDetails.getMap().put("trans_index_detail_pks", trans_index_detail_pks);
		konkaOrderInfoTransDetails.setIs_print(1);
		konkaOrderInfoTransDetails.setPrint_user(ui.getReal_name());
		super.getFacade().getKonkaOrderInfoTransDetailsService()
				.modifyKonkaOrderInfoTransDetails(konkaOrderInfoTransDetails);
		super.renderJavaScript(response,
				"alert('打印成功！');window.opener.location.href = window.opener.location.href;window.close();");
		return null;
	}
	//手机端查用户
	protected PeProdUser checkUser(String user_id, String userpass) throws Exception {
		PeProdUser ui = new PeProdUser();
		if (!GenericValidator.isLong(user_id))
			return null;
		if (StringUtils.isEmpty(userpass))
			return null;
		PeProdUser entity = new PeProdUser();
		entity.setId(Long.valueOf(user_id));
		entity.setIs_del(0);
		DESPlus des = new DESPlus();
		entity.setPass_word(des.encrypt(userpass));
		ui = getFacade().getPeProdUserService().getPeProdUser(entity);
		return ui;
	}
}