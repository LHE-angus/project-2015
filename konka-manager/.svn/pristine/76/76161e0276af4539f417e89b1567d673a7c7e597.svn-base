<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

	<!-- Code by AutoGenerated Builder -->
	<!-- AutoGenerated Builder Version 2.1 -->
	<!-- @author Hui,Gang -->
	<!-- @datetime 2011-11-10 15:33:16 -->
<sqlMap namespace="KONKA_R3_BACKMONEY">
	
	<typeAlias alias="konkaR3Backmoney" type="com.ebiz.mmt.domain.KonkaR3Backmoney" />

	<resultMap id="konkaR3BackmoneyResultForList" class="konkaR3Backmoney">
		<result column="ID" property="id" jdbcType="DECIMAL" />
		<result column="ADD_DATE" property="add_date" jdbcType="DATE" />
		<result column="ADD_UID" property="add_uid" jdbcType="DECIMAL" />
		<result column="YEAR" property="year" jdbcType="DECIMAL" />
		<result column="BRANCH_AREA_NAME" property="branch_area_name" jdbcType="VARCHAR" />
		<result column="BRANCH_AREA_CODE" property="branch_area_code" jdbcType="DECIMAL" />
		<result column="HANDLE_NAME" property="handle_name" jdbcType="VARCHAR" />
		<result column="R3_CODE" property="r3_code" jdbcType="VARCHAR" />
		<result column="CUSTOMER_TYPE" property="customer_type" jdbcType="VARCHAR" />
		<result column="AREA_NAME" property="area_name" jdbcType="VARCHAR" />
		<result column="AREA_CODE" property="area_code" jdbcType="DECIMAL" />
		<result column="CUSTOMER_NAME" property="customer_name" jdbcType="VARCHAR" />
		<result column="COLUMN_1" property="column_1" jdbcType="DECIMAL" />
		<result column="COLUMN_2" property="column_2" jdbcType="DECIMAL" />
		<result column="COLUMN_3" property="column_3" jdbcType="DECIMAL" />
		<result column="COLUMN_4" property="column_4" jdbcType="DECIMAL" />
		<result column="COLUMN_5" property="column_5" jdbcType="DECIMAL" />
		<result column="COLUMN_6" property="column_6" jdbcType="DECIMAL" />
		<result column="COLUMN_7" property="column_7" jdbcType="DECIMAL" />
		<result column="COLUMN_8" property="column_8" jdbcType="DECIMAL" />
		<result column="COLUMN_9" property="column_9" jdbcType="DECIMAL" />
		<result column="COLUMN_10" property="column_10" jdbcType="DECIMAL" />
		<result column="COLUMN_11" property="column_11" jdbcType="DECIMAL" />
		<result column="COLUMN_12" property="column_12" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="konkaR3BackmoneyResult" class="konkaR3Backmoney" extends="konkaR3BackmoneyResultForList">
	</resultMap>
	
	<resultMap id="konkaR3BackmoneyResultNew" class="konkaR3Backmoney" extends="konkaR3BackmoneyResultForList">
		<result property="map.c_name" column="C_NAME" jdbcType="VARCHAR"/>
		<result property="map.c_comm" column="C_COMM" jdbcType="VARCHAR"/>
	</resultMap>

	<sql id="sf-konkaR3Backmoney">
		<isNotEmpty prepend=" and " property="id">ID = #id:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="add_date">ADD_DATE = #add_date:DATE#</isNotEmpty>
		<isNotEmpty prepend=" and " property="add_uid">ADD_UID = #add_uid:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="year">YEAR = #year:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="branch_area_name">BRANCH_AREA_NAME = #branch_area_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="branch_area_code">BRANCH_AREA_CODE = #branch_area_code:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="handle_name">HANDLE_NAME = #handle_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="r3_code">R3_CODE = #r3_code:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="customer_type">CUSTOMER_TYPE = #customer_type:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="area_name">AREA_NAME = #area_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="area_code">AREA_CODE = #area_code:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="customer_name">CUSTOMER_NAME = #customer_name:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_1">COLUMN_1 = #column_1:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_2">COLUMN_2 = #column_2:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_3">COLUMN_3 = #column_3:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_4">COLUMN_4 = #column_4:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_5">COLUMN_5 = #column_5:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_6">COLUMN_6 = #column_6:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_7">COLUMN_7 = #column_7:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_8">COLUMN_8 = #column_8:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_9">COLUMN_9 = #column_9:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_10">COLUMN_10 = #column_10:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_11">COLUMN_11 = #column_11:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="column_12">COLUMN_12 = #column_12:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.shop_name_String">$map.column_name$  in ($map.shop_name_String$)</isNotEmpty>
		
		<isNotEmpty prepend=" and " property="map.code_like">R3_CODE = #map.code_like:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.max_date">id in (select max(id) from KONKA_R3_BACKMONEY)</isNotEmpty>
	</sql>
	
	<resultMap id="konkaR3BackmoneyForYearMonth" class="konkaR3Backmoney" extends="konkaR3BackmoneyResultForList">
		<result column="COLUMN_M" property="map.column_m" jdbcType="DECIMAL" />
		<result column="COLUMN_Y" property="map.column_y" jdbcType="DECIMAL" />
	</resultMap>
	
	<resultMap id="konkaR3BackmoneyForHkJd" class="konkaR3Backmoney">
		<result column="DEPT_NAME" property="map.dept_name" jdbcType="VARCHAR" />
		<result column="DEPT_ID" property="map.dept_id" jdbcType="DECIMAL" />
		<result column="DEPT_SN" property="map.dept_sn" jdbcType="VARCHAR" />
		<result column="LEADER_USER_NAME" property="map.leader_user_name" jdbcType="VARCHAR" />
		<result column="JB_TYPE" property="map.jb_type" jdbcType="DECIMAL" />
		<result column="JB_NAME" property="map.jb_name" jdbcType="VARCHAR" />
		<result column="RATIO" property="map.ratio" jdbcType="DECIMAL" />
		<result column="HK_RW" property="map.hk_rw" jdbcType="DECIMAL" />
		<result column="HK_MONEY" property="map.hk_money" jdbcType="DECIMAL" />
		<result column="L_HK_MONEY" property="map.l_hk_money" jdbcType="DECIMAL" />
		<result column="HK_WCL" property="map.hk_wcl" jdbcType="DECIMAL" />
		<result column="HK_ZZL" property="map.hk_zzl" jdbcType="DECIMAL" />
		<result column="PD_DB_MONEY" property="map.pd_db_money" jdbcType="DECIMAL" />
		<result column="PD_TOTAL_MONEY" property="map.pd_total_money" jdbcType="DECIMAL" />
		<result column="DB_ZB" property="map.db_zb" jdbcType="DECIMAL" />
	</resultMap>
	
	<resultMap id="konkaR3BackmoneyForMonth" class="konkaR3Backmoney">
		<result column="COLUMN_M" property="map.column_m" jdbcType="DECIMAL" />
	</resultMap>
	
	<select id="selectKonkaR3Backmoney" resultMap="konkaR3BackmoneyResult" parameterClass="konkaR3Backmoney" >
		select * from KONKA_R3_BACKMONEY where 1 = 1
		<include refid="sf-konkaR3Backmoney" />
	</select>

	<select id="selectKonkaR3BackmoneyList" resultMap="konkaR3BackmoneyForYearMonth" parameterClass="konkaR3Backmoney" >
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select a.*
		  <isNotEmpty prepend=" ," property="map.column_m">
             decode(column_$map.column_m$,null,0,column_$map.column_m$) as COLUMN_M,'0' as COLUMN_Y
          </isNotEmpty>
          <isNotEmpty prepend=" ," property="map.column_y">
             0 as COLUMN_M,$map.column_y$ as COLUMN_Y
          </isNotEmpty>
		 from KONKA_R3_BACKMONEY a where 1 = 1
		<include refid="sf-konkaR3Backmoney" />
		order by YEAR desc,customer_name
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>
	
	<!--Hu,Hao 2013-09-13 -->
	<select id="selectKonkaR3BackmoneyForMonth" resultMap="konkaR3BackmoneyForMonth	" parameterClass="konkaR3Backmoney" >
		SELECT decode(sum($map.column_value$),null,0,sum($map.column_value$)) as column_m
  			FROM KONKA_R3_BACKMONEY aa
       			LEFT JOIN konka_r3_shop bb
          			ON aa.R3_CODE = bb.R3_CODE
       			LEFT JOIN BRANCH_ASSIGN cc
          			ON bb.ID = cc.KONKA_R3_ID     
         where 1 = 1
        <isNotEmpty prepend=" and " property="year">aa.YEAR = #year:DECIMAL#</isNotEmpty> 			
		<isNotEmpty prepend=" and " property="map.dept_id"> bb.dept_id = #map.code_like# </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.jb_id"> cc.jyb_id = #map.jb_id# </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.ywy_user_id"> cc.user_id = #map.ywy_user_id# </isNotEmpty>
		<isNotEmpty prepend=" and " property="map.is_not_true"> 1 = 0 </isNotEmpty>
	</select>
	
	<!--Hu,Hao 2013-07-05 -->
	<select id="selectKonkaR3BackmoneyListForTb" resultMap="konkaR3BackmoneyResultForList" parameterClass="konkaR3Backmoney" >
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select a.* from KONKA_R3_BACKMONEY a where 1 = 1
		<include refid="sf-konkaR3Backmoney" />
		order by YEAR desc,customer_name
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>

	<select id="selectKonkaR3BackmoneyCount" resultClass="long" parameterClass="konkaR3Backmoney" >
		select count(*) from KONKA_R3_BACKMONEY where 1 = 1
		<include refid="sf-konkaR3Backmoney" />
	</select>

	<select id="selectKonkaR3BackmoneyPaginatedList" resultMap="konkaR3BackmoneyResultForList" parameterClass="konkaR3Backmoney" >
		<![CDATA[ select * from ( select t_.*, rownum rn_ from ( ]]>
		select * from KONKA_R3_BACKMONEY where 1 = 1
		<include refid="sf-konkaR3Backmoney" />
		order by YEAR desc,customer_name
		<![CDATA[ ) t_ where rownum <= (#row.first# + #row.count#)) where rn_ >= (#row.first# + 1) ]]>
	</select>

	<!--Hu,Hao 2013-09-17 -->
	<select id="selectKonkaR3BackmoneyListForHkJd" resultMap="konkaR3BackmoneyForHkJd" parameterClass="konkaR3Backmoney" >
		<isNotEmpty property="row.count">
			<![CDATA[ select * from ( ]]>
		</isNotEmpty>
		select mm.*,nn.JB_TYPE,ff.REAL_NAME as LEADER_USER_NAME from ( select tt.*,
		 decode (tt.HK_MONEY,null,0,0,0,decode(tt.HK_RW,null,0,0,0,tt.HK_MONEY/tt.HK_RW)) * 100 as hk_wcl,
		 decode (tt.L_HK_MONEY,null,0,0,0,decode(tt.HK_RW,null,0,0,0,(tt.HK_MONEY-tt.L_HK_MONEY)/tt.L_HK_MONEY)) * 100 as hk_zzl,
		 decode (tt.PD_TOTAL_MONEY,null,0,0,0,decode(tt.PD_DB_MONEY,null,0,0,0,(tt.PD_DB_MONEY/tt.PD_TOTAL_MONEY))) * 100 as db_zb
		from (
		SELECT t1.*,t2.l_hk_money, t3.CUR_MONEY_OF_MONTH_TASK as hk_rw, t3.RATIO * 100 as RATIO,
					   kk.PD_DB_MONEY as PD_DB_MONEY,
                       kk.PD_TOTAL_MONEY as PD_TOTAL_MONEY
		  FROM (SELECT aa.L4_DEPT_ID AS dept_id,
		               aa.dept_name,
		               aa.L4_DEPT_NAME AS jb_name,
		               bb.DEPT_SN,
		               sum($map.column_value$) AS hk_money
		          FROM    v_a_details_of_backmoney aa
		               LEFT JOIN
		                  konka_dept bb
		               ON aa.L4_DEPT_ID = bb.DEPT_ID
		         WHERE     aa.L4_DEPT_ID IS NOT NULL
		               AND aa.YEAR = #map.this_year#
		     <isNotEmpty prepend=" and " property="map.jb_type_4">bb.JB_TYPE in (1,2,3)</isNotEmpty>
			 <isNotEmpty prepend=" and " property="map.jb_type">bb.JB_TYPE = #map.jb_type#</isNotEmpty>
		        GROUP BY aa.L4_DEPT_ID,
		                 aa.dept_name,
		                 aa.L4_DEPT_NAME,
		                 bb.DEPT_SN) t1
		       LEFT JOIN (SELECT a.L4_DEPT_ID AS dept_id,
		                         a.dept_name,
		                         a.L4_DEPT_NAME AS jb_name,
		                         b.DEPT_SN,
		                         sum($map.column_value$) AS l_hk_money
		                    FROM    v_a_details_of_backmoney a
		                         LEFT JOIN
		                            konka_dept b
		                         ON a.L4_DEPT_ID = b.DEPT_ID
		                   WHERE     a.L4_DEPT_ID IS NOT NULL
		                         AND a.YEAR =  #map.last_year#
		       <isNotEmpty prepend=" and " property="map.jb_type_4">b.JB_TYPE in (1,2,3)</isNotEmpty>
			   <isNotEmpty prepend=" and " property="map.jb_type">b.JB_TYPE = #map.jb_type#</isNotEmpty>
		                  GROUP BY a.L4_DEPT_ID,
		                           a.dept_name,
		                           a.L4_DEPT_NAME,
		                           b.DEPT_SN) t2 ON t1.DEPT_ID = t2.DEPT_ID
		       LEFT JOIN (SELECT cc.DEPT_SN,
		                         sum (cc.CUR_MONEY_OF_MONTH_TASK)
		                            AS CUR_MONEY_OF_MONTH_TASK,
		                         sum (cc.RATIO) AS RATIO
		                    FROM V_A_DATA_OF_DEPT_TASK_JYB cc
		                   WHERE cc.M = #map.this_month# AND cc.Y = #map.this_year#
		                  GROUP BY cc.dept_sn) t3
		          ON t1.DEPT_SN = t3.DEPT_SN
		       left join (select kk1.*,kk2.pd_total_money from ( select k1.L4_DEPT_ID as dept_id,sum(pd_total_money) as pd_db_money from v_a_details_of_purchase k1
                                left join konka_pe_pd_model k2
                                on k1.pd_name = k2.MD_NAME
                                where k1.pd_name is not null
                                <![CDATA[ and k1.CREATE_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
                                <![CDATA[ and k1.CREATE_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
                                and k2.MD_SIZE > 54
                                and k1.L4_DEPT_ID is not null
                                group by k1.L4_DEPT_ID
                                ) kk1 left join (
                                 select k3.L4_DEPT_ID as dept_id,sum(pd_total_money) as pd_total_money from v_a_details_of_purchase k3
                                 where k3.pd_name is not null
                                 and k3.L4_DEPT_ID is not null
                                <![CDATA[ and k3.CREATE_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
                                <![CDATA[ and k3.CREATE_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
                                 group by k3.L4_DEPT_ID
                                )  kk2 on kk1.dept_id = kk2.dept_id) kk
                           on kk.DEPT_ID =  t1.DEPT_ID       
		UNION
		SELECT t4.*,t5.L_HK_MONEY, t6.CUR_MONEY_OF_MONTH_TASK as hk_rw, t6.RATIO * 100 as ratio,
					   hh.PD_DB_MONEY as PD_DB_MONEY,
                       hh.PD_TOTAL_MONEY as PD_TOTAL_MONEY
		  FROM (SELECT aa.L5_DEPT_ID AS dept_id,
		               aa.dept_name,
		               aa.L5_DEPT_NAME AS jb_name,
		               bb.DEPT_SN,
		               sum($map.column_value$) AS hk_money
		          FROM    v_a_details_of_backmoney aa
		               LEFT JOIN
		                  konka_dept bb
		               ON aa.L5_DEPT_ID = bb.DEPT_ID
		         WHERE     aa.L5_DEPT_ID IS NOT NULL
		               AND aa.YEAR = #map.this_year#
		       <isNotEmpty prepend=" and " property="map.jb_type_4">bb.JB_TYPE in (1,2,3)</isNotEmpty>
			   <isNotEmpty prepend=" and " property="map.jb_type">bb.JB_TYPE = #map.jb_type#</isNotEmpty>
		        GROUP BY aa.L5_DEPT_ID,
		                 aa.dept_name,
		                 aa.L5_DEPT_NAME,
		                 bb.DEPT_SN) t4
		       LEFT JOIN (SELECT a.L5_DEPT_ID AS dept_id,
		                         a.dept_name,
		                         a.L5_DEPT_NAME AS jb_name,
		                         b.DEPT_SN,
		                         sum($map.column_value$) AS l_hk_money
		                    FROM    v_a_details_of_backmoney a
		                         LEFT JOIN
		                            konka_dept b
		                         ON a.L5_DEPT_ID = b.DEPT_ID
		                   WHERE     a.L5_DEPT_ID IS NOT NULL
		                         AND a.YEAR = #map.last_year#
		         <isNotEmpty prepend=" and " property="map.jb_type_4">b.JB_TYPE in (1,2,3)</isNotEmpty>
			     <isNotEmpty prepend=" and " property="map.jb_type">b.JB_TYPE = #map.jb_type#</isNotEmpty>
		                  GROUP BY a.L5_DEPT_ID,
		                           a.dept_name,
		                           a.L5_DEPT_NAME,
		                           b.DEPT_SN) t5
		          ON t4.DEPT_ID = t5.DEPT_ID
		       LEFT JOIN (SELECT cc.DEPT_SN,
		                         sum (cc.CUR_MONEY_OF_MONTH_TASK)
		                            AS CUR_MONEY_OF_MONTH_TASK,
		                         sum (cc.RATIO) AS RATIO
		                    FROM V_A_DATA_OF_DEPT_TASK_JYB cc
		                   WHERE cc.M = #map.this_month# AND cc.Y = #map.this_year#
		                  GROUP BY cc.dept_sn) t6
		          ON t4.DEPT_SN = t6.DEPT_SN
		          left join (select hh1.*,hh2.pd_total_money from ( select h1.L5_DEPT_ID as dept_id,sum(pd_total_money) as pd_db_money from v_a_details_of_purchase h1
                                left join konka_pe_pd_model h2
                                on h1.pd_name = h2.MD_NAME
                                where h1.pd_name is not null
                                <![CDATA[ and h1.CREATE_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
                                <![CDATA[ and h1.CREATE_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
                                and h2.MD_SIZE > 54
                                and h1.L5_DEPT_ID is not null
                                group by h1.L5_DEPT_ID
                                ) hh1 left join (
                                 select h3.L5_DEPT_ID as dept_id,sum(pd_total_money) as pd_total_money from v_a_details_of_purchase h3
                                 where h3.pd_name is not null
                                 and h3.L5_DEPT_ID is not null
                                <![CDATA[ and h3.CREATE_DATE >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
                                <![CDATA[ and h3.CREATE_DATE <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
                                 group by h3.L5_DEPT_ID
                                )  hh2 on hh1.dept_id = hh2.dept_id) hh on hh.DEPT_ID =  t4.DEPT_ID)tt ) mm left join konka_dept nn on mm.DEPT_ID = nn.DEPT_ID 
		          left join konka_pe_prod_user ff on nn.LEADER_USER_ID = ff.ID    
		<!-- order by ID asc -->
		<isNotEmpty property="row.count">
			<![CDATA[ ) where rownum <= #row.count# ]]>
		</isNotEmpty>
	</select>

	<!-- Hu,hao 2013-10-11 根据用户的数据权限查询R3回款-->
	<select id="selectKonkaR3BackmoneyForRoleDataCount" resultClass="long" parameterClass="konkaR3Backmoney" >
		select count(1) from KONKA_R3_BACKMONEY a 
		<isNotEmpty property="map.dept_id_start">
			left join MV_ORG_OF_CUSTOMER_ALL b  on a.R3_CODE = b.R3_CODE
		</isNotEmpty>
		<isNotEmpty property="map.filter_by_ywy_id_eq">
			left join MV_ORG_OF_CUSTOMER_ALL b  on a.R3_CODE = b.R3_CODE
		</isNotEmpty>
		<isNotEmpty property="map.customer_all">
			left join MV_ORG_OF_CUSTOMER_ALL c
    		  on a.R3_CODE = c.R3_CODE
		</isNotEmpty>
		where 1 = 1
		<isNotEmpty prepend=" and " property="map.dept_id_start">
				(b.cur_dept_id is not null and b.cur_dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">b.user_id = #map.filter_by_ywy_id_eq#</isNotEmpty>  
		<isNotEmpty prepend=" and " property="map.dept_id">c.DEPT_ID = #map.dept_id#</isNotEmpty> 
		<isNotEmpty prepend=" and " property="year">a.YEAR = #year:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="r3_code">a.R3_CODE = #r3_code:VARCHAR#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.customer_type1">c.PAR_CUSTOMER_TYPE = #map.customer_type1#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.customer_type2">c.CUSTOMER_TYPE = #map.customer_type2#</isNotEmpty>		
		<isNotEmpty prepend=" and " property="map.kh_name_like">a.CUSTOMER_NAME like '%'||#map.kh_name_like#||'%'</isNotEmpty>		
	</select>
	
	<!-- Hu,hao 2013-10-11 根据用户的数据权限查询R3回款 -->
	<select id="selectKonkaR3BackmoneyForRoleDataPaginatedList" resultMap="konkaR3BackmoneyResultNew" parameterClass="konkaR3Backmoney" >
		<![CDATA[ select * from ( select ID,ADD_DATE,ADD_UID,YEAR,BRANCH_AREA_NAME,BRANCH_AREA_CODE,HANDLE_NAME,R3_CODE,CUSTOMER_TYPE,C_COMM,
        	C_NAME,AREA_NAME,AREA_CODE,CUSTOMER_NAME,COLUMN_1,COLUMN_2,COLUMN_3,COLUMN_4,COLUMN_5,COLUMN_6,COLUMN_7,COLUMN_8,COLUMN_9,COLUMN_10, 
        	COLUMN_11,COLUMN_12, rownum rn_ from ( ]]>
		select a.* from KONKA_R3_BACKMONEY a 
		<isNotEmpty property="map.dept_id_start">
			left join MV_ORG_OF_CUSTOMER_ALL b
    		  on a.R3_CODE = b.R3_CODE
		</isNotEmpty>
		<isNotEmpty property="map.filter_by_ywy_id_eq">
			left join MV_ORG_OF_CUSTOMER_ALL b
    		  on a.R3_CODE = b.R3_CODE
		</isNotEmpty>
		<isNotEmpty property="map.customer_all">
			left join MV_ORG_OF_CUSTOMER_ALL c
    		  on a.R3_CODE = c.R3_CODE
		</isNotEmpty>
		where 1 = 1
		<isNotEmpty prepend=" and " property="map.dept_id_start">
				(b.cur_dept_id is not null and b.cur_dept_id in (
							select dept_id from konka_dept start with dept_id in (
							SELECT DISTINCT (dept_id)
			  							FROM KONKA_ROLE_DATA_LEVEL
			 							WHERE role_id IN (SELECT role_id
			                     			FROM KONKA_PE_ROLE_USER
			                    			WHERE user_id = #map.session_user_id#)
							) or dept_id = #map.dept_id_start# 
							connect by prior dept_id = par_id 
						)
				)
		</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">b.user_id = #map.filter_by_ywy_id_eq#</isNotEmpty> 
		<isNotEmpty prepend=" and " property="map.dept_id">c.DEPT_ID = #map.dept_id#</isNotEmpty> 
		<isNotEmpty prepend=" and " property="year">a.YEAR = #year:DECIMAL#</isNotEmpty>
		<isNotEmpty prepend=" and " property="r3_code">a.R3_CODE = #r3_code:VARCHAR#</isNotEmpty>	
		<isNotEmpty prepend=" and " property="map.customer_type1">c.PAR_CUSTOMER_TYPE = #map.customer_type1#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.customer_type2">c.CUSTOMER_TYPE = #map.customer_type2#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.kh_name_like">a.CUSTOMER_NAME like '%'||#map.kh_name_like#||'%'</isNotEmpty>	
		order by a.YEAR desc,a.customer_name
		<![CDATA[ ) t_ left join KONKA_CATEGORY c on (t_.CUSTOMER_TYPE=c.C_INDEX and c.C_TYPE = 10) 
		where rownum <= (#row.first# + #row.count#)]]>
		<![CDATA[ ) where rn_ >= (#row.first# + 1) ]]>
	</select>

	<!-- Hu,hao 2013-11-06  回款数据 -->
	<resultMap id="konkaR3BackmoneyForHkDataList" class="konkaR3Backmoney">
		<result column="HK_MONEY" property="map.hk_money" jdbcType="DECIMAL" />
		<result column="TQ_HK_TB" property="map.tq_hk_tb" jdbcType="DECIMAL" />
		<result column="LY_HK_HB" property="map.ly_hk_hb" jdbcType="DECIMAL" />
	</resultMap>
	
	<!-- Hu,hao 2013-11-06  回款数据 -->
	<select id="selectKonkaR3BackmoneyFoHkDataPaginatedList" resultMap="konkaR3BackmoneyForHkDataList" parameterClass="konkaR3Backmoney" >
		select  decode(tt.hk_money,null,0,tt.hk_money) as hk_money,
    			decode(tt.tq_hk_money,null,0,0,0,(decode(tt.hk_money,null,0,tt.hk_money)-tt.tq_hk_money)/tt.tq_hk_money) * 100 as tq_hk_tb,
    			decode(tt.ly_hk_money,null,0,0,0,(decode(tt.hk_money,null,0,tt.hk_money)-tt.ly_hk_money)/tt.ly_hk_money) * 100 as ly_hk_hb
		 from (
		 select 
		     (select sum($map.column_value$)from v_a_details_of_backmoney where year = #map.this_year#
					<isNotEmpty prepend=" and " property="map.dept_id_start">
						(cur_dept_id is not null and cur_dept_id in (
									select dept_id from konka_dept start with dept_id in (
									SELECT DISTINCT (dept_id)
					  							FROM KONKA_ROLE_DATA_LEVEL
					 							WHERE role_id IN (SELECT role_id
					                     			FROM KONKA_PE_ROLE_USER
					                    			WHERE user_id = #map.session_user_id#)
									) or dept_id = #map.dept_id_start# 
									connect by prior dept_id = par_id 
								)
						)
					</isNotEmpty>
				<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
					user_id = #map.filter_by_ywy_id_eq#
			    </isNotEmpty>		
		      ) as hk_money,
		     (select sum($map.column_value$)from v_a_details_of_backmoney where year = #map.last_year# 
					<isNotEmpty prepend=" and " property="map.dept_id_start">
						(cur_dept_id is not null and cur_dept_id in (
									select dept_id from konka_dept start with dept_id in (
									SELECT DISTINCT (dept_id)
					  							FROM KONKA_ROLE_DATA_LEVEL
					 							WHERE role_id IN (SELECT role_id
					                     			FROM KONKA_PE_ROLE_USER
					                    			WHERE user_id = #map.session_user_id#)
									) or dept_id = #map.dept_id_start# 
									connect by prior dept_id = par_id 
								)
						)
					</isNotEmpty>
				<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
					user_id = #map.filter_by_ywy_id_eq#
			    </isNotEmpty>		
		     ) as tq_hk_money,
		     (select sum($map.s_column_value$)from v_a_details_of_backmoney  where year = #map.s_year# 
	               <isNotEmpty prepend=" and " property="map.dept_id_start">
						(cur_dept_id is not null and cur_dept_id in (
									select dept_id from konka_dept start with dept_id in (
									SELECT DISTINCT (dept_id)
					  							FROM KONKA_ROLE_DATA_LEVEL
					 							WHERE role_id IN (SELECT role_id
					                     			FROM KONKA_PE_ROLE_USER
					                    			WHERE user_id = #map.session_user_id#)
									) or dept_id = #map.dept_id_start# 
									connect by prior dept_id = par_id 
								)
						)
					</isNotEmpty>
				<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
					user_id = #map.filter_by_ywy_id_eq#
			    </isNotEmpty>		
		     ) as ly_hk_money
		  from SYSIBM.SYSDUMMY1 ) tt
	</select>
	
	<!-- Hu,hao 2013-11-06  零售数据 -->
	<resultMap id="konkaR3BackmoneyForSailDataList" class="konkaR3Backmoney">
		<result column="SALE_NUM" property="map.sale_num" jdbcType="DECIMAL" />
		<result column="SALE_ALL_PRICE" property="map.sale_all_price" jdbcType="DECIMAL" />
		<result column="SAIL_PJ_PRICE" property="map.sail_pj_price" jdbcType="DECIMAL" />
		<result column="SAIL_NUM_TB" property="map.sail_num_tb" jdbcType="DECIMAL" />
		<result column="SAIL_PRICE_TB" property="map.sail_price_tb" jdbcType="DECIMAL" />
		<result column="SAIL_PRICE_HB" property="map.sail_price_hb" jdbcType="DECIMAL" />
		<result column="SAIL_NUM_HB" property="map.sail_num_hb" jdbcType="DECIMAL" />
	</resultMap>

	<select id="selectKonkaR3BackmoneyFoSailDataPaginatedList" resultMap="konkaR3BackmoneyForSailDataList" parameterClass="konkaR3Backmoney" >
		select tt.SALE_NUM,
		       tt.sale_all_price/10000 as sale_all_price,
		       decode(SALE_NUM,0,0,sale_all_price/SALE_NUM) as sail_pj_price,
		       decode(SALE_TQ_ALL_PRICE,0,0,(sale_all_price-SALE_TQ_ALL_PRICE)/SALE_TQ_ALL_PRICE) * 100 as sail_price_tb,
		       decode(SALE_TQ_NUM,0,0,(SALE_NUM-SALE_TQ_NUM)/SALE_TQ_NUM) * 100 as sail_num_tb ,
		       decode(SALE_LY_ALL_PRICE,0,0,(sale_all_price-SALE_LY_ALL_PRICE)/SALE_LY_ALL_PRICE) * 100 as sail_price_hb,
		       decode(SALE_LY_NUM,0,0,(SALE_NUM-SALE_LY_NUM)/SALE_LY_NUM) * 100 as sail_num_hb 
		from (	
				select  decode(aa.SALE_NUM,null,0,aa.SALE_NUM) as SALE_NUM,
		       			decode(aa.sale_all_price,null,0,aa.sale_all_price) as sale_all_price,
				        decode(bb.SALE_TQ_NUM,null,0,bb.SALE_TQ_NUM) as SALE_TQ_NUM,
				        decode(bb.SALE_TQ_ALL_PRICE,null,0,bb.SALE_TQ_ALL_PRICE) as SALE_TQ_ALL_PRICE,
				        decode(cc.SALE_LY_ALL_PRICE,null,0,cc.SALE_LY_ALL_PRICE) as SALE_LY_ALL_PRICE,
				        decode(cc.SALE_LY_NUM,null,0,cc.SALE_LY_NUM) as SALE_LY_NUM
					 from (select sum(num) as sale_num,sum(ALL_PRICE) as sale_all_price, 1 as ss from (
					SELECT sum(num) as num ,sum(ALL_PRICE) as ALL_PRICE, CUSTOMER_r3_code
					  FROM KONKA_MOBILE_SAIL_DATA
					 WHERE is_del = 0
					       AND num != 0
					       AND ALL_PRICE != 0
					       AND num IS NOT NULL
					       AND all_price IS NOT NULL
					       and CUSTOMER_r3_code is not null
					       <![CDATA[ and sale_date >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                   <![CDATA[ and sale_date <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
					       group by CUSTOMER_r3_code ) a
					  left join MV_ORG_OF_CUSTOMER_ALL b on a.CUSTOMER_R3_CODE = b.R3_CODE where 1 = 1
			               <isNotEmpty prepend=" and " property="map.dept_id_start">
								(b.cur_dept_id is not null and b.cur_dept_id in (
											select dept_id from konka_dept start with dept_id in (
											SELECT DISTINCT (dept_id)
							  							FROM KONKA_ROLE_DATA_LEVEL
							 							WHERE role_id IN (SELECT role_id
							                     			FROM KONKA_PE_ROLE_USER
							                    			WHERE user_id = #map.session_user_id#)
											) or dept_id = #map.dept_id_start# 
											connect by prior dept_id = par_id 
										)
								)
							</isNotEmpty>
							<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
								 b.user_id = #map.filter_by_ywy_id_eq#
							</isNotEmpty>	
					  ) aa
					  left join (select sum(num) as sale_tq_num,sum(ALL_PRICE) as sale_tq_all_price, 1 as ss from (
					SELECT sum(num) as num ,sum(ALL_PRICE) as ALL_PRICE, CUSTOMER_r3_code
					  FROM KONKA_MOBILE_SAIL_DATA
					 WHERE     is_del = 0
					       AND num != 0
					       AND ALL_PRICE != 0
					       AND num IS NOT NULL
					       AND all_price IS NOT NULL
					       and CUSTOMER_r3_code is not null
					       <![CDATA[ and sale_date >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                   <![CDATA[ and sale_date <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
					       group by CUSTOMER_r3_code ) a
					  left join MV_ORG_OF_CUSTOMER_ALL b on a.CUSTOMER_R3_CODE = b.R3_CODE where 1 = 1
			               <isNotEmpty prepend=" and " property="map.dept_id_start">
								(b.cur_dept_id is not null and b.cur_dept_id in (
											select dept_id from konka_dept start with dept_id in (
											SELECT DISTINCT (dept_id)
							  							FROM KONKA_ROLE_DATA_LEVEL
							 							WHERE role_id IN (SELECT role_id
							                     			FROM KONKA_PE_ROLE_USER
							                    			WHERE user_id = #map.session_user_id#)
											) or dept_id = #map.dept_id_start# 
											connect by prior dept_id = par_id 
										)
								)
							</isNotEmpty>
							<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
								 b.user_id = #map.filter_by_ywy_id_eq#
							</isNotEmpty>
					  ) bb on aa.SS = bb.SS
					  left join (select sum(num) as sale_ly_num,sum(ALL_PRICE) as sale_ly_all_price, 1 as ss from (
					SELECT sum(num) as num ,sum(ALL_PRICE) as ALL_PRICE, CUSTOMER_r3_code
					  FROM KONKA_MOBILE_SAIL_DATA
					 WHERE     is_del = 0
					       AND num != 0
					       AND ALL_PRICE != 0
					       AND num IS NOT NULL
					       AND all_price IS NOT NULL
					       and CUSTOMER_r3_code is not null
					       <![CDATA[ and sale_date >= to_date(#map.s_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                   <![CDATA[ and sale_date <= to_date(#map.s_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
					       group by CUSTOMER_r3_code ) a
					  left join MV_ORG_OF_CUSTOMER_ALL b on a.CUSTOMER_R3_CODE = b.R3_CODE where 1 = 1
			               <isNotEmpty prepend=" and " property="map.dept_id_start">
								(b.cur_dept_id is not null and b.cur_dept_id in (
											select dept_id from konka_dept start with dept_id in (
											SELECT DISTINCT (dept_id)
							  							FROM KONKA_ROLE_DATA_LEVEL
							 							WHERE role_id IN (SELECT role_id
							                     			FROM KONKA_PE_ROLE_USER
							                    			WHERE user_id = #map.session_user_id#)
											) or dept_id = #map.dept_id_start# 
											connect by prior dept_id = par_id 
										)
								)
							</isNotEmpty>
							<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
								 b.user_id = #map.filter_by_ywy_id_eq#
							</isNotEmpty>	
					  ) cc on aa.SS = cc.SS ) tt
	</select>

	<!-- Hu,hao 2013-11-06 结算数据 -->
	<resultMap id="konkaR3BackmoneyForJsDataList" class="konkaR3Backmoney">
		<result column="JS_MONEY" property="map.js_money" jdbcType="DECIMAL" />
		<result column="JS_NUM" property="map.js_num" jdbcType="DECIMAL" />
		<result column="JS_PJ_PRICE" property="map.js_pj_price" jdbcType="DECIMAL" />
		<result column="JS_MONEY_ZB" property="map.js_money_zb" jdbcType="DECIMAL" />
		<result column="JS_MONEY_HB" property="map.js_money_hb" jdbcType="DECIMAL" />
		<result column="JS_NUM_TB" property="map.js_num_tb" jdbcType="DECIMAL" />
		<result column="JS_NUM_HB" property="map.js_num_hb" jdbcType="DECIMAL" />
	</resultMap>

	<select id="selectKonkaR3BackmoneyFoJsDataPaginatedList" resultMap="konkaR3BackmoneyForJsDataList" parameterClass="konkaR3Backmoney" >
		select tt.JS_NUM,
				tt.JS_MONEY/10000 as JS_MONEY,
		    decode(tt.JS_NUM,0,0,tt.JS_MONEY /tt.JS_NUM) as js_pj_price,
		    decode(tt.qn_js_money,0,0,(tt.JS_MONEY - tt.qn_js_money) /tt.qn_js_money) * 100 as js_money_zb,
		    decode(tt.s_js_money,0,0,(tt.JS_MONEY - tt.s_js_money) /tt.s_js_money) * 100 as js_money_hb,
		    decode(tt.qn_is_num,0,0,(tt.JS_NUM - tt.qn_is_num) /tt.qn_is_num) * 100 as js_num_tb,
		    decode(tt.s_js_num,0,0,(tt.JS_NUM - tt.s_js_num) /tt.s_js_num) * 100 as js_num_hb
		from (	
				SELECT  decode(aa.JS_MONEY,null,0,aa.JS_MONEY) as JS_MONEY,
		       			decode(aa.JS_NUM,null,0,aa.JS_NUM) as JS_NUM,
				        decode(bb.qn_js_money,null,0,bb.qn_js_money) as qn_js_money,
				        decode(bb.qn_is_num,null,0,bb.qn_is_num) as qn_is_num,
				        decode(cc.s_js_money,null,0,cc.s_js_money) as s_js_money,
				        decode(cc.s_js_num,null,0,cc.s_js_num) as s_js_num
				  FROM    (SELECT sum (a.COLUMN_14) AS js_money,
				                  sum (a.COLUMN_12) AS js_num,
				                  1 AS ss
				             FROM    CHANNEL_DATA_IMPORT a
				                  LEFT JOIN
				                     MV_ORG_OF_CUSTOMER_ALL b
				                  ON a.COLUMN_1 = b.R3_CODE
				            WHERE <![CDATA[ a.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                   <![CDATA[ and a.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
			               <isNotEmpty prepend=" and " property="map.dept_id_start">
								(b.cur_dept_id is not null and b.cur_dept_id in (
											select dept_id from konka_dept start with dept_id in (
											SELECT DISTINCT (dept_id)
							  							FROM KONKA_ROLE_DATA_LEVEL
							 							WHERE role_id IN (SELECT role_id
							                     			FROM KONKA_PE_ROLE_USER
							                    			WHERE user_id = #map.session_user_id#)
											) or dept_id = #map.dept_id_start# 
											connect by prior dept_id = par_id 
										)
								)
							</isNotEmpty>
							<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
								 b.user_id = #map.filter_by_ywy_id_eq#
							</isNotEmpty>
		                   ) aa LEFT JOIN
				          (SELECT sum (a.COLUMN_14) AS qn_js_money,
				                  sum (a.COLUMN_12) AS qn_is_num,
				                  1 AS ss
				             FROM    CHANNEL_DATA_IMPORT a
				                  LEFT JOIN
				                     MV_ORG_OF_CUSTOMER_ALL b
				                  ON a.COLUMN_1 = b.R3_CODE
				            WHERE <![CDATA[ a.COLUMN_26 >= to_date(#map.last_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                   <![CDATA[ and a.COLUMN_26 <= to_date(#map.last_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
			               <isNotEmpty prepend=" and " property="map.dept_id_start">
								(b.cur_dept_id is not null and b.cur_dept_id in (
											select dept_id from konka_dept start with dept_id in (
											SELECT DISTINCT (dept_id)
							  							FROM KONKA_ROLE_DATA_LEVEL
							 							WHERE role_id IN (SELECT role_id
							                     			FROM KONKA_PE_ROLE_USER
							                    			WHERE user_id = #map.session_user_id#)
											) or dept_id = #map.dept_id_start# 
											connect by prior dept_id = par_id 
										)
								)
							</isNotEmpty>
							<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
								b.user_id = #map.filter_by_ywy_id_eq#
							</isNotEmpty>
		                   ) bb
				       ON aa.ss = bb.SS
				        LEFT JOIN
				          (SELECT sum (a.COLUMN_14) AS s_js_money,
				                  sum (a.COLUMN_12) AS s_js_num,
				                  1 AS ss
				             FROM    CHANNEL_DATA_IMPORT a
				                  LEFT JOIN
				                     MV_ORG_OF_CUSTOMER_ALL b
				                  ON a.COLUMN_1 = b.R3_CODE
				            WHERE <![CDATA[  a.COLUMN_26 >= to_date(#map.s_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                   <![CDATA[ and a.COLUMN_26 <= to_date(#map.s_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
			               <isNotEmpty prepend=" and " property="map.dept_id_start">
								(b.cur_dept_id is not null and b.cur_dept_id in (
											select dept_id from konka_dept start with dept_id in (
											SELECT DISTINCT (dept_id)
							  							FROM KONKA_ROLE_DATA_LEVEL
							 							WHERE role_id IN (SELECT role_id
							                     			FROM KONKA_PE_ROLE_USER
							                    			WHERE user_id = #map.session_user_id#)
											) or dept_id = #map.dept_id_start# 
											connect by prior dept_id = par_id 
										)
								)
							</isNotEmpty>
							<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
								b.user_id = #map.filter_by_ywy_id_eq#
							</isNotEmpty>
		                   ) cc
				       ON cc.ss = aa.SS ) tt
	</select>

	<resultMap id="konkaR3BackmoneyForRwDataList" class="konkaR3Backmoney">
		<result column="RW_MONEY" property="map.rw_money" jdbcType="DECIMAL" />
	</resultMap>
	
	<select id="selectKonkaR3BackmoneyFoRwDataPaginatedList" resultMap="konkaR3BackmoneyForRwDataList" parameterClass="konkaR3Backmoney" >
		select sum(cur_MONEY_OF_MONTH_TASK) as rw_money from V_A_DATA_OF_DEPT_TASK_FGS 
			where 1 = 1
		<isNotEmpty prepend=" and " property="map.this_year">y =  #map.this_year#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.this_month">m =  #map.this_month#</isNotEmpty>
		<isNotEmpty prepend=" and " property="map.dept_sn">dept_sn =  #map.dept_sn#</isNotEmpty>
	</select>

	<!-- Hu,hao 2013-12-05 首页数据展示-->
	<resultMap id="konkaR3SailAndJsDataToIndexList" class="konkaR3Backmoney">
		<result column="JS_MONEY" property="map.js_money" jdbcType="DECIMAL" />
		<result column="SALE_NUM" property="map.sale_num" jdbcType="DECIMAL" />
		<result column="SALE_ALL_PRICE" property="map.sale_all_price" jdbcType="DECIMAL" />
	</resultMap>

	<select id="selectKonkaR3SailAndJsDataToIndexPaginatedList" resultMap="konkaR3SailAndJsDataToIndexList" parameterClass="konkaR3Backmoney" >
		select decode(aa.sale_num,null,0,aa.sale_num) as sale_num,
			   decode(aa.sale_all_price,null,0,aa.sale_all_price/10000) as sale_all_price,
			   decode(bb.js_money,null,0,bb.js_money/10000) as js_money
 			from ( select sum(num) as sale_num,sum(ALL_PRICE) as sale_all_price, 1 as ss from (
					SELECT sum(num) as num ,sum(ALL_PRICE) as ALL_PRICE, CUSTOMER_r3_code
					  FROM KONKA_MOBILE_SAIL_DATA
					 WHERE is_del = 0
					       AND num != 0
					       AND ALL_PRICE != 0
					       AND num IS NOT NULL
					       AND all_price IS NOT NULL
					       and CUSTOMER_r3_code is not null
					       <![CDATA[ and sale_date >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
		                   <![CDATA[ and sale_date <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
					       group by CUSTOMER_r3_code ) a
					  left join MV_ORG_OF_CUSTOMER_ALL b on a.CUSTOMER_R3_CODE = b.R3_CODE where 1 = 1
			               <isNotEmpty prepend=" and " property="map.dept_id_start">
								(b.cur_dept_id is not null and b.cur_dept_id in (
											select dept_id from konka_dept start with dept_id in (
											SELECT DISTINCT (dept_id)
							  							FROM KONKA_ROLE_DATA_LEVEL
							 							WHERE role_id IN (SELECT role_id
							                     			FROM KONKA_PE_ROLE_USER
							                    			WHERE user_id = #map.session_user_id#)
											) or dept_id = #map.dept_id_start# 
											connect by prior dept_id = par_id 
										)
								)
							</isNotEmpty>
							<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
								 b.user_id = #map.filter_by_ywy_id_eq#
							</isNotEmpty>	
		   ) aa left join (
			 SELECT sum (a.COLUMN_14) AS js_money, 1 AS ss
		             FROM    CHANNEL_DATA_IMPORT a
		                  LEFT JOIN  MV_ORG_OF_CUSTOMER_ALL b
		                  ON a.COLUMN_1 = b.R3_CODE
		            WHERE <![CDATA[ a.COLUMN_26 >= to_date(#map.this_date_s#,'yyyy-MM-dd hh24:mi:ss')]]>
                   <![CDATA[ and a.COLUMN_26 <= to_date(#map.this_date_e#,'yyyy-MM-dd hh24:mi:ss')]]>
	               <isNotEmpty prepend=" and " property="map.dept_id_start">
						(b.cur_dept_id is not null and b.cur_dept_id in (
									select dept_id from konka_dept start with dept_id in (
									SELECT DISTINCT (dept_id)
					  							FROM KONKA_ROLE_DATA_LEVEL
					 							WHERE role_id IN (SELECT role_id
					                     			FROM KONKA_PE_ROLE_USER
					                    			WHERE user_id = #map.session_user_id#)
									) or dept_id = #map.dept_id_start# 
									connect by prior dept_id = par_id 
								)
						)
					</isNotEmpty>
					<isNotEmpty prepend=" and " property="map.filter_by_ywy_id_eq">
						 b.user_id = #map.filter_by_ywy_id_eq#
					</isNotEmpty>
		
		) bb on aa.ss = bb.ss
		
	</select>

	<insert id="insertKonkaR3Backmoney" parameterClass="konkaR3Backmoney">
		<selectKey resultClass="long" keyProperty="id">select SEQ_KONKA_R3_BACKMONEY.nextval as id from dual</selectKey>
		<![CDATA[insert into KONKA_R3_BACKMONEY (]]>
		<dynamic prepend=" ">
			<isNotNull prepend=" " property="id">ID</isNotNull>	
			<isNotNull prepend="," property="add_date">ADD_DATE</isNotNull>	
			<isNotNull prepend="," property="add_uid">ADD_UID</isNotNull>	
			<isNotNull prepend="," property="year">YEAR</isNotNull>	
			<isNotNull prepend="," property="branch_area_name">BRANCH_AREA_NAME</isNotNull>	
			<isNotNull prepend="," property="branch_area_code">BRANCH_AREA_CODE</isNotNull>	
			<isNotNull prepend="," property="handle_name">HANDLE_NAME</isNotNull>	
			<isNotNull prepend="," property="r3_code">R3_CODE</isNotNull>	
			<isNotNull prepend="," property="customer_type">CUSTOMER_TYPE</isNotNull>	
			<isNotNull prepend="," property="area_name">AREA_NAME</isNotNull>	
			<isNotNull prepend="," property="area_code">AREA_CODE</isNotNull>	
			<isNotNull prepend="," property="customer_name">CUSTOMER_NAME</isNotNull>	
			<isNotNull prepend="," property="column_1">COLUMN_1</isNotNull>	
			<isNotNull prepend="," property="column_2">COLUMN_2</isNotNull>	
			<isNotNull prepend="," property="column_3">COLUMN_3</isNotNull>	
			<isNotNull prepend="," property="column_4">COLUMN_4</isNotNull>	
			<isNotNull prepend="," property="column_5">COLUMN_5</isNotNull>	
			<isNotNull prepend="," property="column_6">COLUMN_6</isNotNull>	
			<isNotNull prepend="," property="column_7">COLUMN_7</isNotNull>	
			<isNotNull prepend="," property="column_8">COLUMN_8</isNotNull>	
			<isNotNull prepend="," property="column_9">COLUMN_9</isNotNull>	
			<isNotNull prepend="," property="column_10">COLUMN_10</isNotNull>	
			<isNotNull prepend="," property="column_11">COLUMN_11</isNotNull>	
			<isNotNull prepend="," property="column_12">COLUMN_12</isNotNull>	
		</dynamic>
		<![CDATA[) values (]]>
		<dynamic prepend=" ">
			<isNotNull prepend=" " property="id">#id:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="add_date">#add_date:DATE#</isNotNull>	
			<isNotNull prepend="," property="add_uid">#add_uid:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="year">#year:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="branch_area_name">#branch_area_name:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="branch_area_code">#branch_area_code:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="handle_name">#handle_name:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="r3_code">#r3_code:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="customer_type">#customer_type:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="area_name">#area_name:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="area_code">#area_code:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="customer_name">#customer_name:VARCHAR#</isNotNull>	
			<isNotNull prepend="," property="column_1">#column_1:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_2">#column_2:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_3">#column_3:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_4">#column_4:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_5">#column_5:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_6">#column_6:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_7">#column_7:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_8">#column_8:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_9">#column_9:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_10">#column_10:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_11">#column_11:DECIMAL#</isNotNull>	
			<isNotNull prepend="," property="column_12">#column_12:DECIMAL#</isNotNull>	
		</dynamic>
		<![CDATA[)]]>
	</insert>

	<update id="updateKonkaR3Backmoney" parameterClass="konkaR3Backmoney">
		update KONKA_R3_BACKMONEY
		<dynamic prepend="set">
			<isNotNull prepend=" " property="id">ID = #id:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="add_date">ADD_DATE = #add_date:DATE#</isNotNull>
			<isNotNull prepend="," property="add_uid">ADD_UID = #add_uid:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="year">YEAR = #year:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="branch_area_name">BRANCH_AREA_NAME = #branch_area_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="branch_area_code">BRANCH_AREA_CODE = #branch_area_code:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="handle_name">HANDLE_NAME = #handle_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="r3_code">R3_CODE = #r3_code:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="customer_type">CUSTOMER_TYPE = #customer_type:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="area_name">AREA_NAME = #area_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="area_code">AREA_CODE = #area_code:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="customer_name">CUSTOMER_NAME = #customer_name:VARCHAR#</isNotNull>
			<isNotNull prepend="," property="column_1">COLUMN_1 = #column_1:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_2">COLUMN_2 = #column_2:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_3">COLUMN_3 = #column_3:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_4">COLUMN_4 = #column_4:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_5">COLUMN_5 = #column_5:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_6">COLUMN_6 = #column_6:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_7">COLUMN_7 = #column_7:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_8">COLUMN_8 = #column_8:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_9">COLUMN_9 = #column_9:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_10">COLUMN_10 = #column_10:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_11">COLUMN_11 = #column_11:DECIMAL#</isNotNull>
			<isNotNull prepend="," property="column_12">COLUMN_12 = #column_12:DECIMAL#</isNotNull>
		</dynamic>
		where
		<isNotEmpty prepend=" " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</update>

	<delete id="deleteKonkaR3Backmoney" parameterClass="konkaR3Backmoney">
		delete from KONKA_R3_BACKMONEY where
		<isNotEmpty prepend=" " property="id">ID = #id#</isNotEmpty>
		<isEmpty prepend=" " property="id">
			<isNotEmpty prepend=" " property="map.pks">
				ID in
				<iterate close=")" open="(" conjunction="," property="map.pks">#map.pks[]#</iterate>
			</isNotEmpty>
		</isEmpty>
	</delete>

</sqlMap>